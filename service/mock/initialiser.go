// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-api-clients-go/health"
	"github.com/ONSdigital/florence/config"
	"github.com/ONSdigital/florence/service"
	"github.com/ONSdigital/florence/upload"
	"net/http"
	"sync"
)

var (
	lockInitialiserMockDoGetHTTPServer   sync.RWMutex
	lockInitialiserMockDoGetHealthCheck  sync.RWMutex
	lockInitialiserMockDoGetHealthClient sync.RWMutex
	lockInitialiserMockDoGetS3Client     sync.RWMutex
	lockInitialiserMockDoGetVault        sync.RWMutex
)

// Ensure, that InitialiserMock does implement service.Initialiser.
// If this is not the case, regenerate this file with moq.
var _ service.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of service.Initialiser.
//
//     func TestSomethingThatUsesInitialiser(t *testing.T) {
//
//         // make and configure a mocked service.Initialiser
//         mockedInitialiser := &InitialiserMock{
//             DoGetHTTPServerFunc: func(bindAddr string, router http.Handler) service.HTTPServer {
// 	               panic("mock out the DoGetHTTPServer method")
//             },
//             DoGetHealthCheckFunc: func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
// 	               panic("mock out the DoGetHealthCheck method")
//             },
//             DoGetHealthClientFunc: func(name string, url string) *health.Client {
// 	               panic("mock out the DoGetHealthClient method")
//             },
//             DoGetS3ClientFunc: func(awsRegion string, bucketName string, encryptionEnabled bool) (upload.S3Client, error) {
// 	               panic("mock out the DoGetS3Client method")
//             },
//             DoGetVaultFunc: func(vaultToken string, vaultAddress string, retries int) (upload.VaultClient, error) {
// 	               panic("mock out the DoGetVault method")
//             },
//         }
//
//         // use mockedInitialiser in code that requires service.Initialiser
//         // and then make assertions.
//
//     }
type InitialiserMock struct {
	// DoGetHTTPServerFunc mocks the DoGetHTTPServer method.
	DoGetHTTPServerFunc func(bindAddr string, router http.Handler) service.HTTPServer

	// DoGetHealthCheckFunc mocks the DoGetHealthCheck method.
	DoGetHealthCheckFunc func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error)

	// DoGetHealthClientFunc mocks the DoGetHealthClient method.
	DoGetHealthClientFunc func(name string, url string) *health.Client

	// DoGetS3ClientFunc mocks the DoGetS3Client method.
	DoGetS3ClientFunc func(awsRegion string, bucketName string, encryptionEnabled bool) (upload.S3Client, error)

	// DoGetVaultFunc mocks the DoGetVault method.
	DoGetVaultFunc func(vaultToken string, vaultAddress string, retries int) (upload.VaultClient, error)

	// calls tracks calls to the methods.
	calls struct {
		// DoGetHTTPServer holds details about calls to the DoGetHTTPServer method.
		DoGetHTTPServer []struct {
			// BindAddr is the bindAddr argument value.
			BindAddr string
			// Router is the router argument value.
			Router http.Handler
		}
		// DoGetHealthCheck holds details about calls to the DoGetHealthCheck method.
		DoGetHealthCheck []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
			// BuildTime is the buildTime argument value.
			BuildTime string
			// GitCommit is the gitCommit argument value.
			GitCommit string
			// Version is the version argument value.
			Version string
		}
		// DoGetHealthClient holds details about calls to the DoGetHealthClient method.
		DoGetHealthClient []struct {
			// Name is the name argument value.
			Name string
			// URL is the url argument value.
			URL string
		}
		// DoGetS3Client holds details about calls to the DoGetS3Client method.
		DoGetS3Client []struct {
			// AwsRegion is the awsRegion argument value.
			AwsRegion string
			// BucketName is the bucketName argument value.
			BucketName string
			// EncryptionEnabled is the encryptionEnabled argument value.
			EncryptionEnabled bool
		}
		// DoGetVault holds details about calls to the DoGetVault method.
		DoGetVault []struct {
			// VaultToken is the vaultToken argument value.
			VaultToken string
			// VaultAddress is the vaultAddress argument value.
			VaultAddress string
			// Retries is the retries argument value.
			Retries int
		}
	}
}

// DoGetHTTPServer calls DoGetHTTPServerFunc.
func (mock *InitialiserMock) DoGetHTTPServer(bindAddr string, router http.Handler) service.HTTPServer {
	if mock.DoGetHTTPServerFunc == nil {
		panic("InitialiserMock.DoGetHTTPServerFunc: method is nil but Initialiser.DoGetHTTPServer was just called")
	}
	callInfo := struct {
		BindAddr string
		Router   http.Handler
	}{
		BindAddr: bindAddr,
		Router:   router,
	}
	lockInitialiserMockDoGetHTTPServer.Lock()
	mock.calls.DoGetHTTPServer = append(mock.calls.DoGetHTTPServer, callInfo)
	lockInitialiserMockDoGetHTTPServer.Unlock()
	return mock.DoGetHTTPServerFunc(bindAddr, router)
}

// DoGetHTTPServerCalls gets all the calls that were made to DoGetHTTPServer.
// Check the length with:
//     len(mockedInitialiser.DoGetHTTPServerCalls())
func (mock *InitialiserMock) DoGetHTTPServerCalls() []struct {
	BindAddr string
	Router   http.Handler
} {
	var calls []struct {
		BindAddr string
		Router   http.Handler
	}
	lockInitialiserMockDoGetHTTPServer.RLock()
	calls = mock.calls.DoGetHTTPServer
	lockInitialiserMockDoGetHTTPServer.RUnlock()
	return calls
}

// DoGetHealthCheck calls DoGetHealthCheckFunc.
func (mock *InitialiserMock) DoGetHealthCheck(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
	if mock.DoGetHealthCheckFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckFunc: method is nil but Initialiser.DoGetHealthCheck was just called")
	}
	callInfo := struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}{
		Cfg:       cfg,
		BuildTime: buildTime,
		GitCommit: gitCommit,
		Version:   version,
	}
	lockInitialiserMockDoGetHealthCheck.Lock()
	mock.calls.DoGetHealthCheck = append(mock.calls.DoGetHealthCheck, callInfo)
	lockInitialiserMockDoGetHealthCheck.Unlock()
	return mock.DoGetHealthCheckFunc(cfg, buildTime, gitCommit, version)
}

// DoGetHealthCheckCalls gets all the calls that were made to DoGetHealthCheck.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthCheckCalls())
func (mock *InitialiserMock) DoGetHealthCheckCalls() []struct {
	Cfg       *config.Config
	BuildTime string
	GitCommit string
	Version   string
} {
	var calls []struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}
	lockInitialiserMockDoGetHealthCheck.RLock()
	calls = mock.calls.DoGetHealthCheck
	lockInitialiserMockDoGetHealthCheck.RUnlock()
	return calls
}

// DoGetHealthClient calls DoGetHealthClientFunc.
func (mock *InitialiserMock) DoGetHealthClient(name string, url string) *health.Client {
	if mock.DoGetHealthClientFunc == nil {
		panic("InitialiserMock.DoGetHealthClientFunc: method is nil but Initialiser.DoGetHealthClient was just called")
	}
	callInfo := struct {
		Name string
		URL  string
	}{
		Name: name,
		URL:  url,
	}
	lockInitialiserMockDoGetHealthClient.Lock()
	mock.calls.DoGetHealthClient = append(mock.calls.DoGetHealthClient, callInfo)
	lockInitialiserMockDoGetHealthClient.Unlock()
	return mock.DoGetHealthClientFunc(name, url)
}

// DoGetHealthClientCalls gets all the calls that were made to DoGetHealthClient.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthClientCalls())
func (mock *InitialiserMock) DoGetHealthClientCalls() []struct {
	Name string
	URL  string
} {
	var calls []struct {
		Name string
		URL  string
	}
	lockInitialiserMockDoGetHealthClient.RLock()
	calls = mock.calls.DoGetHealthClient
	lockInitialiserMockDoGetHealthClient.RUnlock()
	return calls
}

// DoGetS3Client calls DoGetS3ClientFunc.
func (mock *InitialiserMock) DoGetS3Client(awsRegion string, bucketName string, encryptionEnabled bool) (upload.S3Client, error) {
	if mock.DoGetS3ClientFunc == nil {
		panic("InitialiserMock.DoGetS3ClientFunc: method is nil but Initialiser.DoGetS3Client was just called")
	}
	callInfo := struct {
		AwsRegion         string
		BucketName        string
		EncryptionEnabled bool
	}{
		AwsRegion:         awsRegion,
		BucketName:        bucketName,
		EncryptionEnabled: encryptionEnabled,
	}
	lockInitialiserMockDoGetS3Client.Lock()
	mock.calls.DoGetS3Client = append(mock.calls.DoGetS3Client, callInfo)
	lockInitialiserMockDoGetS3Client.Unlock()
	return mock.DoGetS3ClientFunc(awsRegion, bucketName, encryptionEnabled)
}

// DoGetS3ClientCalls gets all the calls that were made to DoGetS3Client.
// Check the length with:
//     len(mockedInitialiser.DoGetS3ClientCalls())
func (mock *InitialiserMock) DoGetS3ClientCalls() []struct {
	AwsRegion         string
	BucketName        string
	EncryptionEnabled bool
} {
	var calls []struct {
		AwsRegion         string
		BucketName        string
		EncryptionEnabled bool
	}
	lockInitialiserMockDoGetS3Client.RLock()
	calls = mock.calls.DoGetS3Client
	lockInitialiserMockDoGetS3Client.RUnlock()
	return calls
}

// DoGetVault calls DoGetVaultFunc.
func (mock *InitialiserMock) DoGetVault(vaultToken string, vaultAddress string, retries int) (upload.VaultClient, error) {
	if mock.DoGetVaultFunc == nil {
		panic("InitialiserMock.DoGetVaultFunc: method is nil but Initialiser.DoGetVault was just called")
	}
	callInfo := struct {
		VaultToken   string
		VaultAddress string
		Retries      int
	}{
		VaultToken:   vaultToken,
		VaultAddress: vaultAddress,
		Retries:      retries,
	}
	lockInitialiserMockDoGetVault.Lock()
	mock.calls.DoGetVault = append(mock.calls.DoGetVault, callInfo)
	lockInitialiserMockDoGetVault.Unlock()
	return mock.DoGetVaultFunc(vaultToken, vaultAddress, retries)
}

// DoGetVaultCalls gets all the calls that were made to DoGetVault.
// Check the length with:
//     len(mockedInitialiser.DoGetVaultCalls())
func (mock *InitialiserMock) DoGetVaultCalls() []struct {
	VaultToken   string
	VaultAddress string
	Retries      int
} {
	var calls []struct {
		VaultToken   string
		VaultAddress string
		Retries      int
	}
	lockInitialiserMockDoGetVault.RLock()
	calls = mock.calls.DoGetVault
	lockInitialiserMockDoGetVault.RUnlock()
	return calls
}
