//==============================================================
// Typography helpers
//

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// In case we need
@mixin font-weight($weight) {
  font-weight: normal; // prevent browser attempting faux font-weights

  @if $weight == 300 {
    font-weight: 300;
  }

  @if $weight == 400 {
    font-weight: 400;
  }

  @if $weight == 500 {
    font-weight: 500;
  }

  @if $weight == 600 {
    font-weight: 600;
  }
}


// @TODO: check for newer rem mixin
//
//--------------------------
// Rem helper mixin
// Use to apply a rem measurement to a certain css property
//
// @param $property
//   The CSS property to apply the value to.
//   (E.g. margin-bottom or margin)
//
// @param $value
//   The measurement to apply to the property. This should be a value in pixels, but *without* the unit and can be shorthand.
//   (E.g. 27 or 10 20)
//
// @TODO: Replace explicit rem and px declarations throughout stie styles with this mixin
// @OPTIMIZE: Explore potential improvements, including how to set SASS vars to null without the use of an 'ambiguous zero'

@mixin rem($property, $size-in-px) {
  // Init shorthand variables (must use 0 for null...)
  $shorthand-in-px: 0;
  $shorthand-in-rem: 0;
  @each $size in $size-in-px { // Loop through values and concatenate
    $shorthand-in-px: $shorthand-in-px + ($size) + px + " ";
    $shorthand-in-rem: $shorthand-in-rem + ($size/10) + rem + " ";
  }
  // Output styles
  #{$property}: $shorthand-in-px;
  #{$property}: $shorthand-in-rem;
}

// Shorthand wrapper around the rem helper for font size
@mixin font-size($size-in-px) {
  @include rem(font-size, $size-in-px);
}

// Shorthand wrapper around the rem helper for line height
@mixin line-height($size-in-px) {
  @include rem(line-height, $size-in-px);
}


/* ======================================================
   Media query mixin
   Handle old versions of IE without the need for JavaScript as per http://jakearchibald.github.io/sass-ie/
   ======================================================*/

$fix-mqs: false !default;

@mixin respond-min($width) {
  // If we're outputting for a fixed media query set...
  @if $fix-mqs {
    // ...and if we should apply these rules...
    @if $fix-mqs >= $width {
      // ...output the content the user gave us.
      @content;
    }
  }
  @else {
    // Otherwise, output it using a regular media query
    @media screen and (min-width: $width) {
      @content;
    }
  }
}

@mixin respond-max($width) {
  // If we're outputting for a fixed media query set...
  @if $fix-mqs {
    // ...and if we should apply these rules...
    @if $fix-mqs <= $width {
      // ...output the content the user gave us.
      @content;
    }
  }
  @else {
    // Otherwise, output it using a regular media query
    @media screen and (max-width: $width) {
      @content;
    }
  }
}
