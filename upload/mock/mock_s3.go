// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-s3"
	"github.com/ONSdigital/florence/upload"
	"sync"
)

var (
	lockS3ClientMockCheckUploaded sync.RWMutex
	lockS3ClientMockGetURL        sync.RWMutex
	lockS3ClientMockUpload        sync.RWMutex
	lockS3ClientMockUploadWithPsk sync.RWMutex
)

// Ensure, that S3ClientMock does implement upload.S3Client.
// If this is not the case, regenerate this file with moq.
var _ upload.S3Client = &S3ClientMock{}

// S3ClientMock is a mock implementation of upload.S3Client.
//
//     func TestSomethingThatUsesS3Client(t *testing.T) {
//
//         // make and configure a mocked upload.S3Client
//         mockedS3Client := &S3ClientMock{
//             CheckUploadedFunc: func(ctx context.Context, req *s3client.UploadRequest) (bool, error) {
// 	               panic("mock out the CheckUploaded method")
//             },
//             GetURLFunc: func(path string) string {
// 	               panic("mock out the GetURL method")
//             },
//             UploadFunc: func(ctx context.Context, req *s3client.UploadRequest, payload []byte) error {
// 	               panic("mock out the Upload method")
//             },
//             UploadWithPskFunc: func(ctx context.Context, req *s3client.UploadRequest, payload []byte, psk []byte) error {
// 	               panic("mock out the UploadWithPsk method")
//             },
//         }
//
//         // use mockedS3Client in code that requires upload.S3Client
//         // and then make assertions.
//
//     }
type S3ClientMock struct {
	// CheckUploadedFunc mocks the CheckUploaded method.
	CheckUploadedFunc func(ctx context.Context, req *s3client.UploadRequest) (bool, error)

	// GetURLFunc mocks the GetURL method.
	GetURLFunc func(path string) string

	// UploadFunc mocks the Upload method.
	UploadFunc func(ctx context.Context, req *s3client.UploadRequest, payload []byte) error

	// UploadWithPskFunc mocks the UploadWithPsk method.
	UploadWithPskFunc func(ctx context.Context, req *s3client.UploadRequest, payload []byte, psk []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckUploaded holds details about calls to the CheckUploaded method.
		CheckUploaded []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *s3client.UploadRequest
		}
		// GetURL holds details about calls to the GetURL method.
		GetURL []struct {
			// Path is the path argument value.
			Path string
		}
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *s3client.UploadRequest
			// Payload is the payload argument value.
			Payload []byte
		}
		// UploadWithPsk holds details about calls to the UploadWithPsk method.
		UploadWithPsk []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *s3client.UploadRequest
			// Payload is the payload argument value.
			Payload []byte
			// Psk is the psk argument value.
			Psk []byte
		}
	}
}

// CheckUploaded calls CheckUploadedFunc.
func (mock *S3ClientMock) CheckUploaded(ctx context.Context, req *s3client.UploadRequest) (bool, error) {
	if mock.CheckUploadedFunc == nil {
		panic("S3ClientMock.CheckUploadedFunc: method is nil but S3Client.CheckUploaded was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *s3client.UploadRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockS3ClientMockCheckUploaded.Lock()
	mock.calls.CheckUploaded = append(mock.calls.CheckUploaded, callInfo)
	lockS3ClientMockCheckUploaded.Unlock()
	return mock.CheckUploadedFunc(ctx, req)
}

// CheckUploadedCalls gets all the calls that were made to CheckUploaded.
// Check the length with:
//     len(mockedS3Client.CheckUploadedCalls())
func (mock *S3ClientMock) CheckUploadedCalls() []struct {
	Ctx context.Context
	Req *s3client.UploadRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *s3client.UploadRequest
	}
	lockS3ClientMockCheckUploaded.RLock()
	calls = mock.calls.CheckUploaded
	lockS3ClientMockCheckUploaded.RUnlock()
	return calls
}

// GetURL calls GetURLFunc.
func (mock *S3ClientMock) GetURL(path string) string {
	if mock.GetURLFunc == nil {
		panic("S3ClientMock.GetURLFunc: method is nil but S3Client.GetURL was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	lockS3ClientMockGetURL.Lock()
	mock.calls.GetURL = append(mock.calls.GetURL, callInfo)
	lockS3ClientMockGetURL.Unlock()
	return mock.GetURLFunc(path)
}

// GetURLCalls gets all the calls that were made to GetURL.
// Check the length with:
//     len(mockedS3Client.GetURLCalls())
func (mock *S3ClientMock) GetURLCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	lockS3ClientMockGetURL.RLock()
	calls = mock.calls.GetURL
	lockS3ClientMockGetURL.RUnlock()
	return calls
}

// Upload calls UploadFunc.
func (mock *S3ClientMock) Upload(ctx context.Context, req *s3client.UploadRequest, payload []byte) error {
	if mock.UploadFunc == nil {
		panic("S3ClientMock.UploadFunc: method is nil but S3Client.Upload was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Req     *s3client.UploadRequest
		Payload []byte
	}{
		Ctx:     ctx,
		Req:     req,
		Payload: payload,
	}
	lockS3ClientMockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	lockS3ClientMockUpload.Unlock()
	return mock.UploadFunc(ctx, req, payload)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//     len(mockedS3Client.UploadCalls())
func (mock *S3ClientMock) UploadCalls() []struct {
	Ctx     context.Context
	Req     *s3client.UploadRequest
	Payload []byte
} {
	var calls []struct {
		Ctx     context.Context
		Req     *s3client.UploadRequest
		Payload []byte
	}
	lockS3ClientMockUpload.RLock()
	calls = mock.calls.Upload
	lockS3ClientMockUpload.RUnlock()
	return calls
}

// UploadWithPsk calls UploadWithPskFunc.
func (mock *S3ClientMock) UploadWithPsk(ctx context.Context, req *s3client.UploadRequest, payload []byte, psk []byte) error {
	if mock.UploadWithPskFunc == nil {
		panic("S3ClientMock.UploadWithPskFunc: method is nil but S3Client.UploadWithPsk was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Req     *s3client.UploadRequest
		Payload []byte
		Psk     []byte
	}{
		Ctx:     ctx,
		Req:     req,
		Payload: payload,
		Psk:     psk,
	}
	lockS3ClientMockUploadWithPsk.Lock()
	mock.calls.UploadWithPsk = append(mock.calls.UploadWithPsk, callInfo)
	lockS3ClientMockUploadWithPsk.Unlock()
	return mock.UploadWithPskFunc(ctx, req, payload, psk)
}

// UploadWithPskCalls gets all the calls that were made to UploadWithPsk.
// Check the length with:
//     len(mockedS3Client.UploadWithPskCalls())
func (mock *S3ClientMock) UploadWithPskCalls() []struct {
	Ctx     context.Context
	Req     *s3client.UploadRequest
	Payload []byte
	Psk     []byte
} {
	var calls []struct {
		Ctx     context.Context
		Req     *s3client.UploadRequest
		Payload []byte
		Psk     []byte
	}
	lockS3ClientMockUploadWithPsk.RLock()
	calls = mock.calls.UploadWithPsk
	lockS3ClientMockUploadWithPsk.RUnlock()
	return calls
}
