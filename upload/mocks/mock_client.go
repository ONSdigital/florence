// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/s3/s3iface (interfaces: S3API)

// Package mock_s3iface is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockS3Client is a mock of S3Client interface
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// CompleteMultipartUpload mocks base method
func (m *MockS3Client) CompleteMultipartUpload(arg0 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", arg0)
	ret0, _ := ret[0].(*s3.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload
func (mr *MockS3ClientMockRecorder) CompleteMultipartUpload(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockS3Client)(nil).CompleteMultipartUpload), arg0)
}

// CreateMultipartUpload mocks base method
func (m *MockS3Client) CreateMultipartUpload(arg0 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	ret := m.ctrl.Call(m, "CreateMultipartUpload", arg0)
	ret0, _ := ret[0].(*s3.CreateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultipartUpload indicates an expected call of CreateMultipartUpload
func (mr *MockS3ClientMockRecorder) CreateMultipartUpload(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipartUpload", reflect.TypeOf((*MockS3Client)(nil).CreateMultipartUpload), arg0)
}

// ListMultipartUploads mocks base method
func (m *MockS3Client) ListMultipartUploads(arg0 *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
	ret := m.ctrl.Call(m, "ListMultipartUploads", arg0)
	ret0, _ := ret[0].(*s3.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads
func (mr *MockS3ClientMockRecorder) ListMultipartUploads(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockS3Client)(nil).ListMultipartUploads), arg0)
}

// ListParts mocks base method
func (m *MockS3Client) ListParts(arg0 *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
	ret := m.ctrl.Call(m, "ListParts", arg0)
	ret0, _ := ret[0].(*s3.ListPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts
func (mr *MockS3ClientMockRecorder) ListParts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockS3Client)(nil).ListParts), arg0)
}

// UploadPart mocks base method
func (m *MockS3Client) UploadPart(arg0 *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
	ret := m.ctrl.Call(m, "UploadPart", arg0)
	ret0, _ := ret[0].(*s3.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart
func (mr *MockS3ClientMockRecorder) UploadPart(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockS3Client)(nil).UploadPart), arg0)
}

// UploadPartWithPSK mocks base method
func (m *MockS3Client) UploadPartWithPSK(arg0 *s3.UploadPartInput, arg1 []byte) (*s3.UploadPartOutput, error) {
	ret := m.ctrl.Call(m, "UploadPartWithPSK", arg0, arg1)
	ret0, _ := ret[0].(*s3.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPartWithPSK indicates an expected call of UploadPartWithPSK
func (mr *MockS3ClientMockRecorder) UploadPartWithPSK(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPartWithPSK", reflect.TypeOf((*MockS3Client)(nil).UploadPartWithPSK), arg0, arg1)
}