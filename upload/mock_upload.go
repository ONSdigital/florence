// Automatically generated by MockGen. DO NOT EDIT!
// Source: upload.go

package upload

import (
	io "io"

	s3 "github.com/goamz/goamz/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockBucket is a mock of Bucket interface
type MockBucket struct {
	ctrl     *gomock.Controller
	recorder *MockBucketMockRecorder
}

// MockBucketMockRecorder is the mock recorder for MockBucket
type MockBucketMockRecorder struct {
	mock *MockBucket
}

// NewMockBucket creates a new mock instance
func NewMockBucket(ctrl *gomock.Controller) *MockBucket {
	mock := &MockBucket{ctrl: ctrl}
	mock.recorder = &MockBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockBucket) EXPECT() *MockBucketMockRecorder {
	return _m.recorder
}

// Multi mocks base method
func (_m *MockBucket) Multi(key string, contType string, perm s3.ACL) (Multi, error) {
	ret := _m.ctrl.Call(_m, "Multi", key, contType, perm)
	ret0, _ := ret[0].(Multi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Multi indicates an expected call of Multi
func (_mr *MockBucketMockRecorder) Multi(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Multi", arg0, arg1, arg2)
}

// Put mocks base method
func (_m *MockBucket) Put(path string, data []byte, contType string, perm s3.ACL) error {
	ret := _m.ctrl.Call(_m, "Put", path, data, contType, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockBucketMockRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3)
}

// URL mocks base method
func (_m *MockBucket) URL(path string) string {
	ret := _m.ctrl.Call(_m, "URL", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL
func (_mr *MockBucketMockRecorder) URL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "URL", arg0)
}

// MockMulti is a mock of Multi interface
type MockMulti struct {
	ctrl     *gomock.Controller
	recorder *MockMultiMockRecorder
}

// MockMultiMockRecorder is the mock recorder for MockMulti
type MockMultiMockRecorder struct {
	mock *MockMulti
}

// NewMockMulti creates a new mock instance
func NewMockMulti(ctrl *gomock.Controller) *MockMulti {
	mock := &MockMulti{ctrl: ctrl}
	mock.recorder = &MockMultiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMulti) EXPECT() *MockMultiMockRecorder {
	return _m.recorder
}

// ListParts mocks base method
func (_m *MockMulti) ListParts() ([]s3.Part, error) {
	ret := _m.ctrl.Call(_m, "ListParts")
	ret0, _ := ret[0].([]s3.Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts
func (_mr *MockMultiMockRecorder) ListParts() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListParts")
}

// PutPart mocks base method
func (_m *MockMulti) PutPart(n int, r io.ReadSeeker) (s3.Part, error) {
	ret := _m.ctrl.Call(_m, "PutPart", n, r)
	ret0, _ := ret[0].(s3.Part)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPart indicates an expected call of PutPart
func (_mr *MockMultiMockRecorder) PutPart(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutPart", arg0, arg1)
}

// Complete mocks base method
func (_m *MockMulti) Complete(_param0 []s3.Part) error {
	ret := _m.ctrl.Call(_m, "Complete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete
func (_mr *MockMultiMockRecorder) Complete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Complete", arg0)
}

// Abort mocks base method
func (_m *MockMulti) Abort() error {
	ret := _m.ctrl.Call(_m, "Abort")
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort
func (_mr *MockMultiMockRecorder) Abort() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Abort")
}
