// Code generated by go-bindata.
// sources:
// ../src/.DS_Store
// ../src/assets/css/main.min.css
// ../src/assets/css/main.min.css.map
// ../src/assets/js/jquery.min.js
// ../src/assets/js/main.js
// ../src/assets/js/templates.js
// ../src/assets/version.json
// ../src/css/florence.css
// ../src/css/rapid-prototype-main.css
// ../src/css/third-party/c3.css
// ../src/css/third-party/jquery-ui.theme.min.css
// ../src/css/third-party/jquery.tagit.css
// ../src/css/third-party/pagedown.css
// ../src/css/third-party/responsive-tables.css
// ../src/css/third-party/sweetalert.css
// ../src/css/third-party/tagit.ui-zendesk.css
// ../src/florence.html
// ../src/font/Open_Sans/LICENSE.txt
// ../src/font/Open_Sans/OpenSans-Bold.eot
// ../src/font/Open_Sans/OpenSans-Bold.svg
// ../src/font/Open_Sans/OpenSans-Bold.ttf
// ../src/font/Open_Sans/OpenSans-Bold.woff
// ../src/font/Open_Sans/OpenSans-Bold.woff2
// ../src/font/Open_Sans/OpenSans-BoldItalic.eot
// ../src/font/Open_Sans/OpenSans-BoldItalic.svg
// ../src/font/Open_Sans/OpenSans-BoldItalic.ttf
// ../src/font/Open_Sans/OpenSans-BoldItalic.woff
// ../src/font/Open_Sans/OpenSans-ExtraBold.eot
// ../src/font/Open_Sans/OpenSans-ExtraBold.svg
// ../src/font/Open_Sans/OpenSans-ExtraBold.ttf
// ../src/font/Open_Sans/OpenSans-ExtraBold.woff
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff
// ../src/font/Open_Sans/OpenSans-Italic.eot
// ../src/font/Open_Sans/OpenSans-Italic.svg
// ../src/font/Open_Sans/OpenSans-Italic.ttf
// ../src/font/Open_Sans/OpenSans-Italic.woff
// ../src/font/Open_Sans/OpenSans-Light.eot
// ../src/font/Open_Sans/OpenSans-Light.svg
// ../src/font/Open_Sans/OpenSans-Light.ttf
// ../src/font/Open_Sans/OpenSans-Light.woff
// ../src/font/Open_Sans/OpenSans-Light.woff2
// ../src/font/Open_Sans/OpenSans-LightItalic.eot
// ../src/font/Open_Sans/OpenSans-LightItalic.svg
// ../src/font/Open_Sans/OpenSans-LightItalic.ttf
// ../src/font/Open_Sans/OpenSans-LightItalic.woff
// ../src/font/Open_Sans/OpenSans-Regular.eot
// ../src/font/Open_Sans/OpenSans-Regular.svg
// ../src/font/Open_Sans/OpenSans-Regular.ttf
// ../src/font/Open_Sans/OpenSans-Regular.woff
// ../src/font/Open_Sans/OpenSans-Regular.woff2
// ../src/font/Open_Sans/OpenSans-Semibold.eot
// ../src/font/Open_Sans/OpenSans-Semibold.svg
// ../src/font/Open_Sans/OpenSans-Semibold.ttf
// ../src/font/Open_Sans/OpenSans-Semibold.woff
// ../src/font/Open_Sans/OpenSans-Semibold.woff2
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.eot
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.svg
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.ttf
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.woff
// ../src/font/Roboto_Slab/LICENSE.txt
// ../src/font/Roboto_Slab/RobotoSlab-Bold.eot
// ../src/font/Roboto_Slab/RobotoSlab-Bold.svg
// ../src/font/Roboto_Slab/RobotoSlab-Bold.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Bold.woff
// ../src/font/Roboto_Slab/RobotoSlab-Bold.woff2
// ../src/font/Roboto_Slab/RobotoSlab-Light.eot
// ../src/font/Roboto_Slab/RobotoSlab-Light.svg
// ../src/font/Roboto_Slab/RobotoSlab-Light.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Light.woff
// ../src/font/Roboto_Slab/RobotoSlab-Regular.eot
// ../src/font/Roboto_Slab/RobotoSlab-Regular.svg
// ../src/font/Roboto_Slab/RobotoSlab-Regular.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Regular.woff
// ../src/font/Roboto_Slab/RobotoSlab-Regular.woff2
// ../src/font/Roboto_Slab/RobotoSlab-Thin.eot
// ../src/font/Roboto_Slab/RobotoSlab-Thin.svg
// ../src/font/Roboto_Slab/RobotoSlab-Thin.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Thin.woff
// ../src/font/Roboto_Slab/RobotoSlab-Thin.woff2
// ../src/font/Ubuntu_Mono/UFL.txt
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2
// ../src/font/florence.eot
// ../src/font/florence.svg
// ../src/font/florence.ttf
// ../src/font/florence.woff
// ../src/html templates/jquery-ui.min.js
// ../src/html templates/pagedown.css
// ../src/html templates/publish-manual.html
// ../src/html templates/publish-scheduled.html
// ../src/html templates/ui-functions.js
// ../src/html templates/workspace-browse.html
// ../src/html templates/workspace-create.html
// ../src/html templates/workspace-edit.html
// ../src/img/favicon11.ico
// ../src/img/favicon12.ico
// ../src/img/favicon21.ico
// ../src/img/favicon22.ico
// ../src/img/favicon23.ico
// ../src/img/favicon24.ico
// ../src/img/flo-logo.png
// ../src/img/flo-logo144.png
// ../src/img/rule-21.png
// ../src/img/rule-22.png
// ../src/img/rule.png
// ../src/img/sb_v_double_arrow.png
// ../src/img/semi-transparent-bg.png
// ../src/img/sprite.png
// ../src/img/ui-bg_diagonals-thick_18_b81900_40x40.png
// ../src/img/ui-bg_diagonals-thick_20_666666_40x40.png
// ../src/img/ui-bg_flat_10_000000_40x100.png
// ../src/img/ui-bg_glass_100_f6f6f6_1x400.png
// ../src/img/ui-bg_glass_100_fdf5ce_1x400.png
// ../src/img/ui-bg_glass_65_ffffff_1x400.png
// ../src/img/ui-bg_gloss-wave_35_f6a828_500x100.png
// ../src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png
// ../src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png
// ../src/img/ui-icons_222222_256x240.png
// ../src/img/ui-icons_228ef1_256x240.png
// ../src/img/ui-icons_ef8c08_256x240.png
// ../src/img/ui-icons_ffd27a_256x240.png
// ../src/img/ui-icons_ffffff_256x240.png
// ../src/img/wmd-buttons.png
// ../src/index.html
// ../src/js/classes/cookieUtils.js
// ../src/js/classes/florence.js
// ../src/js/classes/pathUtils.js
// ../src/js/classes/stringUtils.js
// ../src/js/components/_accordion.js
// ../src/js/components/_fileInput.js
// ../src/js/components/_hidePanel.js
// ../src/js/components/_showPanel.js
// ../src/js/functions/_ContentDeleteMarker.js
// ../src/js/functions/__init.js
// ../src/js/functions/_accordionSettings.js
// ../src/js/functions/_autoSize.js
// ../src/js/functions/_checkForPageChanged.js
// ../src/js/functions/_checkPathParsed.js
// ../src/js/functions/_checkPathSlashes.js
// ../src/js/functions/_checkRenameUri.js
// ../src/js/functions/_collectionHelpers.js
// ../src/js/functions/_copyPath.js
// ../src/js/functions/_createCollection.js
// ../src/js/functions/_createWorkspace.js
// ../src/js/functions/_deleteTeam.js
// ../src/js/functions/_deleteUnpublishedVersion.js
// ../src/js/functions/_deleteUser.js
// ../src/js/functions/_editAddDataset.js
// ../src/js/functions/_editAddFile.js
// ../src/js/functions/_editAddFileWithDetails.js
// ../src/js/functions/_editAlert.js
// ../src/js/functions/_editBlocks.js
// ../src/js/functions/_editCollection.js
// ../src/js/functions/_editDatasetVersion.js
// ../src/js/functions/_editDate.js
// ../src/js/functions/_editDocWithFilesCorrection.js
// ../src/js/functions/_editDocumentCorrection.js
// ../src/js/functions/_editIntLinks.js
// ../src/js/functions/_editMarkdownOneObject.js
// ../src/js/functions/_editMarkdownWithNoTitle.js
// ../src/js/functions/_editServiceMessage.js
// ../src/js/functions/_editTopics.js
// ../src/js/functions/_environment.js
// ../src/js/functions/_externalLinkAccordionSection.js
// ../src/js/functions/_fileDelete.js
// ../src/js/functions/_fileUpload.js
// ../src/js/functions/_getLastPosition.js
// ../src/js/functions/_getNetworkStatus.js
// ../src/js/functions/_getParentPage.js
// ../src/js/functions/_getPathNameTrimLast.js
// ../src/js/functions/_getPreviewUrl.js
// ../src/js/functions/_handleApiError.js
// ../src/js/functions/_initialiseNoteMarkdown.js
// ../src/js/functions/_inputValidation.js
// ../src/js/functions/_loadBrowseScreen.js
// ../src/js/functions/_loadChartBuilder.js
// ../src/js/functions/_loadChartsList.js
// ../src/js/functions/_loadCreateScreen.js
// ../src/js/functions/_loadCreator.js
// ../src/js/functions/_loadCreatorDatepicker.js
// ../src/js/functions/_loadEmbedIframe.js
// ../src/js/functions/_loadEquationBuilder.js
// ../src/js/functions/_loadEquationsList.js
// ../src/js/functions/_loadImageBuilder.js
// ../src/js/functions/_loadImagesList.js
// ../src/js/functions/_loadImportScreen.js
// ../src/js/functions/_loadMarkdownEditor.js
// ../src/js/functions/_loadPageDataIntoEditor.js
// ../src/js/functions/_loadParentLink.js
// ../src/js/functions/_loadT16Creator.js
// ../src/js/functions/_loadT4Creator.js
// ../src/js/functions/_loadT6Creator.js
// ../src/js/functions/_loadT7Creator.js
// ../src/js/functions/_loadT8DatasetCreator.js
// ../src/js/functions/_loadT8LandingCreator.js
// ../src/js/functions/_loadTableBuilder.js
// ../src/js/functions/_loadTablesList.js
// ../src/js/functions/_loadVisCreator.js
// ../src/js/functions/_logout.js
// ../src/js/functions/_makeUrl.js
// ../src/js/functions/_markdownContentAccordionSection.js
// ../src/js/functions/_markdownSetLines.js
// ../src/js/functions/_menuSelectSettings.js
// ../src/js/functions/_moveBrowseNode.js
// ../src/js/functions/_parseUrl.js
// ../src/js/functions/_postApproveCollection.js
// ../src/js/functions/_postComplete.js
// ../src/js/functions/_postContent.js
// ../src/js/functions/_postLogin.js
// ../src/js/functions/_postReview.js
// ../src/js/functions/_postTeam.js
// ../src/js/functions/_postUser.js
// ../src/js/functions/_publish.js
// ../src/js/functions/_refreshPreview.js
// ../src/js/functions/_relatedItemAccordionSection.js
// ../src/js/functions/_renameChildren.js
// ../src/js/functions/_renameContent.js
// ../src/js/functions/_renderAccordionSections.js
// ../src/js/functions/_reset.js
// ../src/js/functions/_saveContent.js
// ../src/js/functions/_saveNewCorrection.js
// ../src/js/functions/_setShortcuts.js
// ../src/js/functions/_setupFlorence.js
// ../src/js/functions/_t16ReleaseEditor.js
// ../src/js/functions/_t1Editor.js
// ../src/js/functions/_t1EditorCensus.js
// ../src/js/functions/_t2Editor.js
// ../src/js/functions/_t3Editor.js
// ../src/js/functions/_t4ArticleDownloadEditor.js
// ../src/js/functions/_t4ArticleEditor.js
// ../src/js/functions/_t4BulletinEditor.js
// ../src/js/functions/_t5TimeseriesEditor.js
// ../src/js/functions/_t6CompendiumChapterEditor.js
// ../src/js/functions/_t6CompendiumDataEditor.js
// ../src/js/functions/_t6CompendiumEditor.js
// ../src/js/functions/_t7AdHocEditor.js
// ../src/js/functions/_t7FoiEditor.js
// ../src/js/functions/_t7MethodologyDownloadEditor.js
// ../src/js/functions/_t7MethodologyEditor.js
// ../src/js/functions/_t7QmiEditor.js
// ../src/js/functions/_t7StaticArticleEditor.js
// ../src/js/functions/_t7StaticLandingPageEditor.js
// ../src/js/functions/_t7StaticPageEditor.js
// ../src/js/functions/_t8DatasetEditor.js
// ../src/js/functions/_t8LandingPageEditor.js
// ../src/js/functions/_transfer.js
// ../src/js/functions/_treeNodeSelect.js
// ../src/js/functions/_ui.js
// ../src/js/functions/_uiTidyup.js
// ../src/js/functions/_updateContent.js
// ../src/js/functions/_viewChangePassword.js
// ../src/js/functions/_viewCollectionDetails.js
// ../src/js/functions/_viewCollections.js
// ../src/js/functions/_viewController.js
// ../src/js/functions/_viewLogIn.js
// ../src/js/functions/_viewPublish.js
// ../src/js/functions/_viewPublishDetails.js
// ../src/js/functions/_viewReleaseSelector.js
// ../src/js/functions/_viewReportDetails.js
// ../src/js/functions/_viewReports.js
// ../src/js/functions/_viewTeamDetails.js
// ../src/js/functions/_viewTeams.js
// ../src/js/functions/_viewUserDetails.js
// ../src/js/functions/_viewUsers.js
// ../src/js/functions/_viewWorkspace.js
// ../src/js/functions/_visualisationEditor.js
// ../src/js/functions/registerServiceWorker.js
// ../src/js/third-party/Markdown.Converter.js
// ../src/js/third-party/Markdown.Editor.js
// ../src/js/third-party/Markdown.Extra.js
// ../src/js/third-party/Markdown.Sanitizer.js
// ../src/js/third-party/ZeroClipboard.min.js
// ../src/js/third-party/ZeroClipboard.swf
// ../src/js/third-party/autosize.js
// ../src/js/third-party/clipboard.min.js
// ../src/js/third-party/handlebars.runtime.min.js
// ../src/js/third-party/highcharts-more.js
// ../src/js/third-party/highcharts.js
// ../src/js/third-party/jquery-ui-timepicker-addon.js
// ../src/js/third-party/jquery-ui.js
// ../src/js/third-party/jquery.hotkeys.js
// ../src/js/third-party/mathjax/MathJax.js
// ../src/js/third-party/mathjax/config/AM_CHTML-full.js
// ../src/js/third-party/mathjax/config/AM_CHTML.js
// ../src/js/third-party/mathjax/config/AM_HTMLorMML-full.js
// ../src/js/third-party/mathjax/config/AM_HTMLorMML.js
// ../src/js/third-party/mathjax/config/AM_SVG-full.js
// ../src/js/third-party/mathjax/config/AM_SVG.js
// ../src/js/third-party/mathjax/config/Accessible-full.js
// ../src/js/third-party/mathjax/config/Accessible.js
// ../src/js/third-party/mathjax/config/MML_CHTML-full.js
// ../src/js/third-party/mathjax/config/MML_CHTML.js
// ../src/js/third-party/mathjax/config/MML_HTMLorMML-full.js
// ../src/js/third-party/mathjax/config/MML_HTMLorMML.js
// ../src/js/third-party/mathjax/config/MML_SVG-full.js
// ../src/js/third-party/mathjax/config/MML_SVG.js
// ../src/js/third-party/mathjax/config/MMLorHTML.js
// ../src/js/third-party/mathjax/config/Safe.js
// ../src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML-full.js
// ../src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML.js
// ../src/js/third-party/mathjax/config/TeX-AMS-MML_SVG-full.js
// ../src/js/third-party/mathjax/config/TeX-AMS-MML_SVG.js
// ../src/js/third-party/mathjax/config/TeX-AMS_CHTML-full.js
// ../src/js/third-party/mathjax/config/TeX-AMS_CHTML.js
// ../src/js/third-party/mathjax/config/TeX-AMS_HTML-full.js
// ../src/js/third-party/mathjax/config/TeX-AMS_HTML.js
// ../src/js/third-party/mathjax/config/TeX-AMS_SVG-full.js
// ../src/js/third-party/mathjax/config/TeX-AMS_SVG.js
// ../src/js/third-party/mathjax/config/TeX-MML-AM_CHTML-full.js
// ../src/js/third-party/mathjax/config/TeX-MML-AM_CHTML.js
// ../src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML-full.js
// ../src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML.js
// ../src/js/third-party/mathjax/config/TeX-MML-AM_SVG-full.js
// ../src/js/third-party/mathjax/config/TeX-MML-AM_SVG.js
// ../src/js/third-party/mathjax/config/default.js
// ../src/js/third-party/mathjax/config/local/local.js
// ../src/js/third-party/mathjax/extensions/AssistiveMML.js
// ../src/js/third-party/mathjax/extensions/CHTML-preview.js
// ../src/js/third-party/mathjax/extensions/FontWarnings.js
// ../src/js/third-party/mathjax/extensions/HTML-CSS/handle-floats.js
// ../src/js/third-party/mathjax/extensions/HelpDialog.js
// ../src/js/third-party/mathjax/extensions/MatchWebFonts.js
// ../src/js/third-party/mathjax/extensions/MathEvents.js
// ../src/js/third-party/mathjax/extensions/MathML/content-mathml.js
// ../src/js/third-party/mathjax/extensions/MathML/mml3.js
// ../src/js/third-party/mathjax/extensions/MathMenu.js
// ../src/js/third-party/mathjax/extensions/MathZoom.js
// ../src/js/third-party/mathjax/extensions/Safe.js
// ../src/js/third-party/mathjax/extensions/TeX/AMScd.js
// ../src/js/third-party/mathjax/extensions/TeX/AMSmath.js
// ../src/js/third-party/mathjax/extensions/TeX/AMSsymbols.js
// ../src/js/third-party/mathjax/extensions/TeX/HTML.js
// ../src/js/third-party/mathjax/extensions/TeX/action.js
// ../src/js/third-party/mathjax/extensions/TeX/autobold.js
// ../src/js/third-party/mathjax/extensions/TeX/autoload-all.js
// ../src/js/third-party/mathjax/extensions/TeX/bbox.js
// ../src/js/third-party/mathjax/extensions/TeX/begingroup.js
// ../src/js/third-party/mathjax/extensions/TeX/boldsymbol.js
// ../src/js/third-party/mathjax/extensions/TeX/cancel.js
// ../src/js/third-party/mathjax/extensions/TeX/color.js
// ../src/js/third-party/mathjax/extensions/TeX/enclose.js
// ../src/js/third-party/mathjax/extensions/TeX/extpfeil.js
// ../src/js/third-party/mathjax/extensions/TeX/mathchoice.js
// ../src/js/third-party/mathjax/extensions/TeX/mediawiki-texvc.js
// ../src/js/third-party/mathjax/extensions/TeX/mhchem.js
// ../src/js/third-party/mathjax/extensions/TeX/newcommand.js
// ../src/js/third-party/mathjax/extensions/TeX/noErrors.js
// ../src/js/third-party/mathjax/extensions/TeX/noUndefined.js
// ../src/js/third-party/mathjax/extensions/TeX/unicode.js
// ../src/js/third-party/mathjax/extensions/TeX/verb.js
// ../src/js/third-party/mathjax/extensions/asciimath2jax.js
// ../src/js/third-party/mathjax/extensions/fast-preview.js
// ../src/js/third-party/mathjax/extensions/jsMath2jax.js
// ../src/js/third-party/mathjax/extensions/mml2jax.js
// ../src/js/third-party/mathjax/extensions/tex2jax.js
// ../src/js/third-party/mathjax/extensions/toMathML.js
// ../src/js/third-party/mathjax/jax/element/mml/jax.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/Arrows.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/BasicLatin.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/CombDiactForSymbols.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/Dingbats.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/MathOperators.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsA.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsB.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/MiscSymbolsAndArrows.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/MiscTechnical.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsA.js
// ../src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsB.js
// ../src/js/third-party/mathjax/jax/input/AsciiMath/config.js
// ../src/js/third-party/mathjax/jax/input/AsciiMath/jax.js
// ../src/js/third-party/mathjax/jax/input/MathML/config.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/a.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/b.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/c.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/d.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/e.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/f.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/fr.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/g.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/h.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/i.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/j.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/k.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/l.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/m.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/n.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/o.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/opf.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/p.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/q.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/r.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/s.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/scr.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/t.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/u.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/v.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/w.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/x.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/y.js
// ../src/js/third-party/mathjax/jax/input/MathML/entities/z.js
// ../src/js/third-party/mathjax/jax/input/MathML/jax.js
// ../src/js/third-party/mathjax/jax/input/TeX/config.js
// ../src/js/third-party/mathjax/jax/input/TeX/jax.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/annotation-xml.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/maction.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/menclose.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mglyph.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mmultiscripts.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/ms.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mtable.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/multiline.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/config.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/AMS-Regular.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Caligraphic-Bold.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Bold.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Regular.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Main-Bold.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Math-BoldItalic.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Bold.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Italic.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Regular.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Script-Regular.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Typewriter-Regular.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata.js
// ../src/js/third-party/mathjax/jax/output/CommonHTML/jax.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/annotation-xml.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/maction.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/menclose.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mglyph.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mmultiscripts.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/ms.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mtable.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/multiline.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/blank.gif
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/config.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size7/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/AlphaPresentForms.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Arrows.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BBBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoldFraktur.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoxDrawing.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiactForSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/ControlPictures.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CurrencySymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Cyrillic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/EnclosedAlphanum.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekSSBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/IPAExtensions.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedAdditional.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedD.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathSSBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscTechnical.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/NumberForms.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/PhoneticExtensions.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuperAndSubscripts.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/AlphaPresentForms.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BoxDrawing.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CombDiactForSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/ControlPictures.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CurrencySymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Cyrillic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/EnclosedAlphanum.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekBoldItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekSSBoldItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/IPAExtensions.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedAdditional.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldScript.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathSSItalicBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/AlphaPresentForms.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/BoxDrawing.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CombDiactForSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ControlPictures.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CurrencySymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Cyrillic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/EnclosedAlphanum.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/IPAExtensions.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedAdditional.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathSSItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathScript.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ij.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/AlphaPresentForms.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Arrows.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BBBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BlockElements.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoldFraktur.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoxDrawing.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CJK.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiactForSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ControlPictures.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CurrencySymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Cyrillic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Dingbats.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/EnclosedAlphanum.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Fraktur.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBoldItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBoldItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Hiragana.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/IPAExtensions.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedAdditional.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedD.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldScript.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSS.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalicBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathScript.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathTT.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbolsAndArrows.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscTechnical.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/NumberForms.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/PhoneticExtensions.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Specials.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuperAndSubscripts.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ij.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/PrivateUse.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/PrivateUse.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/PrivateUse.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/PrivateUse.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/All.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-1.0.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-beta.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Arrows.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BBBold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BoxDrawing.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Dingbats.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/EnclosedAlphanum.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscTechnical.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/PUA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Other.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/PUA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Other.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/PUA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Arrows.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiactForSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscMathSymbolsA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscTechnical.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SupplementalArrowsA.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Other.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Other.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Other.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Other.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Other.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinChrome/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/AMS.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Bold.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/imageFonts.js
// ../src/js/third-party/mathjax/jax/output/HTML-CSS/jax.js
// ../src/js/third-party/mathjax/jax/output/NativeMML/config.js
// ../src/js/third-party/mathjax/jax/output/NativeMML/jax.js
// ../src/js/third-party/mathjax/jax/output/PlainSource/config.js
// ../src/js/third-party/mathjax/jax/output/PlainSource/jax.js
// ../src/js/third-party/mathjax/jax/output/PreviewHTML/config.js
// ../src/js/third-party/mathjax/jax/output/PreviewHTML/jax.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/annotation-xml.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/maction.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/menclose.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/mglyph.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/mmultiscripts.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/ms.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/mtable.js
// ../src/js/third-party/mathjax/jax/output/SVG/autoload/multiline.js
// ../src/js/third-party/mathjax/jax/output/SVG/config.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size6/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size7/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/NonUnicode/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Normal/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Monospace/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size5/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Arrows.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/BoxDrawing.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Dingbats.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/EnclosedAlphanum.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscTechnical.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/PUA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Other.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/PUA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Other.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/PUA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Arrows.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiactForSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Latin1Supplement.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscMathSymbolsA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscTechnical.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SupplementalArrowsA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GeneralPunctuation.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GeometricShapes.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GreekAndCoptic.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedA.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedB.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LetterlikeSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MathOperators.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MiscSymbols.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SpacingModLetters.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SuppMathOperators.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/BoldItalic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Other.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Other.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Other.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size1/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size2/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size3/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size4/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/BasicLatin.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Main.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Other.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata-extra.js
// ../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata.js
// ../src/js/third-party/mathjax/jax/output/SVG/jax.js
// ../src/js/third-party/mathjax/localization/ast/FontWarnings.js
// ../src/js/third-party/mathjax/localization/ast/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/ast/HelpDialog.js
// ../src/js/third-party/mathjax/localization/ast/MathML.js
// ../src/js/third-party/mathjax/localization/ast/MathMenu.js
// ../src/js/third-party/mathjax/localization/ast/TeX.js
// ../src/js/third-party/mathjax/localization/ast/ast.js
// ../src/js/third-party/mathjax/localization/bcc/FontWarnings.js
// ../src/js/third-party/mathjax/localization/bcc/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/bcc/HelpDialog.js
// ../src/js/third-party/mathjax/localization/bcc/MathML.js
// ../src/js/third-party/mathjax/localization/bcc/MathMenu.js
// ../src/js/third-party/mathjax/localization/bcc/TeX.js
// ../src/js/third-party/mathjax/localization/bcc/bcc.js
// ../src/js/third-party/mathjax/localization/bg/FontWarnings.js
// ../src/js/third-party/mathjax/localization/bg/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/bg/HelpDialog.js
// ../src/js/third-party/mathjax/localization/bg/MathML.js
// ../src/js/third-party/mathjax/localization/bg/MathMenu.js
// ../src/js/third-party/mathjax/localization/bg/TeX.js
// ../src/js/third-party/mathjax/localization/bg/bg.js
// ../src/js/third-party/mathjax/localization/br/FontWarnings.js
// ../src/js/third-party/mathjax/localization/br/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/br/HelpDialog.js
// ../src/js/third-party/mathjax/localization/br/MathML.js
// ../src/js/third-party/mathjax/localization/br/MathMenu.js
// ../src/js/third-party/mathjax/localization/br/TeX.js
// ../src/js/third-party/mathjax/localization/br/br.js
// ../src/js/third-party/mathjax/localization/ca/FontWarnings.js
// ../src/js/third-party/mathjax/localization/ca/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/ca/HelpDialog.js
// ../src/js/third-party/mathjax/localization/ca/MathML.js
// ../src/js/third-party/mathjax/localization/ca/MathMenu.js
// ../src/js/third-party/mathjax/localization/ca/TeX.js
// ../src/js/third-party/mathjax/localization/ca/ca.js
// ../src/js/third-party/mathjax/localization/cdo/FontWarnings.js
// ../src/js/third-party/mathjax/localization/cdo/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/cdo/HelpDialog.js
// ../src/js/third-party/mathjax/localization/cdo/MathML.js
// ../src/js/third-party/mathjax/localization/cdo/MathMenu.js
// ../src/js/third-party/mathjax/localization/cdo/TeX.js
// ../src/js/third-party/mathjax/localization/cdo/cdo.js
// ../src/js/third-party/mathjax/localization/ce/FontWarnings.js
// ../src/js/third-party/mathjax/localization/ce/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/ce/HelpDialog.js
// ../src/js/third-party/mathjax/localization/ce/MathML.js
// ../src/js/third-party/mathjax/localization/ce/MathMenu.js
// ../src/js/third-party/mathjax/localization/ce/TeX.js
// ../src/js/third-party/mathjax/localization/ce/ce.js
// ../src/js/third-party/mathjax/localization/cs/FontWarnings.js
// ../src/js/third-party/mathjax/localization/cs/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/cs/HelpDialog.js
// ../src/js/third-party/mathjax/localization/cs/MathML.js
// ../src/js/third-party/mathjax/localization/cs/MathMenu.js
// ../src/js/third-party/mathjax/localization/cs/TeX.js
// ../src/js/third-party/mathjax/localization/cs/cs.js
// ../src/js/third-party/mathjax/localization/cy/FontWarnings.js
// ../src/js/third-party/mathjax/localization/cy/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/cy/HelpDialog.js
// ../src/js/third-party/mathjax/localization/cy/MathML.js
// ../src/js/third-party/mathjax/localization/cy/MathMenu.js
// ../src/js/third-party/mathjax/localization/cy/TeX.js
// ../src/js/third-party/mathjax/localization/cy/cy.js
// ../src/js/third-party/mathjax/localization/da/FontWarnings.js
// ../src/js/third-party/mathjax/localization/da/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/da/HelpDialog.js
// ../src/js/third-party/mathjax/localization/da/MathML.js
// ../src/js/third-party/mathjax/localization/da/MathMenu.js
// ../src/js/third-party/mathjax/localization/da/TeX.js
// ../src/js/third-party/mathjax/localization/da/da.js
// ../src/js/third-party/mathjax/localization/de/FontWarnings.js
// ../src/js/third-party/mathjax/localization/de/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/de/HelpDialog.js
// ../src/js/third-party/mathjax/localization/de/MathML.js
// ../src/js/third-party/mathjax/localization/de/MathMenu.js
// ../src/js/third-party/mathjax/localization/de/TeX.js
// ../src/js/third-party/mathjax/localization/de/de.js
// ../src/js/third-party/mathjax/localization/en/FontWarnings.js
// ../src/js/third-party/mathjax/localization/en/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/en/HelpDialog.js
// ../src/js/third-party/mathjax/localization/en/MathML.js
// ../src/js/third-party/mathjax/localization/en/MathMenu.js
// ../src/js/third-party/mathjax/localization/en/TeX.js
// ../src/js/third-party/mathjax/localization/en/en.js
// ../src/js/third-party/mathjax/localization/eo/FontWarnings.js
// ../src/js/third-party/mathjax/localization/eo/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/eo/HelpDialog.js
// ../src/js/third-party/mathjax/localization/eo/MathML.js
// ../src/js/third-party/mathjax/localization/eo/MathMenu.js
// ../src/js/third-party/mathjax/localization/eo/TeX.js
// ../src/js/third-party/mathjax/localization/eo/eo.js
// ../src/js/third-party/mathjax/localization/es/FontWarnings.js
// ../src/js/third-party/mathjax/localization/es/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/es/HelpDialog.js
// ../src/js/third-party/mathjax/localization/es/MathML.js
// ../src/js/third-party/mathjax/localization/es/MathMenu.js
// ../src/js/third-party/mathjax/localization/es/TeX.js
// ../src/js/third-party/mathjax/localization/es/es.js
// ../src/js/third-party/mathjax/localization/fa/FontWarnings.js
// ../src/js/third-party/mathjax/localization/fa/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/fa/HelpDialog.js
// ../src/js/third-party/mathjax/localization/fa/MathML.js
// ../src/js/third-party/mathjax/localization/fa/MathMenu.js
// ../src/js/third-party/mathjax/localization/fa/TeX.js
// ../src/js/third-party/mathjax/localization/fa/fa.js
// ../src/js/third-party/mathjax/localization/fi/FontWarnings.js
// ../src/js/third-party/mathjax/localization/fi/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/fi/HelpDialog.js
// ../src/js/third-party/mathjax/localization/fi/MathML.js
// ../src/js/third-party/mathjax/localization/fi/MathMenu.js
// ../src/js/third-party/mathjax/localization/fi/TeX.js
// ../src/js/third-party/mathjax/localization/fi/fi.js
// ../src/js/third-party/mathjax/localization/fr/FontWarnings.js
// ../src/js/third-party/mathjax/localization/fr/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/fr/HelpDialog.js
// ../src/js/third-party/mathjax/localization/fr/MathML.js
// ../src/js/third-party/mathjax/localization/fr/MathMenu.js
// ../src/js/third-party/mathjax/localization/fr/TeX.js
// ../src/js/third-party/mathjax/localization/fr/fr.js
// ../src/js/third-party/mathjax/localization/gl/FontWarnings.js
// ../src/js/third-party/mathjax/localization/gl/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/gl/HelpDialog.js
// ../src/js/third-party/mathjax/localization/gl/MathML.js
// ../src/js/third-party/mathjax/localization/gl/MathMenu.js
// ../src/js/third-party/mathjax/localization/gl/TeX.js
// ../src/js/third-party/mathjax/localization/gl/gl.js
// ../src/js/third-party/mathjax/localization/he/FontWarnings.js
// ../src/js/third-party/mathjax/localization/he/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/he/HelpDialog.js
// ../src/js/third-party/mathjax/localization/he/MathML.js
// ../src/js/third-party/mathjax/localization/he/MathMenu.js
// ../src/js/third-party/mathjax/localization/he/TeX.js
// ../src/js/third-party/mathjax/localization/he/he.js
// ../src/js/third-party/mathjax/localization/ia/FontWarnings.js
// ../src/js/third-party/mathjax/localization/ia/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/ia/HelpDialog.js
// ../src/js/third-party/mathjax/localization/ia/MathML.js
// ../src/js/third-party/mathjax/localization/ia/MathMenu.js
// ../src/js/third-party/mathjax/localization/ia/TeX.js
// ../src/js/third-party/mathjax/localization/ia/ia.js
// ../src/js/third-party/mathjax/localization/it/FontWarnings.js
// ../src/js/third-party/mathjax/localization/it/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/it/HelpDialog.js
// ../src/js/third-party/mathjax/localization/it/MathML.js
// ../src/js/third-party/mathjax/localization/it/MathMenu.js
// ../src/js/third-party/mathjax/localization/it/TeX.js
// ../src/js/third-party/mathjax/localization/it/it.js
// ../src/js/third-party/mathjax/localization/ja/FontWarnings.js
// ../src/js/third-party/mathjax/localization/ja/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/ja/HelpDialog.js
// ../src/js/third-party/mathjax/localization/ja/MathML.js
// ../src/js/third-party/mathjax/localization/ja/MathMenu.js
// ../src/js/third-party/mathjax/localization/ja/TeX.js
// ../src/js/third-party/mathjax/localization/ja/ja.js
// ../src/js/third-party/mathjax/localization/kn/FontWarnings.js
// ../src/js/third-party/mathjax/localization/kn/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/kn/HelpDialog.js
// ../src/js/third-party/mathjax/localization/kn/MathML.js
// ../src/js/third-party/mathjax/localization/kn/MathMenu.js
// ../src/js/third-party/mathjax/localization/kn/TeX.js
// ../src/js/third-party/mathjax/localization/kn/kn.js
// ../src/js/third-party/mathjax/localization/ko/FontWarnings.js
// ../src/js/third-party/mathjax/localization/ko/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/ko/HelpDialog.js
// ../src/js/third-party/mathjax/localization/ko/MathML.js
// ../src/js/third-party/mathjax/localization/ko/MathMenu.js
// ../src/js/third-party/mathjax/localization/ko/TeX.js
// ../src/js/third-party/mathjax/localization/ko/ko.js
// ../src/js/third-party/mathjax/localization/lb/FontWarnings.js
// ../src/js/third-party/mathjax/localization/lb/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/lb/HelpDialog.js
// ../src/js/third-party/mathjax/localization/lb/MathML.js
// ../src/js/third-party/mathjax/localization/lb/MathMenu.js
// ../src/js/third-party/mathjax/localization/lb/TeX.js
// ../src/js/third-party/mathjax/localization/lb/lb.js
// ../src/js/third-party/mathjax/localization/lki/FontWarnings.js
// ../src/js/third-party/mathjax/localization/lki/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/lki/HelpDialog.js
// ../src/js/third-party/mathjax/localization/lki/MathML.js
// ../src/js/third-party/mathjax/localization/lki/MathMenu.js
// ../src/js/third-party/mathjax/localization/lki/TeX.js
// ../src/js/third-party/mathjax/localization/lki/lki.js
// ../src/js/third-party/mathjax/localization/lt/FontWarnings.js
// ../src/js/third-party/mathjax/localization/lt/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/lt/HelpDialog.js
// ../src/js/third-party/mathjax/localization/lt/MathML.js
// ../src/js/third-party/mathjax/localization/lt/MathMenu.js
// ../src/js/third-party/mathjax/localization/lt/TeX.js
// ../src/js/third-party/mathjax/localization/lt/lt.js
// ../src/js/third-party/mathjax/localization/mk/FontWarnings.js
// ../src/js/third-party/mathjax/localization/mk/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/mk/HelpDialog.js
// ../src/js/third-party/mathjax/localization/mk/MathML.js
// ../src/js/third-party/mathjax/localization/mk/MathMenu.js
// ../src/js/third-party/mathjax/localization/mk/TeX.js
// ../src/js/third-party/mathjax/localization/mk/mk.js
// ../src/js/third-party/mathjax/localization/nl/FontWarnings.js
// ../src/js/third-party/mathjax/localization/nl/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/nl/HelpDialog.js
// ../src/js/third-party/mathjax/localization/nl/MathML.js
// ../src/js/third-party/mathjax/localization/nl/MathMenu.js
// ../src/js/third-party/mathjax/localization/nl/TeX.js
// ../src/js/third-party/mathjax/localization/nl/nl.js
// ../src/js/third-party/mathjax/localization/oc/FontWarnings.js
// ../src/js/third-party/mathjax/localization/oc/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/oc/HelpDialog.js
// ../src/js/third-party/mathjax/localization/oc/MathML.js
// ../src/js/third-party/mathjax/localization/oc/MathMenu.js
// ../src/js/third-party/mathjax/localization/oc/TeX.js
// ../src/js/third-party/mathjax/localization/oc/oc.js
// ../src/js/third-party/mathjax/localization/pl/FontWarnings.js
// ../src/js/third-party/mathjax/localization/pl/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/pl/HelpDialog.js
// ../src/js/third-party/mathjax/localization/pl/MathML.js
// ../src/js/third-party/mathjax/localization/pl/MathMenu.js
// ../src/js/third-party/mathjax/localization/pl/TeX.js
// ../src/js/third-party/mathjax/localization/pl/pl.js
// ../src/js/third-party/mathjax/localization/pt/FontWarnings.js
// ../src/js/third-party/mathjax/localization/pt/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/pt/HelpDialog.js
// ../src/js/third-party/mathjax/localization/pt/MathML.js
// ../src/js/third-party/mathjax/localization/pt/MathMenu.js
// ../src/js/third-party/mathjax/localization/pt/TeX.js
// ../src/js/third-party/mathjax/localization/pt/pt.js
// ../src/js/third-party/mathjax/localization/pt-br/FontWarnings.js
// ../src/js/third-party/mathjax/localization/pt-br/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/pt-br/HelpDialog.js
// ../src/js/third-party/mathjax/localization/pt-br/MathML.js
// ../src/js/third-party/mathjax/localization/pt-br/MathMenu.js
// ../src/js/third-party/mathjax/localization/pt-br/TeX.js
// ../src/js/third-party/mathjax/localization/pt-br/pt-br.js
// ../src/js/third-party/mathjax/localization/qqq/FontWarnings.js
// ../src/js/third-party/mathjax/localization/qqq/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/qqq/HelpDialog.js
// ../src/js/third-party/mathjax/localization/qqq/MathML.js
// ../src/js/third-party/mathjax/localization/qqq/MathMenu.js
// ../src/js/third-party/mathjax/localization/qqq/TeX.js
// ../src/js/third-party/mathjax/localization/qqq/qqq.js
// ../src/js/third-party/mathjax/localization/ru/FontWarnings.js
// ../src/js/third-party/mathjax/localization/ru/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/ru/HelpDialog.js
// ../src/js/third-party/mathjax/localization/ru/MathML.js
// ../src/js/third-party/mathjax/localization/ru/MathMenu.js
// ../src/js/third-party/mathjax/localization/ru/TeX.js
// ../src/js/third-party/mathjax/localization/ru/ru.js
// ../src/js/third-party/mathjax/localization/scn/FontWarnings.js
// ../src/js/third-party/mathjax/localization/scn/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/scn/HelpDialog.js
// ../src/js/third-party/mathjax/localization/scn/MathML.js
// ../src/js/third-party/mathjax/localization/scn/MathMenu.js
// ../src/js/third-party/mathjax/localization/scn/TeX.js
// ../src/js/third-party/mathjax/localization/scn/scn.js
// ../src/js/third-party/mathjax/localization/sco/FontWarnings.js
// ../src/js/third-party/mathjax/localization/sco/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/sco/HelpDialog.js
// ../src/js/third-party/mathjax/localization/sco/MathML.js
// ../src/js/third-party/mathjax/localization/sco/MathMenu.js
// ../src/js/third-party/mathjax/localization/sco/TeX.js
// ../src/js/third-party/mathjax/localization/sco/sco.js
// ../src/js/third-party/mathjax/localization/sl/FontWarnings.js
// ../src/js/third-party/mathjax/localization/sl/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/sl/HelpDialog.js
// ../src/js/third-party/mathjax/localization/sl/MathML.js
// ../src/js/third-party/mathjax/localization/sl/MathMenu.js
// ../src/js/third-party/mathjax/localization/sl/TeX.js
// ../src/js/third-party/mathjax/localization/sl/sl.js
// ../src/js/third-party/mathjax/localization/sv/FontWarnings.js
// ../src/js/third-party/mathjax/localization/sv/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/sv/HelpDialog.js
// ../src/js/third-party/mathjax/localization/sv/MathML.js
// ../src/js/third-party/mathjax/localization/sv/MathMenu.js
// ../src/js/third-party/mathjax/localization/sv/TeX.js
// ../src/js/third-party/mathjax/localization/sv/sv.js
// ../src/js/third-party/mathjax/localization/tr/FontWarnings.js
// ../src/js/third-party/mathjax/localization/tr/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/tr/HelpDialog.js
// ../src/js/third-party/mathjax/localization/tr/MathML.js
// ../src/js/third-party/mathjax/localization/tr/MathMenu.js
// ../src/js/third-party/mathjax/localization/tr/TeX.js
// ../src/js/third-party/mathjax/localization/tr/tr.js
// ../src/js/third-party/mathjax/localization/uk/FontWarnings.js
// ../src/js/third-party/mathjax/localization/uk/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/uk/HelpDialog.js
// ../src/js/third-party/mathjax/localization/uk/MathML.js
// ../src/js/third-party/mathjax/localization/uk/MathMenu.js
// ../src/js/third-party/mathjax/localization/uk/TeX.js
// ../src/js/third-party/mathjax/localization/uk/uk.js
// ../src/js/third-party/mathjax/localization/vi/FontWarnings.js
// ../src/js/third-party/mathjax/localization/vi/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/vi/HelpDialog.js
// ../src/js/third-party/mathjax/localization/vi/MathML.js
// ../src/js/third-party/mathjax/localization/vi/MathMenu.js
// ../src/js/third-party/mathjax/localization/vi/TeX.js
// ../src/js/third-party/mathjax/localization/vi/vi.js
// ../src/js/third-party/mathjax/localization/zh-hans/FontWarnings.js
// ../src/js/third-party/mathjax/localization/zh-hans/HTML-CSS.js
// ../src/js/third-party/mathjax/localization/zh-hans/HelpDialog.js
// ../src/js/third-party/mathjax/localization/zh-hans/MathML.js
// ../src/js/third-party/mathjax/localization/zh-hans/MathMenu.js
// ../src/js/third-party/mathjax/localization/zh-hans/TeX.js
// ../src/js/third-party/mathjax/localization/zh-hans/zh-hans.js
// ../src/js/third-party/sweetalert.min.js
// ../src/js/third-party/tag-it.js
// ../src/js/third-party/underscore-min.js
// ../src/js/third-party/underscore-min.map
// ../src/js/zebedee-api/_deleteCollection.js
// ../src/js/zebedee-api/_deleteContent.js
// ../src/js/zebedee-api/_deleteEquation.js
// ../src/js/zebedee-api/_getCollection.js
// ../src/js/zebedee-api/_getPageData.js
// ../src/js/zebedee-api/_getPageResource.js
// ../src/js/zebedee-api/_getTeams.js
// ../src/js/zebedee-api/_getUserPermission.js
// ../src/js/zebedee-api/_getUsers.js
// ../src/js/zebedee-api/_moveContent.js
// ../src/js/zebedee-api/_postPassword.js
// ../src/js/zebedee-api/_postPermission.js
// ../src/js/zebedee-api/_putContent.js
// ../src/manifest.json
// ../src/package.json
// ../src/scss/components/_accordion.scss
// ../src/scss/components/_builder.scss
// ../src/scss/components/_icons.scss
// ../src/scss/components/_markdown-editor.scss
// ../src/scss/components/_network-status.scss
// ../src/scss/components/_page.scss
// ../src/scss/components/_slider.scss
// ../src/scss/elements/_buttons.scss
// ../src/scss/elements/_forms.scss
// ../src/scss/elements/_inputs.scss
// ../src/scss/elements/_nav.scss
// ../src/scss/elements/_tables.scss
// ../src/scss/elements/_typography.scss
// ../src/scss/main.scss
// ../src/scss/partials/_base.scss
// ../src/scss/partials/_collections.scss
// ../src/scss/partials/_colour-palette.scss
// ../src/scss/partials/_elements.scss
// ../src/scss/partials/_fonts.scss
// ../src/scss/partials/_jqui.scss
// ../src/scss/partials/_publish.scss
// ../src/scss/partials/_reset.scss
// ../src/scss/partials/_shame.scss
// ../src/scss/partials/_utilities.scss
// ../src/scss/partials/_workspace.scss
// ../src/scss/utilities/_display.scss
// ../src/scss/utilities/_grid.scss
// ../src/scss/utilities/_margin.scss
// ../src/scss/utilities/_mixins.scss
// ../src/scss/utilities/_padding.scss
// ../src/scss/utilities/_panels.scss
// ../src/scss/utilities/_utilities.scss
// ../src/service-worker.js
// ../src/spec/classes/FlorenceSpec.js
// ../src/spec/classes/PathUtilsSpec.js
// ../src/spec/classes/StringUtilsSpec.js
// ../src/spec/support/jasmine.json
// ../src/templates/blockModal.handlebars
// ../src/templates/blockNewsModal.handlebars
// ../src/templates/browseNode.handlebars
// ../src/templates/browseNodeDataVis.handlebars
// ../src/templates/changePassword.handlebars
// ../src/templates/chartBuilder.handlebars
// ../src/templates/chartEditBarChartExtras.handlebars
// ../src/templates/chartEditBarlineExtras.handlebars
// ../src/templates/chartEditDualAxisExtras.handlebars
// ../src/templates/chartEditLineChartExtras.handlebars
// ../src/templates/childDeletes.handlebars
// ../src/templates/collectionDetails.handlebars
// ../src/templates/collectionEdit.handlebars
// ../src/templates/collectionList.handlebars
// ../src/templates/editNav.handlebars
// ../src/templates/editNavChild.handlebars
// ../src/templates/editorAlert.handlebars
// ../src/templates/editorCompendiumDatasetFiles.handlebars
// ../src/templates/editorContent.handlebars
// ../src/templates/editorContentNoTitle.handlebars
// ../src/templates/editorContentOne.handlebars
// ../src/templates/editorCorrection.handlebars
// ../src/templates/editorDate.handlebars
// ../src/templates/editorDocWithFiles.handlebars
// ../src/templates/editorDownloads.handlebars
// ../src/templates/editorDownloadsWithSummary.handlebars
// ../src/templates/editorLinks.handlebars
// ../src/templates/editorRelated.handlebars
// ../src/templates/editorServiceMessage.handlebars
// ../src/templates/editorT1Blocks.handlebars
// ../src/templates/editorTopics.handlebars
// ../src/templates/embedIframe.handlebars
// ../src/templates/equationBuilder.handlebars
// ../src/templates/florence.handlebars
// ../src/templates/iframeNav.handlebars
// ../src/templates/imageBuilder.handlebars
// ../src/templates/linkExternalModal.handlebars
// ../src/templates/linkModal.handlebars
// ../src/templates/loadingAnimation.handlebars
// ../src/templates/login.handlebars
// ../src/templates/mainNav.handlebars
// ../src/templates/markdownEditor.handlebars
// ../src/templates/markdownEditorNoTitle.handlebars
// ../src/templates/publishDetails.handlebars
// ../src/templates/publishList.handlebars
// ../src/templates/relatedModal.handlebars
// ../src/templates/releaseSelector.handlebars
// ../src/templates/reportList.handlebars
// ../src/templates/reportPublishedDetails.handlebars
// ../src/templates/reportUnpublishedDetails.handlebars
// ../src/templates/selectorHour.handlebars
// ../src/templates/selectorMinute.handlebars
// ../src/templates/tableBuilder.handlebars
// ../src/templates/teamDetails.handlebars
// ../src/templates/teamEdit.handlebars
// ../src/templates/teamList.handlebars
// ../src/templates/tickAnimation.handlebars
// ../src/templates/uploadFileForm.handlebars
// ../src/templates/userDetails.handlebars
// ../src/templates/userList.handlebars
// ../src/templates/workBrowse.handlebars
// ../src/templates/workCreate.handlebars
// ../src/templates/workEditCharts.handlebars
// ../src/templates/workEditEquations.handlebars
// ../src/templates/workEditImages.handlebars
// ../src/templates/workEditT1.handlebars
// ../src/templates/workEditT16.handlebars
// ../src/templates/workEditT1Census.handlebars
// ../src/templates/workEditT1Sections.handlebars
// ../src/templates/workEditT2.handlebars
// ../src/templates/workEditT3.handlebars
// ../src/templates/workEditT4Article.handlebars
// ../src/templates/workEditT4ArticleDownload.handlebars
// ../src/templates/workEditT4Bulletin.handlebars
// ../src/templates/workEditT4Compendium.handlebars
// ../src/templates/workEditT4Methodology.handlebars
// ../src/templates/workEditT5.handlebars
// ../src/templates/workEditT6.handlebars
// ../src/templates/workEditT6Chapter.handlebars
// ../src/templates/workEditT6Dataset.handlebars
// ../src/templates/workEditT7.handlebars
// ../src/templates/workEditT7Landing.handlebars
// ../src/templates/workEditT7StaticArticle.handlebars
// ../src/templates/workEditT8.handlebars
// ../src/templates/workEditT8Compendium.handlebars
// ../src/templates/workEditT8CorrectionList.handlebars
// ../src/templates/workEditT8LandingDatasetList.handlebars
// ../src/templates/workEditT8LandingPage.handlebars
// ../src/templates/workEditT8VersionList.handlebars
// ../src/templates/workEditTables.handlebars
// ../src/templates/workEditVisualisation.handlebars
// ../src/templates/workImport.handlebars
// ../src/templates/workSpace.handlebars
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// SrcDs_store reads file data from disk. It returns an error on failure.
func SrcDs_store() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/.DS_Store"
	name := "../src/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsCssMainMinCss reads file data from disk. It returns an error on failure.
func SrcAssetsCssMainMinCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/css/main.min.css"
	name := "../src/assets/css/main.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsCssMainMinCssMap reads file data from disk. It returns an error on failure.
func SrcAssetsCssMainMinCssMap() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/css/main.min.css.map"
	name := "../src/assets/css/main.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsJsJqueryMinJs reads file data from disk. It returns an error on failure.
func SrcAssetsJsJqueryMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/js/jquery.min.js"
	name := "../src/assets/js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsJsMainJs reads file data from disk. It returns an error on failure.
func SrcAssetsJsMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/js/main.js"
	name := "../src/assets/js/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsJsTemplatesJs reads file data from disk. It returns an error on failure.
func SrcAssetsJsTemplatesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/js/templates.js"
	name := "../src/assets/js/templates.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsVersionJson reads file data from disk. It returns an error on failure.
func SrcAssetsVersionJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/version.json"
	name := "../src/assets/version.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssFlorenceCss reads file data from disk. It returns an error on failure.
func SrcCssFlorenceCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/florence.css"
	name := "../src/css/florence.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssRapidPrototypeMainCss reads file data from disk. It returns an error on failure.
func SrcCssRapidPrototypeMainCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/rapid-prototype-main.css"
	name := "../src/css/rapid-prototype-main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyC3Css reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyC3Css() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/c3.css"
	name := "../src/css/third-party/c3.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyJqueryUiThemeMinCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyJqueryUiThemeMinCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/jquery-ui.theme.min.css"
	name := "../src/css/third-party/jquery-ui.theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyJqueryTagitCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyJqueryTagitCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/jquery.tagit.css"
	name := "../src/css/third-party/jquery.tagit.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyPagedownCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyPagedownCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/pagedown.css"
	name := "../src/css/third-party/pagedown.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyResponsiveTablesCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyResponsiveTablesCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/responsive-tables.css"
	name := "../src/css/third-party/responsive-tables.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartySweetalertCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartySweetalertCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/sweetalert.css"
	name := "../src/css/third-party/sweetalert.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyTagitUiZendeskCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyTagitUiZendeskCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/tagit.ui-zendesk.css"
	name := "../src/css/third-party/tagit.ui-zendesk.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFlorenceHtml reads file data from disk. It returns an error on failure.
func SrcFlorenceHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/florence.html"
	name := "../src/florence.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansLicenseTxt reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansLicenseTxt() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/LICENSE.txt"
	name := "../src/font/Open_Sans/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.eot"
	name := "../src/font/Open_Sans/OpenSans-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.svg"
	name := "../src/font/Open_Sans/OpenSans-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.ttf"
	name := "../src/font/Open_Sans/OpenSans-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.woff"
	name := "../src/font/Open_Sans/OpenSans-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.woff2"
	name := "../src/font/Open_Sans/OpenSans-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.eot"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.svg"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.ttf"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.woff"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.eot"
	name := "../src/font/Open_Sans/OpenSans-Italic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.svg"
	name := "../src/font/Open_Sans/OpenSans-Italic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.ttf"
	name := "../src/font/Open_Sans/OpenSans-Italic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.woff"
	name := "../src/font/Open_Sans/OpenSans-Italic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.eot"
	name := "../src/font/Open_Sans/OpenSans-Light.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.svg"
	name := "../src/font/Open_Sans/OpenSans-Light.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.ttf"
	name := "../src/font/Open_Sans/OpenSans-Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.woff"
	name := "../src/font/Open_Sans/OpenSans-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.woff2"
	name := "../src/font/Open_Sans/OpenSans-Light.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.eot"
	name := "../src/font/Open_Sans/OpenSans-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.svg"
	name := "../src/font/Open_Sans/OpenSans-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.ttf"
	name := "../src/font/Open_Sans/OpenSans-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.woff"
	name := "../src/font/Open_Sans/OpenSans-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.woff2"
	name := "../src/font/Open_Sans/OpenSans-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.eot"
	name := "../src/font/Open_Sans/OpenSans-Semibold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.svg"
	name := "../src/font/Open_Sans/OpenSans-Semibold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.ttf"
	name := "../src/font/Open_Sans/OpenSans-Semibold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.woff"
	name := "../src/font/Open_Sans/OpenSans-Semibold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.woff2"
	name := "../src/font/Open_Sans/OpenSans-Semibold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabLicenseTxt reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabLicenseTxt() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/LICENSE.txt"
	name := "../src/font/Roboto_Slab/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.woff2"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularWoff2 reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.woff2"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinWoff2 reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.woff2"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUflTxt reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUflTxt() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UFL.txt"
	name := "../src/font/Ubuntu_Mono/UFL.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularWoff2 reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceEot reads file data from disk. It returns an error on failure.
func SrcFontFlorenceEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.eot"
	name := "../src/font/florence.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceSvg reads file data from disk. It returns an error on failure.
func SrcFontFlorenceSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.svg"
	name := "../src/font/florence.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceTtf reads file data from disk. It returns an error on failure.
func SrcFontFlorenceTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.ttf"
	name := "../src/font/florence.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceWoff reads file data from disk. It returns an error on failure.
func SrcFontFlorenceWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.woff"
	name := "../src/font/florence.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesJqueryUiMinJs reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesJqueryUiMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/jquery-ui.min.js"
	name := "../src/html templates/jquery-ui.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesPagedownCss reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesPagedownCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/pagedown.css"
	name := "../src/html templates/pagedown.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesPublishManualHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesPublishManualHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/publish-manual.html"
	name := "../src/html templates/publish-manual.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesPublishScheduledHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesPublishScheduledHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/publish-scheduled.html"
	name := "../src/html templates/publish-scheduled.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesUiFunctionsJs reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesUiFunctionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/ui-functions.js"
	name := "../src/html templates/ui-functions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesWorkspaceBrowseHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesWorkspaceBrowseHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/workspace-browse.html"
	name := "../src/html templates/workspace-browse.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesWorkspaceCreateHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesWorkspaceCreateHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/workspace-create.html"
	name := "../src/html templates/workspace-create.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesWorkspaceEditHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesWorkspaceEditHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/workspace-edit.html"
	name := "../src/html templates/workspace-edit.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon11Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon11Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon11.ico"
	name := "../src/img/favicon11.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon12Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon12Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon12.ico"
	name := "../src/img/favicon12.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon21Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon21Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon21.ico"
	name := "../src/img/favicon21.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon22Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon22Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon22.ico"
	name := "../src/img/favicon22.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon23Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon23Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon23.ico"
	name := "../src/img/favicon23.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon24Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon24Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon24.ico"
	name := "../src/img/favicon24.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFloLogoPng reads file data from disk. It returns an error on failure.
func SrcImgFloLogoPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/flo-logo.png"
	name := "../src/img/flo-logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFloLogo144Png reads file data from disk. It returns an error on failure.
func SrcImgFloLogo144Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/flo-logo144.png"
	name := "../src/img/flo-logo144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgRule21Png reads file data from disk. It returns an error on failure.
func SrcImgRule21Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/rule-21.png"
	name := "../src/img/rule-21.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgRule22Png reads file data from disk. It returns an error on failure.
func SrcImgRule22Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/rule-22.png"
	name := "../src/img/rule-22.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgRulePng reads file data from disk. It returns an error on failure.
func SrcImgRulePng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/rule.png"
	name := "../src/img/rule.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgSb_v_double_arrowPng reads file data from disk. It returns an error on failure.
func SrcImgSb_v_double_arrowPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/sb_v_double_arrow.png"
	name := "../src/img/sb_v_double_arrow.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgSemiTransparentBgPng reads file data from disk. It returns an error on failure.
func SrcImgSemiTransparentBgPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/semi-transparent-bg.png"
	name := "../src/img/semi-transparent-bg.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgSpritePng reads file data from disk. It returns an error on failure.
func SrcImgSpritePng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/sprite.png"
	name := "../src/img/sprite.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_diagonalsThick_18_b81900_40x40Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_diagonalsThick_18_b81900_40x40Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	name := "../src/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_diagonalsThick_20_666666_40x40Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_diagonalsThick_20_666666_40x40Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	name := "../src/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_flat_10_000000_40x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_flat_10_000000_40x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_flat_10_000000_40x100.png"
	name := "../src/img/ui-bg_flat_10_000000_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glass_100_f6f6f6_1x400Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glass_100_f6f6f6_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_glass_100_f6f6f6_1x400.png"
	name := "../src/img/ui-bg_glass_100_f6f6f6_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glass_100_fdf5ce_1x400Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glass_100_fdf5ce_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_glass_100_fdf5ce_1x400.png"
	name := "../src/img/ui-bg_glass_100_fdf5ce_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glass_65_ffffff_1x400Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glass_65_ffffff_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_glass_65_ffffff_1x400.png"
	name := "../src/img/ui-bg_glass_65_ffffff_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glossWave_35_f6a828_500x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glossWave_35_f6a828_500x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	name := "../src/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	name := "../src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	name := "../src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_222222_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_222222_256x240.png"
	name := "../src/img/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_228ef1_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_228ef1_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_228ef1_256x240.png"
	name := "../src/img/ui-icons_228ef1_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_ef8c08_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_ef8c08_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_ef8c08_256x240.png"
	name := "../src/img/ui-icons_ef8c08_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_ffd27a_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_ffd27a_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_ffd27a_256x240.png"
	name := "../src/img/ui-icons_ffd27a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_ffffff_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_ffffff_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_ffffff_256x240.png"
	name := "../src/img/ui-icons_ffffff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgWmdButtonsPng reads file data from disk. It returns an error on failure.
func SrcImgWmdButtonsPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/wmd-buttons.png"
	name := "../src/img/wmd-buttons.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcIndexHtml reads file data from disk. It returns an error on failure.
func SrcIndexHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/index.html"
	name := "../src/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesCookieutilsJs reads file data from disk. It returns an error on failure.
func SrcJsClassesCookieutilsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/cookieUtils.js"
	name := "../src/js/classes/cookieUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesFlorenceJs reads file data from disk. It returns an error on failure.
func SrcJsClassesFlorenceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/florence.js"
	name := "../src/js/classes/florence.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesPathutilsJs reads file data from disk. It returns an error on failure.
func SrcJsClassesPathutilsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/pathUtils.js"
	name := "../src/js/classes/pathUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesStringutilsJs reads file data from disk. It returns an error on failure.
func SrcJsClassesStringutilsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/stringUtils.js"
	name := "../src/js/classes/stringUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_accordionJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_accordionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_accordion.js"
	name := "../src/js/components/_accordion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_fileinputJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_fileinputJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_fileInput.js"
	name := "../src/js/components/_fileInput.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_hidepanelJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_hidepanelJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_hidePanel.js"
	name := "../src/js/components/_hidePanel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_showpanelJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_showpanelJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_showPanel.js"
	name := "../src/js/components/_showPanel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_contentdeletemarkerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_contentdeletemarkerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_ContentDeleteMarker.js"
	name := "../src/js/functions/_ContentDeleteMarker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions__initJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions__initJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/__init.js"
	name := "../src/js/functions/__init.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_accordionsettingsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_accordionsettingsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_accordionSettings.js"
	name := "../src/js/functions/_accordionSettings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_autosizeJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_autosizeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_autoSize.js"
	name := "../src/js/functions/_autoSize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkforpagechangedJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkforpagechangedJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkForPageChanged.js"
	name := "../src/js/functions/_checkForPageChanged.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkpathparsedJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkpathparsedJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkPathParsed.js"
	name := "../src/js/functions/_checkPathParsed.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkpathslashesJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkpathslashesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkPathSlashes.js"
	name := "../src/js/functions/_checkPathSlashes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkrenameuriJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkrenameuriJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkRenameUri.js"
	name := "../src/js/functions/_checkRenameUri.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_collectionhelpersJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_collectionhelpersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_collectionHelpers.js"
	name := "../src/js/functions/_collectionHelpers.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_copypathJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_copypathJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_copyPath.js"
	name := "../src/js/functions/_copyPath.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_createcollectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_createcollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_createCollection.js"
	name := "../src/js/functions/_createCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_createworkspaceJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_createworkspaceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_createWorkspace.js"
	name := "../src/js/functions/_createWorkspace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_deleteteamJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_deleteteamJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_deleteTeam.js"
	name := "../src/js/functions/_deleteTeam.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_deleteunpublishedversionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_deleteunpublishedversionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_deleteUnpublishedVersion.js"
	name := "../src/js/functions/_deleteUnpublishedVersion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_deleteuserJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_deleteuserJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_deleteUser.js"
	name := "../src/js/functions/_deleteUser.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editadddatasetJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editadddatasetJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAddDataset.js"
	name := "../src/js/functions/_editAddDataset.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editaddfileJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editaddfileJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAddFile.js"
	name := "../src/js/functions/_editAddFile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editaddfilewithdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editaddfilewithdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAddFileWithDetails.js"
	name := "../src/js/functions/_editAddFileWithDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editalertJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editalertJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAlert.js"
	name := "../src/js/functions/_editAlert.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editblocksJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editblocksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editBlocks.js"
	name := "../src/js/functions/_editBlocks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editcollectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editcollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editCollection.js"
	name := "../src/js/functions/_editCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdatasetversionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdatasetversionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDatasetVersion.js"
	name := "../src/js/functions/_editDatasetVersion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdateJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDate.js"
	name := "../src/js/functions/_editDate.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdocwithfilescorrectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdocwithfilescorrectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDocWithFilesCorrection.js"
	name := "../src/js/functions/_editDocWithFilesCorrection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdocumentcorrectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdocumentcorrectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDocumentCorrection.js"
	name := "../src/js/functions/_editDocumentCorrection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editintlinksJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editintlinksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editIntLinks.js"
	name := "../src/js/functions/_editIntLinks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editmarkdownoneobjectJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editmarkdownoneobjectJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editMarkdownOneObject.js"
	name := "../src/js/functions/_editMarkdownOneObject.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editmarkdownwithnotitleJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editmarkdownwithnotitleJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editMarkdownWithNoTitle.js"
	name := "../src/js/functions/_editMarkdownWithNoTitle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editservicemessageJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editservicemessageJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editServiceMessage.js"
	name := "../src/js/functions/_editServiceMessage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_edittopicsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_edittopicsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editTopics.js"
	name := "../src/js/functions/_editTopics.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_environmentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_environmentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_environment.js"
	name := "../src/js/functions/_environment.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_externallinkaccordionsectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_externallinkaccordionsectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_externalLinkAccordionSection.js"
	name := "../src/js/functions/_externalLinkAccordionSection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_filedeleteJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_filedeleteJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_fileDelete.js"
	name := "../src/js/functions/_fileDelete.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_fileuploadJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_fileuploadJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_fileUpload.js"
	name := "../src/js/functions/_fileUpload.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getlastpositionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getlastpositionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getLastPosition.js"
	name := "../src/js/functions/_getLastPosition.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getnetworkstatusJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getnetworkstatusJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getNetworkStatus.js"
	name := "../src/js/functions/_getNetworkStatus.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getparentpageJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getparentpageJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getParentPage.js"
	name := "../src/js/functions/_getParentPage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getpathnametrimlastJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getpathnametrimlastJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getPathNameTrimLast.js"
	name := "../src/js/functions/_getPathNameTrimLast.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getpreviewurlJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getpreviewurlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getPreviewUrl.js"
	name := "../src/js/functions/_getPreviewUrl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_handleapierrorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_handleapierrorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_handleApiError.js"
	name := "../src/js/functions/_handleApiError.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_initialisenotemarkdownJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_initialisenotemarkdownJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_initialiseNoteMarkdown.js"
	name := "../src/js/functions/_initialiseNoteMarkdown.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_inputvalidationJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_inputvalidationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_inputValidation.js"
	name := "../src/js/functions/_inputValidation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadbrowsescreenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadbrowsescreenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadBrowseScreen.js"
	name := "../src/js/functions/_loadBrowseScreen.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadchartbuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadchartbuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadChartBuilder.js"
	name := "../src/js/functions/_loadChartBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadchartslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadchartslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadChartsList.js"
	name := "../src/js/functions/_loadChartsList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadcreatescreenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadcreatescreenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadCreateScreen.js"
	name := "../src/js/functions/_loadCreateScreen.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadcreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadcreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadCreator.js"
	name := "../src/js/functions/_loadCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadcreatordatepickerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadcreatordatepickerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadCreatorDatepicker.js"
	name := "../src/js/functions/_loadCreatorDatepicker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadembediframeJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadembediframeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadEmbedIframe.js"
	name := "../src/js/functions/_loadEmbedIframe.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadequationbuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadequationbuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadEquationBuilder.js"
	name := "../src/js/functions/_loadEquationBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadequationslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadequationslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadEquationsList.js"
	name := "../src/js/functions/_loadEquationsList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadimagebuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadimagebuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadImageBuilder.js"
	name := "../src/js/functions/_loadImageBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadimageslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadimageslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadImagesList.js"
	name := "../src/js/functions/_loadImagesList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadimportscreenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadimportscreenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadImportScreen.js"
	name := "../src/js/functions/_loadImportScreen.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadmarkdowneditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadmarkdowneditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadMarkdownEditor.js"
	name := "../src/js/functions/_loadMarkdownEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadpagedataintoeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadpagedataintoeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadPageDataIntoEditor.js"
	name := "../src/js/functions/_loadPageDataIntoEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadparentlinkJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadparentlinkJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadParentLink.js"
	name := "../src/js/functions/_loadParentLink.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt16creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt16creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT16Creator.js"
	name := "../src/js/functions/_loadT16Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt4creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt4creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT4Creator.js"
	name := "../src/js/functions/_loadT4Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt6creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt6creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT6Creator.js"
	name := "../src/js/functions/_loadT6Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt7creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt7creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT7Creator.js"
	name := "../src/js/functions/_loadT7Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt8datasetcreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt8datasetcreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT8DatasetCreator.js"
	name := "../src/js/functions/_loadT8DatasetCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt8landingcreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt8landingcreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT8LandingCreator.js"
	name := "../src/js/functions/_loadT8LandingCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadtablebuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadtablebuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadTableBuilder.js"
	name := "../src/js/functions/_loadTableBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadtableslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadtableslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadTablesList.js"
	name := "../src/js/functions/_loadTablesList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadviscreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadviscreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadVisCreator.js"
	name := "../src/js/functions/_loadVisCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_logoutJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_logoutJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_logout.js"
	name := "../src/js/functions/_logout.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_makeurlJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_makeurlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_makeUrl.js"
	name := "../src/js/functions/_makeUrl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_markdowncontentaccordionsectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_markdowncontentaccordionsectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_markdownContentAccordionSection.js"
	name := "../src/js/functions/_markdownContentAccordionSection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_markdownsetlinesJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_markdownsetlinesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_markdownSetLines.js"
	name := "../src/js/functions/_markdownSetLines.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_menuselectsettingsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_menuselectsettingsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_menuSelectSettings.js"
	name := "../src/js/functions/_menuSelectSettings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_movebrowsenodeJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_movebrowsenodeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_moveBrowseNode.js"
	name := "../src/js/functions/_moveBrowseNode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_parseurlJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_parseurlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_parseUrl.js"
	name := "../src/js/functions/_parseUrl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postapprovecollectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postapprovecollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postApproveCollection.js"
	name := "../src/js/functions/_postApproveCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postcompleteJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postcompleteJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postComplete.js"
	name := "../src/js/functions/_postComplete.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postcontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postcontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postContent.js"
	name := "../src/js/functions/_postContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postloginJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postloginJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postLogin.js"
	name := "../src/js/functions/_postLogin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postreviewJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postreviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postReview.js"
	name := "../src/js/functions/_postReview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postteamJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postteamJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postTeam.js"
	name := "../src/js/functions/_postTeam.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postuserJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postuserJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postUser.js"
	name := "../src/js/functions/_postUser.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_publishJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_publishJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_publish.js"
	name := "../src/js/functions/_publish.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_refreshpreviewJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_refreshpreviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_refreshPreview.js"
	name := "../src/js/functions/_refreshPreview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_relateditemaccordionsectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_relateditemaccordionsectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_relatedItemAccordionSection.js"
	name := "../src/js/functions/_relatedItemAccordionSection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_renamechildrenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_renamechildrenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_renameChildren.js"
	name := "../src/js/functions/_renameChildren.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_renamecontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_renamecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_renameContent.js"
	name := "../src/js/functions/_renameContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_renderaccordionsectionsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_renderaccordionsectionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_renderAccordionSections.js"
	name := "../src/js/functions/_renderAccordionSections.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_resetJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_resetJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_reset.js"
	name := "../src/js/functions/_reset.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_savecontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_savecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_saveContent.js"
	name := "../src/js/functions/_saveContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_savenewcorrectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_savenewcorrectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_saveNewCorrection.js"
	name := "../src/js/functions/_saveNewCorrection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_setshortcutsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_setshortcutsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_setShortcuts.js"
	name := "../src/js/functions/_setShortcuts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_setupflorenceJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_setupflorenceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_setupFlorence.js"
	name := "../src/js/functions/_setupFlorence.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t16releaseeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t16releaseeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t16ReleaseEditor.js"
	name := "../src/js/functions/_t16ReleaseEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t1editorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t1editorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t1Editor.js"
	name := "../src/js/functions/_t1Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t1editorcensusJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t1editorcensusJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t1EditorCensus.js"
	name := "../src/js/functions/_t1EditorCensus.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t2editorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t2editorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t2Editor.js"
	name := "../src/js/functions/_t2Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t3editorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t3editorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t3Editor.js"
	name := "../src/js/functions/_t3Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t4articledownloadeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t4articledownloadeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t4ArticleDownloadEditor.js"
	name := "../src/js/functions/_t4ArticleDownloadEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t4articleeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t4articleeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t4ArticleEditor.js"
	name := "../src/js/functions/_t4ArticleEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t4bulletineditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t4bulletineditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t4BulletinEditor.js"
	name := "../src/js/functions/_t4BulletinEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t5timeserieseditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t5timeserieseditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t5TimeseriesEditor.js"
	name := "../src/js/functions/_t5TimeseriesEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t6compendiumchaptereditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t6compendiumchaptereditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t6CompendiumChapterEditor.js"
	name := "../src/js/functions/_t6CompendiumChapterEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t6compendiumdataeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t6compendiumdataeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t6CompendiumDataEditor.js"
	name := "../src/js/functions/_t6CompendiumDataEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t6compendiumeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t6compendiumeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t6CompendiumEditor.js"
	name := "../src/js/functions/_t6CompendiumEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7adhoceditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7adhoceditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7AdHocEditor.js"
	name := "../src/js/functions/_t7AdHocEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7foieditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7foieditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7FoiEditor.js"
	name := "../src/js/functions/_t7FoiEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7methodologydownloadeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7methodologydownloadeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7MethodologyDownloadEditor.js"
	name := "../src/js/functions/_t7MethodologyDownloadEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7methodologyeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7methodologyeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7MethodologyEditor.js"
	name := "../src/js/functions/_t7MethodologyEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7qmieditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7qmieditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7QmiEditor.js"
	name := "../src/js/functions/_t7QmiEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7staticarticleeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7staticarticleeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7StaticArticleEditor.js"
	name := "../src/js/functions/_t7StaticArticleEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7staticlandingpageeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7staticlandingpageeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7StaticLandingPageEditor.js"
	name := "../src/js/functions/_t7StaticLandingPageEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7staticpageeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7staticpageeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7StaticPageEditor.js"
	name := "../src/js/functions/_t7StaticPageEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t8dataseteditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t8dataseteditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t8DatasetEditor.js"
	name := "../src/js/functions/_t8DatasetEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t8landingpageeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t8landingpageeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t8LandingPageEditor.js"
	name := "../src/js/functions/_t8LandingPageEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_transferJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_transferJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_transfer.js"
	name := "../src/js/functions/_transfer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_treenodeselectJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_treenodeselectJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_treeNodeSelect.js"
	name := "../src/js/functions/_treeNodeSelect.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_uiJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_uiJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_ui.js"
	name := "../src/js/functions/_ui.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_uitidyupJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_uitidyupJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_uiTidyup.js"
	name := "../src/js/functions/_uiTidyup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_updatecontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_updatecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_updateContent.js"
	name := "../src/js/functions/_updateContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewchangepasswordJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewchangepasswordJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewChangePassword.js"
	name := "../src/js/functions/_viewChangePassword.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewcollectiondetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewcollectiondetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewCollectionDetails.js"
	name := "../src/js/functions/_viewCollectionDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewcollectionsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewcollectionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewCollections.js"
	name := "../src/js/functions/_viewCollections.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewcontrollerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewcontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewController.js"
	name := "../src/js/functions/_viewController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewloginJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewloginJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewLogIn.js"
	name := "../src/js/functions/_viewLogIn.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewpublishJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewpublishJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewPublish.js"
	name := "../src/js/functions/_viewPublish.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewpublishdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewpublishdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewPublishDetails.js"
	name := "../src/js/functions/_viewPublishDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewreleaseselectorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewreleaseselectorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewReleaseSelector.js"
	name := "../src/js/functions/_viewReleaseSelector.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewreportdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewreportdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewReportDetails.js"
	name := "../src/js/functions/_viewReportDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewreportsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewreportsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewReports.js"
	name := "../src/js/functions/_viewReports.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewteamdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewteamdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewTeamDetails.js"
	name := "../src/js/functions/_viewTeamDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewteamsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewteamsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewTeams.js"
	name := "../src/js/functions/_viewTeams.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewuserdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewuserdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewUserDetails.js"
	name := "../src/js/functions/_viewUserDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewusersJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewusersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewUsers.js"
	name := "../src/js/functions/_viewUsers.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewworkspaceJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewworkspaceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewWorkspace.js"
	name := "../src/js/functions/_viewWorkspace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_visualisationeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_visualisationeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_visualisationEditor.js"
	name := "../src/js/functions/_visualisationEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctionsRegisterserviceworkerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctionsRegisterserviceworkerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/registerServiceWorker.js"
	name := "../src/js/functions/registerServiceWorker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMarkdownConverterJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMarkdownConverterJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/Markdown.Converter.js"
	name := "../src/js/third-party/Markdown.Converter.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMarkdownEditorJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMarkdownEditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/Markdown.Editor.js"
	name := "../src/js/third-party/Markdown.Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMarkdownExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMarkdownExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/Markdown.Extra.js"
	name := "../src/js/third-party/Markdown.Extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMarkdownSanitizerJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMarkdownSanitizerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/Markdown.Sanitizer.js"
	name := "../src/js/third-party/Markdown.Sanitizer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyZeroclipboardMinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyZeroclipboardMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/ZeroClipboard.min.js"
	name := "../src/js/third-party/ZeroClipboard.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyZeroclipboardSwf reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyZeroclipboardSwf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/ZeroClipboard.swf"
	name := "../src/js/third-party/ZeroClipboard.swf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyAutosizeJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyAutosizeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/autosize.js"
	name := "../src/js/third-party/autosize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyClipboardMinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyClipboardMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/clipboard.min.js"
	name := "../src/js/third-party/clipboard.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyHandlebarsRuntimeMinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyHandlebarsRuntimeMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/handlebars.runtime.min.js"
	name := "../src/js/third-party/handlebars.runtime.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyHighchartsMoreJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyHighchartsMoreJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/highcharts-more.js"
	name := "../src/js/third-party/highcharts-more.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyHighchartsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyHighchartsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/highcharts.js"
	name := "../src/js/third-party/highcharts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyJqueryUiTimepickerAddonJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyJqueryUiTimepickerAddonJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/jquery-ui-timepicker-addon.js"
	name := "../src/js/third-party/jquery-ui-timepicker-addon.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyJqueryUiJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyJqueryUiJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/jquery-ui.js"
	name := "../src/js/third-party/jquery-ui.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyJqueryHotkeysJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyJqueryHotkeysJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/jquery.hotkeys.js"
	name := "../src/js/third-party/jquery.hotkeys.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxMathjaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxMathjaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/MathJax.js"
	name := "../src/js/third-party/mathjax/MathJax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAm_chtmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAm_chtmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/AM_CHTML-full.js"
	name := "../src/js/third-party/mathjax/config/AM_CHTML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAm_chtmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAm_chtmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/AM_CHTML.js"
	name := "../src/js/third-party/mathjax/config/AM_CHTML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAm_htmlormmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAm_htmlormmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/AM_HTMLorMML-full.js"
	name := "../src/js/third-party/mathjax/config/AM_HTMLorMML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAm_htmlormmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAm_htmlormmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/AM_HTMLorMML.js"
	name := "../src/js/third-party/mathjax/config/AM_HTMLorMML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAm_svgFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAm_svgFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/AM_SVG-full.js"
	name := "../src/js/third-party/mathjax/config/AM_SVG-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAm_svgJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAm_svgJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/AM_SVG.js"
	name := "../src/js/third-party/mathjax/config/AM_SVG.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAccessibleFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAccessibleFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/Accessible-full.js"
	name := "../src/js/third-party/mathjax/config/Accessible-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigAccessibleJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigAccessibleJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/Accessible.js"
	name := "../src/js/third-party/mathjax/config/Accessible.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigMml_chtmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigMml_chtmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/MML_CHTML-full.js"
	name := "../src/js/third-party/mathjax/config/MML_CHTML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigMml_chtmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigMml_chtmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/MML_CHTML.js"
	name := "../src/js/third-party/mathjax/config/MML_CHTML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigMml_htmlormmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigMml_htmlormmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/MML_HTMLorMML-full.js"
	name := "../src/js/third-party/mathjax/config/MML_HTMLorMML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigMml_htmlormmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigMml_htmlormmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/MML_HTMLorMML.js"
	name := "../src/js/third-party/mathjax/config/MML_HTMLorMML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigMml_svgFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigMml_svgFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/MML_SVG-full.js"
	name := "../src/js/third-party/mathjax/config/MML_SVG-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigMml_svgJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigMml_svgJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/MML_SVG.js"
	name := "../src/js/third-party/mathjax/config/MML_SVG.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigMmlorhtmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigMmlorhtmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/MMLorHTML.js"
	name := "../src/js/third-party/mathjax/config/MMLorHTML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigSafeJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigSafeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/Safe.js"
	name := "../src/js/third-party/mathjax/config/Safe.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAmsMml_svgFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAmsMml_svgFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS-MML_SVG-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS-MML_SVG-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAmsMml_svgJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAmsMml_svgJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS-MML_SVG.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS-MML_SVG.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAms_chtmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAms_chtmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS_CHTML-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS_CHTML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAms_chtmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAms_chtmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS_CHTML.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS_CHTML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAms_htmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAms_htmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS_HTML-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS_HTML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAms_htmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAms_htmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS_HTML.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS_HTML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAms_svgFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAms_svgFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS_SVG-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS_SVG-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexAms_svgJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexAms_svgJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-AMS_SVG.js"
	name := "../src/js/third-party/mathjax/config/TeX-AMS_SVG.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-MML-AM_CHTML-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-MML-AM_CHTML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-MML-AM_CHTML.js"
	name := "../src/js/third-party/mathjax/config/TeX-MML-AM_CHTML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML.js"
	name := "../src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexMmlAm_svgFullJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexMmlAm_svgFullJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-MML-AM_SVG-full.js"
	name := "../src/js/third-party/mathjax/config/TeX-MML-AM_SVG-full.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigTexMmlAm_svgJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigTexMmlAm_svgJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/TeX-MML-AM_SVG.js"
	name := "../src/js/third-party/mathjax/config/TeX-MML-AM_SVG.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigDefaultJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigDefaultJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/default.js"
	name := "../src/js/third-party/mathjax/config/default.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxConfigLocalLocalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxConfigLocalLocalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/config/local/local.js"
	name := "../src/js/third-party/mathjax/config/local/local.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsAssistivemmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsAssistivemmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/AssistiveMML.js"
	name := "../src/js/third-party/mathjax/extensions/AssistiveMML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsChtmlPreviewJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsChtmlPreviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/CHTML-preview.js"
	name := "../src/js/third-party/mathjax/extensions/CHTML-preview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/FontWarnings.js"
	name := "../src/js/third-party/mathjax/extensions/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsHtmlCssHandleFloatsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsHtmlCssHandleFloatsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/HTML-CSS/handle-floats.js"
	name := "../src/js/third-party/mathjax/extensions/HTML-CSS/handle-floats.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/HelpDialog.js"
	name := "../src/js/third-party/mathjax/extensions/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsMatchwebfontsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsMatchwebfontsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/MatchWebFonts.js"
	name := "../src/js/third-party/mathjax/extensions/MatchWebFonts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsMatheventsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsMatheventsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/MathEvents.js"
	name := "../src/js/third-party/mathjax/extensions/MathEvents.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsMathmlContentMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsMathmlContentMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/MathML/content-mathml.js"
	name := "../src/js/third-party/mathjax/extensions/MathML/content-mathml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsMathmlMml3Js reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsMathmlMml3Js() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/MathML/mml3.js"
	name := "../src/js/third-party/mathjax/extensions/MathML/mml3.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/MathMenu.js"
	name := "../src/js/third-party/mathjax/extensions/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsMathzoomJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsMathzoomJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/MathZoom.js"
	name := "../src/js/third-party/mathjax/extensions/MathZoom.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsSafeJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsSafeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/Safe.js"
	name := "../src/js/third-party/mathjax/extensions/Safe.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexAmscdJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexAmscdJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/AMScd.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/AMScd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexAmsmathJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexAmsmathJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/AMSmath.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/AMSmath.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexAmssymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexAmssymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/AMSsymbols.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/AMSsymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexHtmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexHtmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/HTML.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/HTML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexActionJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexActionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/action.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/action.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexAutoboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexAutoboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/autobold.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/autobold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexAutoloadAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexAutoloadAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/autoload-all.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/autoload-all.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexBboxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexBboxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/bbox.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/bbox.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexBegingroupJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexBegingroupJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/begingroup.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/begingroup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexBoldsymbolJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexBoldsymbolJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/boldsymbol.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/boldsymbol.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexCancelJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexCancelJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/cancel.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/cancel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexColorJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexColorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/color.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/color.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexEncloseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexEncloseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/enclose.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/enclose.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexExtpfeilJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexExtpfeilJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/extpfeil.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/extpfeil.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexMathchoiceJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexMathchoiceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/mathchoice.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/mathchoice.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexMediawikiTexvcJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexMediawikiTexvcJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/mediawiki-texvc.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/mediawiki-texvc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexMhchemJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexMhchemJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/mhchem.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/mhchem.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexNewcommandJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexNewcommandJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/newcommand.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/newcommand.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexNoerrorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexNoerrorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/noErrors.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/noErrors.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexNoundefinedJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexNoundefinedJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/noUndefined.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/noUndefined.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexUnicodeJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexUnicodeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/unicode.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/unicode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTexVerbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTexVerbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/TeX/verb.js"
	name := "../src/js/third-party/mathjax/extensions/TeX/verb.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsAsciimath2jaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsAsciimath2jaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/asciimath2jax.js"
	name := "../src/js/third-party/mathjax/extensions/asciimath2jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsFastPreviewJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsFastPreviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/fast-preview.js"
	name := "../src/js/third-party/mathjax/extensions/fast-preview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsJsmath2jaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsJsmath2jaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/jsMath2jax.js"
	name := "../src/js/third-party/mathjax/extensions/jsMath2jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsMml2jaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsMml2jaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/mml2jax.js"
	name := "../src/js/third-party/mathjax/extensions/mml2jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTex2jaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTex2jaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/tex2jax.js"
	name := "../src/js/third-party/mathjax/extensions/tex2jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxExtensionsTomathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxExtensionsTomathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/extensions/toMathML.js"
	name := "../src/js/third-party/mathjax/extensions/toMathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/jax.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableArrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableArrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/Arrows.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/Arrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiactforsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiactforsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/CombDiactForSymbols.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/CombDiactForSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableDingbatsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableDingbatsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/Dingbats.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/Dingbats.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsA.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsB.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscsymbolsandarrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscsymbolsandarrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/MiscSymbolsAndArrows.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/MiscSymbolsAndArrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableMisctechnicalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableMisctechnicalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/MiscTechnical.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/MiscTechnical.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsA.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsB.js"
	name := "../src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputAsciimathConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputAsciimathConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/AsciiMath/config.js"
	name := "../src/js/third-party/mathjax/jax/input/AsciiMath/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputAsciimathJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputAsciimathJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/AsciiMath/jax.js"
	name := "../src/js/third-party/mathjax/jax/input/AsciiMath/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/config.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesAJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesAJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/a.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/a.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesBJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesBJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/b.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/b.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesCJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesCJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/c.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/c.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesDJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesDJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/d.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/d.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesEJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesEJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/e.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/e.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/f.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/f.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFrJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFrJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/fr.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/fr.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesGJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesGJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/g.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/g.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesHJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesHJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/h.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/h.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesIJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesIJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/i.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/i.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesJJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesJJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/j.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/j.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesKJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesKJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/k.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/k.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesLJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesLJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/l.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/l.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesMJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesMJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/m.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/m.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesNJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesNJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/n.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/n.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/o.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/o.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOpfJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOpfJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/opf.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/opf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesPJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesPJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/p.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/p.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesQJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesQJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/q.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/q.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesRJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesRJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/r.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/r.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesSJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesSJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/s.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/s.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesScrJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesScrJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/scr.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/scr.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesTJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesTJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/t.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/t.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesUJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesUJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/u.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/u.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesVJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesVJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/v.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/v.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesWJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesWJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/w.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/w.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesXJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesXJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/x.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/x.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesYJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesYJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/y.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/y.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesZJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesZJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/entities/z.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/entities/z.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputMathmlJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputMathmlJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/MathML/jax.js"
	name := "../src/js/third-party/mathjax/jax/input/MathML/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputTexConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputTexConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/TeX/config.js"
	name := "../src/js/third-party/mathjax/jax/input/TeX/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxInputTexJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxInputTexJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/input/TeX/jax.js"
	name := "../src/js/third-party/mathjax/jax/input/TeX/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadAnnotationXmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadAnnotationXmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/annotation-xml.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/annotation-xml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMactionJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMactionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/maction.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/maction.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMencloseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMencloseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/menclose.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/menclose.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMglyphJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMglyphJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mglyph.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mglyph.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMmultiscriptsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMmultiscriptsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mmultiscripts.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mmultiscripts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/ms.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/ms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMtableJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMtableJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mtable.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mtable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMultilineJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMultilineJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/autoload/multiline.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/multiline.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/config.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexAmsRegularJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexAmsRegularJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/AMS-Regular.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/AMS-Regular.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexCaligraphicBoldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexCaligraphicBoldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Caligraphic-Bold.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Caligraphic-Bold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturBoldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturBoldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Bold.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Bold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturRegularJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturRegularJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Regular.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Regular.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMainBoldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMainBoldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Main-Bold.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Main-Bold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMathBolditalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMathBolditalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Math-BoldItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Math-BoldItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifBoldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifBoldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Bold.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Bold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifItalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifItalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Italic.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Italic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifRegularJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifRegularJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Regular.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Regular.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexScriptRegularJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexScriptRegularJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Script-Regular.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Script-Regular.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexTypewriterRegularJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexTypewriterRegularJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Typewriter-Regular.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Typewriter-Regular.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputCommonhtmlJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputCommonhtmlJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/CommonHTML/jax.js"
	name := "../src/js/third-party/mathjax/jax/output/CommonHTML/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadAnnotationXmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadAnnotationXmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/annotation-xml.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/annotation-xml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMactionJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMactionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/maction.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/maction.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMencloseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMencloseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/menclose.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/menclose.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMglyphJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMglyphJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mglyph.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mglyph.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMmultiscriptsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMmultiscriptsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mmultiscripts.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mmultiscripts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/ms.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/ms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMtableJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMtableJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mtable.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mtable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMultilineJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMultilineJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/multiline.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/multiline.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssBlankGif reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssBlankGif() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/blank.gif"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/blank.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/config.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize7RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize7RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size7/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size7/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldAlphapresentformsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldAlphapresentformsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/AlphaPresentForms.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/AlphaPresentForms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldArrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldArrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Arrows.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Arrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBbboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBbboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BBBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BBBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoldfrakturJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoldfrakturJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoldFraktur.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoldFraktur.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoxdrawingJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoxdrawingJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoxDrawing.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoxDrawing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiactforsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiactforsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiactForSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiactForSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldControlpicturesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldControlpicturesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/ControlPictures.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/ControlPictures.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCurrencysymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCurrencysymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CurrencySymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CurrencySymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCyrillicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCyrillicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Cyrillic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Cyrillic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldEnclosedalphanumJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldEnclosedalphanumJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/EnclosedAlphanum.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/EnclosedAlphanum.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekssboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekssboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekSSBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekSSBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldIpaextensionsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldIpaextensionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/IPAExtensions.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/IPAExtensions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedadditionalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedadditionalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedAdditional.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedAdditional.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendeddJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendeddJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedD.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedD.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathssboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathssboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathSSBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathSSBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMisctechnicalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMisctechnicalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscTechnical.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscTechnical.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldNumberformsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldNumberformsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/NumberForms.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/NumberForms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldPhoneticextensionsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldPhoneticextensionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/PhoneticExtensions.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/PhoneticExtensions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuperandsubscriptsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuperandsubscriptsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuperAndSubscripts.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuperAndSubscripts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicAlphapresentformsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicAlphapresentformsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/AlphaPresentForms.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/AlphaPresentForms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBoxdrawingJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBoxdrawingJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BoxDrawing.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BoxDrawing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCombdiactforsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCombdiactforsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CombDiactForSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CombDiactForSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicControlpicturesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicControlpicturesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/ControlPictures.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/ControlPictures.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCurrencysymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCurrencysymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CurrencySymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CurrencySymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCyrillicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCyrillicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Cyrillic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Cyrillic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicEnclosedalphanumJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicEnclosedalphanumJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/EnclosedAlphanum.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/EnclosedAlphanum.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekbolditalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekbolditalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekBoldItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekBoldItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekssbolditalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekssbolditalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekSSBoldItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekSSBoldItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicIpaextensionsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicIpaextensionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/IPAExtensions.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/IPAExtensions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedadditionalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedadditionalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedAdditional.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedAdditional.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathbolditalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathbolditalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathboldscriptJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathboldscriptJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldScript.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldScript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathssitalicboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathssitalicboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathSSItalicBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathSSItalicBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicAlphapresentformsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicAlphapresentformsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/AlphaPresentForms.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/AlphaPresentForms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicBoxdrawingJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicBoxdrawingJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/BoxDrawing.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/BoxDrawing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCombdiactforsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCombdiactforsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CombDiactForSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CombDiactForSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicControlpicturesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicControlpicturesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ControlPictures.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ControlPictures.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCurrencysymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCurrencysymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CurrencySymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CurrencySymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCyrillicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCyrillicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Cyrillic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Cyrillic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicEnclosedalphanumJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicEnclosedalphanumJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/EnclosedAlphanum.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/EnclosedAlphanum.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekitalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekitalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIpaextensionsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIpaextensionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/IPAExtensions.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/IPAExtensions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedadditionalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedadditionalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedAdditional.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedAdditional.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathitalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathitalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathssitalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathssitalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathSSItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathSSItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathscriptJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathscriptJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathScript.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathScript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIjJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIjJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ij.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ij.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularAlphapresentformsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularAlphapresentformsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/AlphaPresentForms.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/AlphaPresentForms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularArrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularArrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Arrows.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Arrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBbboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBbboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BBBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BBBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBlockelementsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBlockelementsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BlockElements.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BlockElements.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoldfrakturJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoldfrakturJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoldFraktur.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoldFraktur.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoxdrawingJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoxdrawingJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoxDrawing.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoxDrawing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCjkJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCjkJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CJK.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CJK.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiactforsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiactforsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiactForSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiactForSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularControlpicturesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularControlpicturesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ControlPictures.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ControlPictures.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCurrencysymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCurrencysymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CurrencySymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CurrencySymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCyrillicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCyrillicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Cyrillic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Cyrillic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularDingbatsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularDingbatsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Dingbats.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Dingbats.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularEnclosedalphanumJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularEnclosedalphanumJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/EnclosedAlphanum.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/EnclosedAlphanum.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularFrakturJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularFrakturJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Fraktur.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Fraktur.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekbolditalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekbolditalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBoldItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBoldItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekitalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekitalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssbolditalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssbolditalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBoldItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBoldItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularHiraganaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularHiraganaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Hiragana.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Hiragana.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIpaextensionsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIpaextensionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/IPAExtensions.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/IPAExtensions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedadditionalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedadditionalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedAdditional.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedAdditional.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendeddJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendeddJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedD.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedD.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathbolditalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathbolditalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldscriptJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldscriptJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldScript.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldScript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathitalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathitalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSS.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalicBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalicBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathscriptJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathscriptJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathScript.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathScript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathttJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathttJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathTT.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathTT.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsandarrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsandarrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbolsAndArrows.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbolsAndArrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMisctechnicalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMisctechnicalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscTechnical.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscTechnical.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularNumberformsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularNumberformsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/NumberForms.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/NumberForms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularPhoneticextensionsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularPhoneticextensionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/PhoneticExtensions.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/PhoneticExtensions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpecialsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpecialsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Specials.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Specials.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuperandsubscriptsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuperandsubscriptsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuperAndSubscripts.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuperAndSubscripts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIjJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIjJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ij.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ij.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldPrivateuseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldPrivateuseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/PrivateUse.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/PrivateUse.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicPrivateuseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicPrivateuseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/PrivateUse.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/PrivateUse.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicPrivateuseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicPrivateuseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/PrivateUse.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/PrivateUse.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularPrivateuseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularPrivateuseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/PrivateUse.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/PrivateUse.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularAllJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularAllJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/All.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/All.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdata10Js reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdata10Js() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-1.0.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-1.0.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataBetaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataBetaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-beta.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-beta.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularArrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularArrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Arrows.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Arrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBbboldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBbboldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BBBold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BBBold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBoxdrawingJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBoxdrawingJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BoxDrawing.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BoxDrawing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularDingbatsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularDingbatsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Dingbats.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Dingbats.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularEnclosedalphanumJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularEnclosedalphanumJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/EnclosedAlphanum.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/EnclosedAlphanum.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscmathsymbolsbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscmathsymbolsbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMisctechnicalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMisctechnicalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscTechnical.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscTechnical.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularPuaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularPuaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/PUA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/PUA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldPuaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldPuaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/PUA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/PUA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularPuaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularPuaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/PUA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/PUA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldArrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldArrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Arrows.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Arrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiactforsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiactforsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiactForSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiactForSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscmathsymbolsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscmathsymbolsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscMathSymbolsA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscMathSymbolsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMisctechnicalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMisctechnicalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscTechnical.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscTechnical.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSupplementalarrowsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSupplementalarrowsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SupplementalArrowsA.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SupplementalArrowsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinchromeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinchromeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinChrome/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinChrome/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularAmsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularAmsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/AMS.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/AMS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularBoldJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularBoldJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Bold.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Bold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssImagefontsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssImagefontsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/imageFonts.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/imageFonts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputHtmlCssJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputHtmlCssJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/HTML-CSS/jax.js"
	name := "../src/js/third-party/mathjax/jax/output/HTML-CSS/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputNativemmlConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputNativemmlConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/NativeMML/config.js"
	name := "../src/js/third-party/mathjax/jax/output/NativeMML/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputNativemmlJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputNativemmlJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/NativeMML/jax.js"
	name := "../src/js/third-party/mathjax/jax/output/NativeMML/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputPlainsourceConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputPlainsourceConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/PlainSource/config.js"
	name := "../src/js/third-party/mathjax/jax/output/PlainSource/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputPlainsourceJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputPlainsourceJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/PlainSource/jax.js"
	name := "../src/js/third-party/mathjax/jax/output/PlainSource/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/PreviewHTML/config.js"
	name := "../src/js/third-party/mathjax/jax/output/PreviewHTML/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/PreviewHTML/jax.js"
	name := "../src/js/third-party/mathjax/jax/output/PreviewHTML/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadAnnotationXmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadAnnotationXmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/annotation-xml.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/annotation-xml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMactionJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMactionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/maction.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/maction.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMencloseJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMencloseJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/menclose.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/menclose.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMglyphJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMglyphJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/mglyph.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/mglyph.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMmultiscriptsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMmultiscriptsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/mmultiscripts.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/mmultiscripts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/ms.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/ms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMtableJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMtableJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/mtable.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/mtable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMultilineJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMultilineJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/autoload/multiline.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/autoload/multiline.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgConfigJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/config.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize6RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize6RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size6/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size6/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize7RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize7RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size7/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size7/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNonunicodeRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNonunicodeRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/NonUnicode/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/NonUnicode/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNormalRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNormalRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Normal/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Normal/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMonospaceRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMonospaceRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Monospace/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Monospace/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize5RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize5RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size5/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size5/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularArrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularArrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Arrows.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Arrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularBoxdrawingJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularBoxdrawingJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/BoxDrawing.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/BoxDrawing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularDingbatsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularDingbatsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Dingbats.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Dingbats.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularEnclosedalphanumJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularEnclosedalphanumJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/EnclosedAlphanum.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/EnclosedAlphanum.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscmathsymbolsbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscmathsymbolsbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMisctechnicalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMisctechnicalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscTechnical.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscTechnical.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularPuaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularPuaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/PUA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/PUA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldPuaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldPuaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/PUA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/PUA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularPuaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularPuaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/PUA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/PUA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldArrowsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldArrowsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Arrows.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Arrows.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiactforsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiactforsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiactForSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiactForSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatin1supplementJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatin1supplementJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Latin1Supplement.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Latin1Supplement.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscmathsymbolsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscmathsymbolsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscMathSymbolsA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscMathSymbolsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMisctechnicalJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMisctechnicalJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscTechnical.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscTechnical.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSupplementalarrowsaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSupplementalarrowsaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SupplementalArrowsA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SupplementalArrowsA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGeneralpunctuationJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGeneralpunctuationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GeneralPunctuation.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GeneralPunctuation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGeometricshapesJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGeometricshapesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GeometricShapes.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GeometricShapes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGreekandcopticJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGreekandcopticJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GreekAndCoptic.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GreekAndCoptic.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedA.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedA.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedB.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedB.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLetterlikesymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLetterlikesymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LetterlikeSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LetterlikeSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMiscsymbolsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMiscsymbolsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MiscSymbols.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MiscSymbols.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSpacingmodlettersJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSpacingmodlettersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SpacingModLetters.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SpacingModLetters.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSuppmathoperatorsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSuppmathoperatorsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SuppMathOperators.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SuppMathOperators.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathBolditalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathBolditalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/BoldItalic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/BoldItalic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize1RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize1RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size1/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size1/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize2RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize2RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size2/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size2/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize3RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize3RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size3/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size3/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize4RegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize4RegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size4/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size4/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularBasiclatinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularBasiclatinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/BasicLatin.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/BasicLatin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularCombdiacritmarksJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularCombdiacritmarksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularMainJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Main.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularOtherJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularOtherJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Other.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Other.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataExtraJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataExtraJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata-extra.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata-extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxJaxOutputSvgJaxJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxJaxOutputSvgJaxJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/jax/output/SVG/jax.js"
	name := "../src/js/third-party/mathjax/jax/output/SVG/jax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationAstFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationAstFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ast/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/ast/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationAstHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationAstHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ast/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/ast/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationAstHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationAstHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ast/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/ast/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationAstMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationAstMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ast/MathML.js"
	name := "../src/js/third-party/mathjax/localization/ast/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationAstMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationAstMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ast/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/ast/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationAstTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationAstTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ast/TeX.js"
	name := "../src/js/third-party/mathjax/localization/ast/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationAstAstJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationAstAstJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ast/ast.js"
	name := "../src/js/third-party/mathjax/localization/ast/ast.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBccFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBccFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bcc/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/bcc/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBccHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBccHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bcc/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/bcc/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBccHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBccHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bcc/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/bcc/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBccMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBccMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bcc/MathML.js"
	name := "../src/js/third-party/mathjax/localization/bcc/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBccMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBccMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bcc/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/bcc/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBccTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBccTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bcc/TeX.js"
	name := "../src/js/third-party/mathjax/localization/bcc/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBccBccJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBccBccJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bcc/bcc.js"
	name := "../src/js/third-party/mathjax/localization/bcc/bcc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBgFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBgFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bg/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/bg/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBgHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBgHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bg/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/bg/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBgHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBgHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bg/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/bg/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBgMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBgMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bg/MathML.js"
	name := "../src/js/third-party/mathjax/localization/bg/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBgMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBgMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bg/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/bg/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBgTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBgTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bg/TeX.js"
	name := "../src/js/third-party/mathjax/localization/bg/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBgBgJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBgBgJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/bg/bg.js"
	name := "../src/js/third-party/mathjax/localization/bg/bg.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBrFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBrFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/br/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/br/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBrHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBrHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/br/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/br/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBrHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBrHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/br/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/br/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBrMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBrMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/br/MathML.js"
	name := "../src/js/third-party/mathjax/localization/br/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBrMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBrMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/br/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/br/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBrTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBrTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/br/TeX.js"
	name := "../src/js/third-party/mathjax/localization/br/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationBrBrJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationBrBrJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/br/br.js"
	name := "../src/js/third-party/mathjax/localization/br/br.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCaFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCaFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ca/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/ca/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCaHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCaHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ca/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/ca/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCaHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCaHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ca/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/ca/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCaMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCaMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ca/MathML.js"
	name := "../src/js/third-party/mathjax/localization/ca/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCaMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCaMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ca/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/ca/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCaTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCaTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ca/TeX.js"
	name := "../src/js/third-party/mathjax/localization/ca/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCaCaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCaCaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ca/ca.js"
	name := "../src/js/third-party/mathjax/localization/ca/ca.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCdoFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCdoFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cdo/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/cdo/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCdoHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCdoHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cdo/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/cdo/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCdoHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCdoHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cdo/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/cdo/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCdoMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCdoMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cdo/MathML.js"
	name := "../src/js/third-party/mathjax/localization/cdo/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCdoMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCdoMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cdo/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/cdo/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCdoTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCdoTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cdo/TeX.js"
	name := "../src/js/third-party/mathjax/localization/cdo/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCdoCdoJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCdoCdoJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cdo/cdo.js"
	name := "../src/js/third-party/mathjax/localization/cdo/cdo.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCeFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCeFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ce/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/ce/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCeHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCeHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ce/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/ce/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCeHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCeHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ce/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/ce/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCeMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCeMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ce/MathML.js"
	name := "../src/js/third-party/mathjax/localization/ce/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCeMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCeMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ce/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/ce/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCeTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCeTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ce/TeX.js"
	name := "../src/js/third-party/mathjax/localization/ce/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCeCeJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCeCeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ce/ce.js"
	name := "../src/js/third-party/mathjax/localization/ce/ce.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCsFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCsFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cs/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/cs/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCsHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCsHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cs/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/cs/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCsHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCsHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cs/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/cs/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCsMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCsMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cs/MathML.js"
	name := "../src/js/third-party/mathjax/localization/cs/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCsMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCsMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cs/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/cs/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCsTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCsTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cs/TeX.js"
	name := "../src/js/third-party/mathjax/localization/cs/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCsCsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCsCsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cs/cs.js"
	name := "../src/js/third-party/mathjax/localization/cs/cs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCyFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCyFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cy/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/cy/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCyHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCyHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cy/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/cy/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCyHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCyHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cy/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/cy/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCyMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCyMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cy/MathML.js"
	name := "../src/js/third-party/mathjax/localization/cy/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCyMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCyMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cy/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/cy/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCyTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCyTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cy/TeX.js"
	name := "../src/js/third-party/mathjax/localization/cy/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationCyCyJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationCyCyJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/cy/cy.js"
	name := "../src/js/third-party/mathjax/localization/cy/cy.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDaFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDaFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/da/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/da/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDaHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDaHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/da/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/da/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDaHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDaHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/da/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/da/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDaMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDaMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/da/MathML.js"
	name := "../src/js/third-party/mathjax/localization/da/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDaMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDaMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/da/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/da/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDaTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDaTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/da/TeX.js"
	name := "../src/js/third-party/mathjax/localization/da/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDaDaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDaDaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/da/da.js"
	name := "../src/js/third-party/mathjax/localization/da/da.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDeFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDeFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/de/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/de/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDeHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDeHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/de/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/de/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDeHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDeHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/de/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/de/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDeMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDeMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/de/MathML.js"
	name := "../src/js/third-party/mathjax/localization/de/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDeMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDeMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/de/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/de/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDeTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDeTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/de/TeX.js"
	name := "../src/js/third-party/mathjax/localization/de/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationDeDeJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationDeDeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/de/de.js"
	name := "../src/js/third-party/mathjax/localization/de/de.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEnFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEnFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/en/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/en/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEnHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEnHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/en/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/en/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEnHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEnHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/en/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/en/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEnMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEnMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/en/MathML.js"
	name := "../src/js/third-party/mathjax/localization/en/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEnMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEnMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/en/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/en/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEnTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEnTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/en/TeX.js"
	name := "../src/js/third-party/mathjax/localization/en/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEnEnJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEnEnJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/en/en.js"
	name := "../src/js/third-party/mathjax/localization/en/en.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEoFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEoFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/eo/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/eo/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEoHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEoHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/eo/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/eo/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEoHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEoHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/eo/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/eo/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEoMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEoMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/eo/MathML.js"
	name := "../src/js/third-party/mathjax/localization/eo/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEoMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEoMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/eo/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/eo/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEoTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEoTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/eo/TeX.js"
	name := "../src/js/third-party/mathjax/localization/eo/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEoEoJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEoEoJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/eo/eo.js"
	name := "../src/js/third-party/mathjax/localization/eo/eo.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEsFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEsFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/es/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/es/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEsHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEsHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/es/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/es/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEsHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEsHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/es/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/es/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEsMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEsMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/es/MathML.js"
	name := "../src/js/third-party/mathjax/localization/es/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEsMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEsMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/es/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/es/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEsTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEsTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/es/TeX.js"
	name := "../src/js/third-party/mathjax/localization/es/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationEsEsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationEsEsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/es/es.js"
	name := "../src/js/third-party/mathjax/localization/es/es.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFaFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFaFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fa/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/fa/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFaHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFaHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fa/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/fa/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFaHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFaHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fa/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/fa/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFaMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFaMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fa/MathML.js"
	name := "../src/js/third-party/mathjax/localization/fa/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFaMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFaMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fa/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/fa/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFaTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFaTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fa/TeX.js"
	name := "../src/js/third-party/mathjax/localization/fa/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFaFaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFaFaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fa/fa.js"
	name := "../src/js/third-party/mathjax/localization/fa/fa.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFiFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFiFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fi/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/fi/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFiHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFiHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fi/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/fi/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFiHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFiHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fi/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/fi/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFiMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFiMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fi/MathML.js"
	name := "../src/js/third-party/mathjax/localization/fi/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFiMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFiMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fi/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/fi/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFiTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFiTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fi/TeX.js"
	name := "../src/js/third-party/mathjax/localization/fi/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFiFiJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFiFiJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fi/fi.js"
	name := "../src/js/third-party/mathjax/localization/fi/fi.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFrFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFrFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fr/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/fr/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFrHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFrHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fr/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/fr/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFrHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFrHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fr/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/fr/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFrMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFrMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fr/MathML.js"
	name := "../src/js/third-party/mathjax/localization/fr/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFrMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFrMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fr/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/fr/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFrTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFrTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fr/TeX.js"
	name := "../src/js/third-party/mathjax/localization/fr/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationFrFrJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationFrFrJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/fr/fr.js"
	name := "../src/js/third-party/mathjax/localization/fr/fr.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationGlFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationGlFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/gl/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/gl/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationGlHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationGlHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/gl/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/gl/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationGlHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationGlHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/gl/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/gl/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationGlMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationGlMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/gl/MathML.js"
	name := "../src/js/third-party/mathjax/localization/gl/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationGlMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationGlMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/gl/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/gl/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationGlTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationGlTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/gl/TeX.js"
	name := "../src/js/third-party/mathjax/localization/gl/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationGlGlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationGlGlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/gl/gl.js"
	name := "../src/js/third-party/mathjax/localization/gl/gl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationHeFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationHeFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/he/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/he/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationHeHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationHeHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/he/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/he/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationHeHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationHeHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/he/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/he/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationHeMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationHeMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/he/MathML.js"
	name := "../src/js/third-party/mathjax/localization/he/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationHeMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationHeMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/he/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/he/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationHeTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationHeTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/he/TeX.js"
	name := "../src/js/third-party/mathjax/localization/he/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationHeHeJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationHeHeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/he/he.js"
	name := "../src/js/third-party/mathjax/localization/he/he.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationIaFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationIaFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ia/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/ia/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationIaHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationIaHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ia/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/ia/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationIaHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationIaHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ia/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/ia/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationIaMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationIaMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ia/MathML.js"
	name := "../src/js/third-party/mathjax/localization/ia/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationIaMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationIaMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ia/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/ia/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationIaTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationIaTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ia/TeX.js"
	name := "../src/js/third-party/mathjax/localization/ia/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationIaIaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationIaIaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ia/ia.js"
	name := "../src/js/third-party/mathjax/localization/ia/ia.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationItFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationItFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/it/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/it/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationItHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationItHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/it/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/it/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationItHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationItHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/it/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/it/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationItMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationItMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/it/MathML.js"
	name := "../src/js/third-party/mathjax/localization/it/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationItMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationItMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/it/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/it/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationItTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationItTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/it/TeX.js"
	name := "../src/js/third-party/mathjax/localization/it/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationItItJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationItItJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/it/it.js"
	name := "../src/js/third-party/mathjax/localization/it/it.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationJaFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationJaFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ja/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/ja/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationJaHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationJaHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ja/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/ja/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationJaHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationJaHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ja/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/ja/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationJaMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationJaMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ja/MathML.js"
	name := "../src/js/third-party/mathjax/localization/ja/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationJaMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationJaMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ja/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/ja/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationJaTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationJaTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ja/TeX.js"
	name := "../src/js/third-party/mathjax/localization/ja/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationJaJaJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationJaJaJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ja/ja.js"
	name := "../src/js/third-party/mathjax/localization/ja/ja.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKnFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKnFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/kn/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/kn/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKnHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKnHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/kn/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/kn/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKnHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKnHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/kn/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/kn/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKnMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKnMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/kn/MathML.js"
	name := "../src/js/third-party/mathjax/localization/kn/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKnMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKnMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/kn/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/kn/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKnTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKnTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/kn/TeX.js"
	name := "../src/js/third-party/mathjax/localization/kn/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKnKnJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKnKnJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/kn/kn.js"
	name := "../src/js/third-party/mathjax/localization/kn/kn.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKoFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKoFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ko/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/ko/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKoHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKoHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ko/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/ko/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKoHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKoHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ko/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/ko/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKoMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKoMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ko/MathML.js"
	name := "../src/js/third-party/mathjax/localization/ko/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKoMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKoMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ko/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/ko/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKoTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKoTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ko/TeX.js"
	name := "../src/js/third-party/mathjax/localization/ko/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationKoKoJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationKoKoJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ko/ko.js"
	name := "../src/js/third-party/mathjax/localization/ko/ko.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLbFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLbFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lb/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/lb/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLbHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLbHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lb/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/lb/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLbHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLbHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lb/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/lb/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLbMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLbMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lb/MathML.js"
	name := "../src/js/third-party/mathjax/localization/lb/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLbMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLbMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lb/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/lb/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLbTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLbTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lb/TeX.js"
	name := "../src/js/third-party/mathjax/localization/lb/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLbLbJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLbLbJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lb/lb.js"
	name := "../src/js/third-party/mathjax/localization/lb/lb.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLkiFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLkiFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lki/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/lki/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLkiHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLkiHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lki/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/lki/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLkiHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLkiHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lki/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/lki/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLkiMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLkiMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lki/MathML.js"
	name := "../src/js/third-party/mathjax/localization/lki/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLkiMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLkiMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lki/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/lki/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLkiTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLkiTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lki/TeX.js"
	name := "../src/js/third-party/mathjax/localization/lki/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLkiLkiJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLkiLkiJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lki/lki.js"
	name := "../src/js/third-party/mathjax/localization/lki/lki.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLtFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLtFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lt/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/lt/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLtHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLtHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lt/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/lt/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLtHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLtHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lt/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/lt/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLtMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLtMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lt/MathML.js"
	name := "../src/js/third-party/mathjax/localization/lt/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLtMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLtMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lt/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/lt/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLtTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLtTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lt/TeX.js"
	name := "../src/js/third-party/mathjax/localization/lt/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationLtLtJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationLtLtJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/lt/lt.js"
	name := "../src/js/third-party/mathjax/localization/lt/lt.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationMkFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationMkFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/mk/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/mk/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationMkHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationMkHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/mk/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/mk/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationMkHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationMkHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/mk/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/mk/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationMkMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationMkMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/mk/MathML.js"
	name := "../src/js/third-party/mathjax/localization/mk/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationMkMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationMkMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/mk/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/mk/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationMkTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationMkTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/mk/TeX.js"
	name := "../src/js/third-party/mathjax/localization/mk/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationMkMkJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationMkMkJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/mk/mk.js"
	name := "../src/js/third-party/mathjax/localization/mk/mk.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationNlFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationNlFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/nl/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/nl/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationNlHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationNlHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/nl/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/nl/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationNlHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationNlHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/nl/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/nl/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationNlMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationNlMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/nl/MathML.js"
	name := "../src/js/third-party/mathjax/localization/nl/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationNlMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationNlMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/nl/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/nl/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationNlTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationNlTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/nl/TeX.js"
	name := "../src/js/third-party/mathjax/localization/nl/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationNlNlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationNlNlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/nl/nl.js"
	name := "../src/js/third-party/mathjax/localization/nl/nl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationOcFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationOcFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/oc/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/oc/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationOcHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationOcHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/oc/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/oc/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationOcHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationOcHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/oc/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/oc/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationOcMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationOcMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/oc/MathML.js"
	name := "../src/js/third-party/mathjax/localization/oc/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationOcMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationOcMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/oc/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/oc/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationOcTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationOcTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/oc/TeX.js"
	name := "../src/js/third-party/mathjax/localization/oc/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationOcOcJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationOcOcJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/oc/oc.js"
	name := "../src/js/third-party/mathjax/localization/oc/oc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPlFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPlFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pl/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/pl/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPlHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPlHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pl/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/pl/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPlHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPlHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pl/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/pl/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPlMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPlMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pl/MathML.js"
	name := "../src/js/third-party/mathjax/localization/pl/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPlMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPlMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pl/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/pl/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPlTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPlTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pl/TeX.js"
	name := "../src/js/third-party/mathjax/localization/pl/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPlPlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPlPlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pl/pl.js"
	name := "../src/js/third-party/mathjax/localization/pl/pl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/pt/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/pt/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/pt/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt/MathML.js"
	name := "../src/js/third-party/mathjax/localization/pt/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/pt/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt/TeX.js"
	name := "../src/js/third-party/mathjax/localization/pt/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtPtJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtPtJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt/pt.js"
	name := "../src/js/third-party/mathjax/localization/pt/pt.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtBrFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtBrFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt-br/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/pt-br/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtBrHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtBrHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt-br/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/pt-br/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtBrHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtBrHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt-br/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/pt-br/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtBrMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtBrMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt-br/MathML.js"
	name := "../src/js/third-party/mathjax/localization/pt-br/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtBrMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtBrMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt-br/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/pt-br/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtBrTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtBrTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt-br/TeX.js"
	name := "../src/js/third-party/mathjax/localization/pt-br/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationPtBrPtBrJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationPtBrPtBrJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/pt-br/pt-br.js"
	name := "../src/js/third-party/mathjax/localization/pt-br/pt-br.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationQqqFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationQqqFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/qqq/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/qqq/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationQqqHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationQqqHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/qqq/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/qqq/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationQqqHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationQqqHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/qqq/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/qqq/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationQqqMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationQqqMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/qqq/MathML.js"
	name := "../src/js/third-party/mathjax/localization/qqq/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationQqqMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationQqqMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/qqq/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/qqq/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationQqqTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationQqqTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/qqq/TeX.js"
	name := "../src/js/third-party/mathjax/localization/qqq/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationQqqQqqJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationQqqQqqJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/qqq/qqq.js"
	name := "../src/js/third-party/mathjax/localization/qqq/qqq.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationRuFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationRuFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ru/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/ru/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationRuHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationRuHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ru/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/ru/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationRuHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationRuHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ru/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/ru/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationRuMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationRuMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ru/MathML.js"
	name := "../src/js/third-party/mathjax/localization/ru/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationRuMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationRuMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ru/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/ru/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationRuTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationRuTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ru/TeX.js"
	name := "../src/js/third-party/mathjax/localization/ru/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationRuRuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationRuRuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/ru/ru.js"
	name := "../src/js/third-party/mathjax/localization/ru/ru.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScnFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScnFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/scn/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/scn/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScnHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScnHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/scn/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/scn/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScnHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScnHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/scn/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/scn/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScnMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScnMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/scn/MathML.js"
	name := "../src/js/third-party/mathjax/localization/scn/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScnMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScnMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/scn/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/scn/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScnTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScnTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/scn/TeX.js"
	name := "../src/js/third-party/mathjax/localization/scn/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScnScnJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScnScnJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/scn/scn.js"
	name := "../src/js/third-party/mathjax/localization/scn/scn.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScoFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScoFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sco/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/sco/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScoHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScoHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sco/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/sco/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScoHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScoHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sco/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/sco/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScoMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScoMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sco/MathML.js"
	name := "../src/js/third-party/mathjax/localization/sco/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScoMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScoMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sco/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/sco/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScoTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScoTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sco/TeX.js"
	name := "../src/js/third-party/mathjax/localization/sco/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationScoScoJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationScoScoJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sco/sco.js"
	name := "../src/js/third-party/mathjax/localization/sco/sco.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSlFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSlFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sl/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/sl/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSlHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSlHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sl/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/sl/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSlHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSlHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sl/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/sl/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSlMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSlMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sl/MathML.js"
	name := "../src/js/third-party/mathjax/localization/sl/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSlMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSlMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sl/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/sl/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSlTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSlTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sl/TeX.js"
	name := "../src/js/third-party/mathjax/localization/sl/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSlSlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSlSlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sl/sl.js"
	name := "../src/js/third-party/mathjax/localization/sl/sl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSvFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSvFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sv/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/sv/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSvHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSvHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sv/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/sv/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSvHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSvHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sv/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/sv/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSvMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSvMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sv/MathML.js"
	name := "../src/js/third-party/mathjax/localization/sv/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSvMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSvMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sv/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/sv/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSvTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSvTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sv/TeX.js"
	name := "../src/js/third-party/mathjax/localization/sv/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationSvSvJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationSvSvJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/sv/sv.js"
	name := "../src/js/third-party/mathjax/localization/sv/sv.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationTrFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationTrFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/tr/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/tr/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationTrHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationTrHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/tr/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/tr/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationTrHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationTrHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/tr/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/tr/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationTrMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationTrMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/tr/MathML.js"
	name := "../src/js/third-party/mathjax/localization/tr/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationTrMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationTrMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/tr/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/tr/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationTrTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationTrTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/tr/TeX.js"
	name := "../src/js/third-party/mathjax/localization/tr/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationTrTrJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationTrTrJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/tr/tr.js"
	name := "../src/js/third-party/mathjax/localization/tr/tr.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationUkFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationUkFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/uk/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/uk/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationUkHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationUkHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/uk/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/uk/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationUkHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationUkHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/uk/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/uk/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationUkMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationUkMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/uk/MathML.js"
	name := "../src/js/third-party/mathjax/localization/uk/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationUkMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationUkMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/uk/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/uk/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationUkTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationUkTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/uk/TeX.js"
	name := "../src/js/third-party/mathjax/localization/uk/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationUkUkJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationUkUkJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/uk/uk.js"
	name := "../src/js/third-party/mathjax/localization/uk/uk.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationViFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationViFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/vi/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/vi/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationViHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationViHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/vi/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/vi/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationViHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationViHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/vi/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/vi/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationViMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationViMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/vi/MathML.js"
	name := "../src/js/third-party/mathjax/localization/vi/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationViMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationViMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/vi/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/vi/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationViTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationViTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/vi/TeX.js"
	name := "../src/js/third-party/mathjax/localization/vi/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationViViJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationViViJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/vi/vi.js"
	name := "../src/js/third-party/mathjax/localization/vi/vi.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationZhHansFontwarningsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationZhHansFontwarningsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/zh-hans/FontWarnings.js"
	name := "../src/js/third-party/mathjax/localization/zh-hans/FontWarnings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationZhHansHtmlCssJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationZhHansHtmlCssJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/zh-hans/HTML-CSS.js"
	name := "../src/js/third-party/mathjax/localization/zh-hans/HTML-CSS.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationZhHansHelpdialogJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationZhHansHelpdialogJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/zh-hans/HelpDialog.js"
	name := "../src/js/third-party/mathjax/localization/zh-hans/HelpDialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationZhHansMathmlJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationZhHansMathmlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/zh-hans/MathML.js"
	name := "../src/js/third-party/mathjax/localization/zh-hans/MathML.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationZhHansMathmenuJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationZhHansMathmenuJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/zh-hans/MathMenu.js"
	name := "../src/js/third-party/mathjax/localization/zh-hans/MathMenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationZhHansTexJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationZhHansTexJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/zh-hans/TeX.js"
	name := "../src/js/third-party/mathjax/localization/zh-hans/TeX.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyMathjaxLocalizationZhHansZhHansJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyMathjaxLocalizationZhHansZhHansJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/mathjax/localization/zh-hans/zh-hans.js"
	name := "../src/js/third-party/mathjax/localization/zh-hans/zh-hans.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartySweetalertMinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartySweetalertMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/sweetalert.min.js"
	name := "../src/js/third-party/sweetalert.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyTagItJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyTagItJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/tag-it.js"
	name := "../src/js/third-party/tag-it.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyUnderscoreMinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyUnderscoreMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/underscore-min.js"
	name := "../src/js/third-party/underscore-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyUnderscoreMinMap reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyUnderscoreMinMap() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/underscore-min.map"
	name := "../src/js/third-party/underscore-min.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_deletecollectionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_deletecollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_deleteCollection.js"
	name := "../src/js/zebedee-api/_deleteCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_deletecontentJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_deletecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_deleteContent.js"
	name := "../src/js/zebedee-api/_deleteContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_deleteequationJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_deleteequationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_deleteEquation.js"
	name := "../src/js/zebedee-api/_deleteEquation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getcollectionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getcollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getCollection.js"
	name := "../src/js/zebedee-api/_getCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getpagedataJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getpagedataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getPageData.js"
	name := "../src/js/zebedee-api/_getPageData.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getpageresourceJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getpageresourceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getPageResource.js"
	name := "../src/js/zebedee-api/_getPageResource.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getteamsJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getteamsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getTeams.js"
	name := "../src/js/zebedee-api/_getTeams.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getuserpermissionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getuserpermissionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getUserPermission.js"
	name := "../src/js/zebedee-api/_getUserPermission.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getusersJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getusersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getUsers.js"
	name := "../src/js/zebedee-api/_getUsers.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_movecontentJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_movecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_moveContent.js"
	name := "../src/js/zebedee-api/_moveContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_postpasswordJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_postpasswordJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_postPassword.js"
	name := "../src/js/zebedee-api/_postPassword.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_postpermissionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_postpermissionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_postPermission.js"
	name := "../src/js/zebedee-api/_postPermission.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_putcontentJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_putcontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_putContent.js"
	name := "../src/js/zebedee-api/_putContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcManifestJson reads file data from disk. It returns an error on failure.
func SrcManifestJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/manifest.json"
	name := "../src/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcPackageJson reads file data from disk. It returns an error on failure.
func SrcPackageJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/package.json"
	name := "../src/package.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_accordionScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_accordionScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_accordion.scss"
	name := "../src/scss/components/_accordion.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_builderScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_builderScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_builder.scss"
	name := "../src/scss/components/_builder.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_iconsScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_iconsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_icons.scss"
	name := "../src/scss/components/_icons.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_markdownEditorScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_markdownEditorScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_markdown-editor.scss"
	name := "../src/scss/components/_markdown-editor.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_networkStatusScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_networkStatusScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_network-status.scss"
	name := "../src/scss/components/_network-status.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_pageScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_pageScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_page.scss"
	name := "../src/scss/components/_page.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_sliderScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_sliderScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_slider.scss"
	name := "../src/scss/components/_slider.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_buttonsScss reads file data from disk. It returns an error on failure.
func SrcScssElements_buttonsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_buttons.scss"
	name := "../src/scss/elements/_buttons.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_formsScss reads file data from disk. It returns an error on failure.
func SrcScssElements_formsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_forms.scss"
	name := "../src/scss/elements/_forms.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_inputsScss reads file data from disk. It returns an error on failure.
func SrcScssElements_inputsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_inputs.scss"
	name := "../src/scss/elements/_inputs.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_navScss reads file data from disk. It returns an error on failure.
func SrcScssElements_navScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_nav.scss"
	name := "../src/scss/elements/_nav.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_tablesScss reads file data from disk. It returns an error on failure.
func SrcScssElements_tablesScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_tables.scss"
	name := "../src/scss/elements/_tables.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_typographyScss reads file data from disk. It returns an error on failure.
func SrcScssElements_typographyScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_typography.scss"
	name := "../src/scss/elements/_typography.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssMainScss reads file data from disk. It returns an error on failure.
func SrcScssMainScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/main.scss"
	name := "../src/scss/main.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_baseScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_baseScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_base.scss"
	name := "../src/scss/partials/_base.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_collectionsScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_collectionsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_collections.scss"
	name := "../src/scss/partials/_collections.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_colourPaletteScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_colourPaletteScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_colour-palette.scss"
	name := "../src/scss/partials/_colour-palette.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_elementsScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_elementsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_elements.scss"
	name := "../src/scss/partials/_elements.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_fontsScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_fontsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_fonts.scss"
	name := "../src/scss/partials/_fonts.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_jquiScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_jquiScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_jqui.scss"
	name := "../src/scss/partials/_jqui.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_publishScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_publishScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_publish.scss"
	name := "../src/scss/partials/_publish.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_resetScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_resetScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_reset.scss"
	name := "../src/scss/partials/_reset.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_shameScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_shameScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_shame.scss"
	name := "../src/scss/partials/_shame.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_utilitiesScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_utilitiesScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_utilities.scss"
	name := "../src/scss/partials/_utilities.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_workspaceScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_workspaceScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_workspace.scss"
	name := "../src/scss/partials/_workspace.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_displayScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_displayScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_display.scss"
	name := "../src/scss/utilities/_display.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_gridScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_gridScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_grid.scss"
	name := "../src/scss/utilities/_grid.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_marginScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_marginScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_margin.scss"
	name := "../src/scss/utilities/_margin.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_mixinsScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_mixinsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_mixins.scss"
	name := "../src/scss/utilities/_mixins.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_paddingScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_paddingScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_padding.scss"
	name := "../src/scss/utilities/_padding.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_panelsScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_panelsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_panels.scss"
	name := "../src/scss/utilities/_panels.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_utilitiesScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_utilitiesScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_utilities.scss"
	name := "../src/scss/utilities/_utilities.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcServiceWorkerJs reads file data from disk. It returns an error on failure.
func SrcServiceWorkerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/service-worker.js"
	name := "../src/service-worker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecClassesFlorencespecJs reads file data from disk. It returns an error on failure.
func SrcSpecClassesFlorencespecJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/classes/FlorenceSpec.js"
	name := "../src/spec/classes/FlorenceSpec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecClassesPathutilsspecJs reads file data from disk. It returns an error on failure.
func SrcSpecClassesPathutilsspecJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/classes/PathUtilsSpec.js"
	name := "../src/spec/classes/PathUtilsSpec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecClassesStringutilsspecJs reads file data from disk. It returns an error on failure.
func SrcSpecClassesStringutilsspecJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/classes/StringUtilsSpec.js"
	name := "../src/spec/classes/StringUtilsSpec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecSupportJasmineJson reads file data from disk. It returns an error on failure.
func SrcSpecSupportJasmineJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/support/jasmine.json"
	name := "../src/spec/support/jasmine.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBlockmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBlockmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/blockModal.handlebars"
	name := "../src/templates/blockModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBlocknewsmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBlocknewsmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/blockNewsModal.handlebars"
	name := "../src/templates/blockNewsModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBrowsenodeHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBrowsenodeHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/browseNode.handlebars"
	name := "../src/templates/browseNode.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBrowsenodedatavisHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBrowsenodedatavisHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/browseNodeDataVis.handlebars"
	name := "../src/templates/browseNodeDataVis.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesChangepasswordHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesChangepasswordHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/changePassword.handlebars"
	name := "../src/templates/changePassword.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesChartbuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesChartbuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartBuilder.handlebars"
	name := "../src/templates/chartBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditbarchartextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditbarchartextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditBarChartExtras.handlebars"
	name := "../src/templates/chartEditBarChartExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditbarlineextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditbarlineextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditBarlineExtras.handlebars"
	name := "../src/templates/chartEditBarlineExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditdualaxisextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditdualaxisextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditDualAxisExtras.handlebars"
	name := "../src/templates/chartEditDualAxisExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditlinechartextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditlinechartextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditLineChartExtras.handlebars"
	name := "../src/templates/chartEditLineChartExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesChilddeletesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesChilddeletesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/childDeletes.handlebars"
	name := "../src/templates/childDeletes.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCollectiondetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCollectiondetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/collectionDetails.handlebars"
	name := "../src/templates/collectionDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCollectioneditHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCollectioneditHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/collectionEdit.handlebars"
	name := "../src/templates/collectionEdit.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCollectionlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCollectionlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/collectionList.handlebars"
	name := "../src/templates/collectionList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditnavHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditnavHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editNav.handlebars"
	name := "../src/templates/editNav.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditnavchildHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditnavchildHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editNavChild.handlebars"
	name := "../src/templates/editNavChild.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditoralertHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditoralertHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorAlert.handlebars"
	name := "../src/templates/editorAlert.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcompendiumdatasetfilesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcompendiumdatasetfilesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorCompendiumDatasetFiles.handlebars"
	name := "../src/templates/editorCompendiumDatasetFiles.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcontentHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcontentHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorContent.handlebars"
	name := "../src/templates/editorContent.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcontentnotitleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcontentnotitleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorContentNoTitle.handlebars"
	name := "../src/templates/editorContentNoTitle.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcontentoneHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcontentoneHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorContentOne.handlebars"
	name := "../src/templates/editorContentOne.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcorrectionHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcorrectionHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorCorrection.handlebars"
	name := "../src/templates/editorCorrection.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordateHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordateHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDate.handlebars"
	name := "../src/templates/editorDate.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordocwithfilesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordocwithfilesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDocWithFiles.handlebars"
	name := "../src/templates/editorDocWithFiles.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordownloadsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordownloadsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDownloads.handlebars"
	name := "../src/templates/editorDownloads.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordownloadswithsummaryHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordownloadswithsummaryHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDownloadsWithSummary.handlebars"
	name := "../src/templates/editorDownloadsWithSummary.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorlinksHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorlinksHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorLinks.handlebars"
	name := "../src/templates/editorLinks.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorrelatedHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorrelatedHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorRelated.handlebars"
	name := "../src/templates/editorRelated.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorservicemessageHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorservicemessageHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorServiceMessage.handlebars"
	name := "../src/templates/editorServiceMessage.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditort1blocksHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditort1blocksHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorT1Blocks.handlebars"
	name := "../src/templates/editorT1Blocks.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditortopicsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditortopicsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorTopics.handlebars"
	name := "../src/templates/editorTopics.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEmbediframeHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEmbediframeHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/embedIframe.handlebars"
	name := "../src/templates/embedIframe.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEquationbuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEquationbuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/equationBuilder.handlebars"
	name := "../src/templates/equationBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesFlorenceHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesFlorenceHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/florence.handlebars"
	name := "../src/templates/florence.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesIframenavHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesIframenavHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/iframeNav.handlebars"
	name := "../src/templates/iframeNav.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesImagebuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesImagebuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/imageBuilder.handlebars"
	name := "../src/templates/imageBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLinkexternalmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLinkexternalmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/linkExternalModal.handlebars"
	name := "../src/templates/linkExternalModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLinkmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLinkmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/linkModal.handlebars"
	name := "../src/templates/linkModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLoadinganimationHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLoadinganimationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/loadingAnimation.handlebars"
	name := "../src/templates/loadingAnimation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLoginHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLoginHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/login.handlebars"
	name := "../src/templates/login.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesMainnavHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesMainnavHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/mainNav.handlebars"
	name := "../src/templates/mainNav.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesMarkdowneditorHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesMarkdowneditorHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/markdownEditor.handlebars"
	name := "../src/templates/markdownEditor.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesMarkdowneditornotitleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesMarkdowneditornotitleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/markdownEditorNoTitle.handlebars"
	name := "../src/templates/markdownEditorNoTitle.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesPublishdetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesPublishdetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/publishDetails.handlebars"
	name := "../src/templates/publishDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesPublishlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesPublishlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/publishList.handlebars"
	name := "../src/templates/publishList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesRelatedmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesRelatedmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/relatedModal.handlebars"
	name := "../src/templates/relatedModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReleaseselectorHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReleaseselectorHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/releaseSelector.handlebars"
	name := "../src/templates/releaseSelector.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReportlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReportlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/reportList.handlebars"
	name := "../src/templates/reportList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReportpublisheddetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReportpublisheddetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/reportPublishedDetails.handlebars"
	name := "../src/templates/reportPublishedDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReportunpublisheddetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReportunpublisheddetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/reportUnpublishedDetails.handlebars"
	name := "../src/templates/reportUnpublishedDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesSelectorhourHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesSelectorhourHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/selectorHour.handlebars"
	name := "../src/templates/selectorHour.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesSelectorminuteHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesSelectorminuteHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/selectorMinute.handlebars"
	name := "../src/templates/selectorMinute.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTablebuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTablebuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/tableBuilder.handlebars"
	name := "../src/templates/tableBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTeamdetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTeamdetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/teamDetails.handlebars"
	name := "../src/templates/teamDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTeameditHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTeameditHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/teamEdit.handlebars"
	name := "../src/templates/teamEdit.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTeamlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTeamlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/teamList.handlebars"
	name := "../src/templates/teamList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTickanimationHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTickanimationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/tickAnimation.handlebars"
	name := "../src/templates/tickAnimation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesUploadfileformHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesUploadfileformHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/uploadFileForm.handlebars"
	name := "../src/templates/uploadFileForm.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesUserdetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesUserdetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/userDetails.handlebars"
	name := "../src/templates/userDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesUserlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesUserlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/userList.handlebars"
	name := "../src/templates/userList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkbrowseHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkbrowseHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workBrowse.handlebars"
	name := "../src/templates/workBrowse.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkcreateHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkcreateHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workCreate.handlebars"
	name := "../src/templates/workCreate.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditchartsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditchartsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditCharts.handlebars"
	name := "../src/templates/workEditCharts.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditequationsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditequationsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditEquations.handlebars"
	name := "../src/templates/workEditEquations.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditimagesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditimagesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditImages.handlebars"
	name := "../src/templates/workEditImages.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt1Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt1Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT1.handlebars"
	name := "../src/templates/workEditT1.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt16Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt16Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT16.handlebars"
	name := "../src/templates/workEditT16.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt1censusHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt1censusHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT1Census.handlebars"
	name := "../src/templates/workEditT1Census.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt1sectionsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt1sectionsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT1Sections.handlebars"
	name := "../src/templates/workEditT1Sections.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt2Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt2Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT2.handlebars"
	name := "../src/templates/workEditT2.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt3Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt3Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT3.handlebars"
	name := "../src/templates/workEditT3.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4articleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4articleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Article.handlebars"
	name := "../src/templates/workEditT4Article.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4articledownloadHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4articledownloadHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4ArticleDownload.handlebars"
	name := "../src/templates/workEditT4ArticleDownload.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4bulletinHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4bulletinHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Bulletin.handlebars"
	name := "../src/templates/workEditT4Bulletin.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4compendiumHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4compendiumHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Compendium.handlebars"
	name := "../src/templates/workEditT4Compendium.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4methodologyHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4methodologyHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Methodology.handlebars"
	name := "../src/templates/workEditT4Methodology.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt5Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt5Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT5.handlebars"
	name := "../src/templates/workEditT5.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt6Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt6Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT6.handlebars"
	name := "../src/templates/workEditT6.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt6chapterHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt6chapterHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT6Chapter.handlebars"
	name := "../src/templates/workEditT6Chapter.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt6datasetHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt6datasetHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT6Dataset.handlebars"
	name := "../src/templates/workEditT6Dataset.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt7Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt7Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT7.handlebars"
	name := "../src/templates/workEditT7.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt7landingHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt7landingHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT7Landing.handlebars"
	name := "../src/templates/workEditT7Landing.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt7staticarticleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt7staticarticleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT7StaticArticle.handlebars"
	name := "../src/templates/workEditT7StaticArticle.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8.handlebars"
	name := "../src/templates/workEditT8.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8compendiumHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8compendiumHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8Compendium.handlebars"
	name := "../src/templates/workEditT8Compendium.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8correctionlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8correctionlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8CorrectionList.handlebars"
	name := "../src/templates/workEditT8CorrectionList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8landingdatasetlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8landingdatasetlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8LandingDatasetList.handlebars"
	name := "../src/templates/workEditT8LandingDatasetList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8landingpageHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8landingpageHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8LandingPage.handlebars"
	name := "../src/templates/workEditT8LandingPage.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8versionlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8versionlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8VersionList.handlebars"
	name := "../src/templates/workEditT8VersionList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkedittablesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkedittablesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditTables.handlebars"
	name := "../src/templates/workEditTables.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditvisualisationHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditvisualisationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditVisualisation.handlebars"
	name := "../src/templates/workEditVisualisation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkimportHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkimportHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workImport.handlebars"
	name := "../src/templates/workImport.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkspaceHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkspaceHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workSpace.handlebars"
	name := "../src/templates/workSpace.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../src/.DS_Store": SrcDs_store,
	"../src/assets/css/main.min.css": SrcAssetsCssMainMinCss,
	"../src/assets/css/main.min.css.map": SrcAssetsCssMainMinCssMap,
	"../src/assets/js/jquery.min.js": SrcAssetsJsJqueryMinJs,
	"../src/assets/js/main.js": SrcAssetsJsMainJs,
	"../src/assets/js/templates.js": SrcAssetsJsTemplatesJs,
	"../src/assets/version.json": SrcAssetsVersionJson,
	"../src/css/florence.css": SrcCssFlorenceCss,
	"../src/css/rapid-prototype-main.css": SrcCssRapidPrototypeMainCss,
	"../src/css/third-party/c3.css": SrcCssThirdPartyC3Css,
	"../src/css/third-party/jquery-ui.theme.min.css": SrcCssThirdPartyJqueryUiThemeMinCss,
	"../src/css/third-party/jquery.tagit.css": SrcCssThirdPartyJqueryTagitCss,
	"../src/css/third-party/pagedown.css": SrcCssThirdPartyPagedownCss,
	"../src/css/third-party/responsive-tables.css": SrcCssThirdPartyResponsiveTablesCss,
	"../src/css/third-party/sweetalert.css": SrcCssThirdPartySweetalertCss,
	"../src/css/third-party/tagit.ui-zendesk.css": SrcCssThirdPartyTagitUiZendeskCss,
	"../src/florence.html": SrcFlorenceHtml,
	"../src/font/Open_Sans/LICENSE.txt": SrcFontOpen_sansLicenseTxt,
	"../src/font/Open_Sans/OpenSans-Bold.eot": SrcFontOpen_sansOpensansBoldEot,
	"../src/font/Open_Sans/OpenSans-Bold.svg": SrcFontOpen_sansOpensansBoldSvg,
	"../src/font/Open_Sans/OpenSans-Bold.ttf": SrcFontOpen_sansOpensansBoldTtf,
	"../src/font/Open_Sans/OpenSans-Bold.woff": SrcFontOpen_sansOpensansBoldWoff,
	"../src/font/Open_Sans/OpenSans-Bold.woff2": SrcFontOpen_sansOpensansBoldWoff2,
	"../src/font/Open_Sans/OpenSans-BoldItalic.eot": SrcFontOpen_sansOpensansBolditalicEot,
	"../src/font/Open_Sans/OpenSans-BoldItalic.svg": SrcFontOpen_sansOpensansBolditalicSvg,
	"../src/font/Open_Sans/OpenSans-BoldItalic.ttf": SrcFontOpen_sansOpensansBolditalicTtf,
	"../src/font/Open_Sans/OpenSans-BoldItalic.woff": SrcFontOpen_sansOpensansBolditalicWoff,
	"../src/font/Open_Sans/OpenSans-ExtraBold.eot": SrcFontOpen_sansOpensansExtraboldEot,
	"../src/font/Open_Sans/OpenSans-ExtraBold.svg": SrcFontOpen_sansOpensansExtraboldSvg,
	"../src/font/Open_Sans/OpenSans-ExtraBold.ttf": SrcFontOpen_sansOpensansExtraboldTtf,
	"../src/font/Open_Sans/OpenSans-ExtraBold.woff": SrcFontOpen_sansOpensansExtraboldWoff,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot": SrcFontOpen_sansOpensansExtrabolditalicEot,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg": SrcFontOpen_sansOpensansExtrabolditalicSvg,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf": SrcFontOpen_sansOpensansExtrabolditalicTtf,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff": SrcFontOpen_sansOpensansExtrabolditalicWoff,
	"../src/font/Open_Sans/OpenSans-Italic.eot": SrcFontOpen_sansOpensansItalicEot,
	"../src/font/Open_Sans/OpenSans-Italic.svg": SrcFontOpen_sansOpensansItalicSvg,
	"../src/font/Open_Sans/OpenSans-Italic.ttf": SrcFontOpen_sansOpensansItalicTtf,
	"../src/font/Open_Sans/OpenSans-Italic.woff": SrcFontOpen_sansOpensansItalicWoff,
	"../src/font/Open_Sans/OpenSans-Light.eot": SrcFontOpen_sansOpensansLightEot,
	"../src/font/Open_Sans/OpenSans-Light.svg": SrcFontOpen_sansOpensansLightSvg,
	"../src/font/Open_Sans/OpenSans-Light.ttf": SrcFontOpen_sansOpensansLightTtf,
	"../src/font/Open_Sans/OpenSans-Light.woff": SrcFontOpen_sansOpensansLightWoff,
	"../src/font/Open_Sans/OpenSans-Light.woff2": SrcFontOpen_sansOpensansLightWoff2,
	"../src/font/Open_Sans/OpenSans-LightItalic.eot": SrcFontOpen_sansOpensansLightitalicEot,
	"../src/font/Open_Sans/OpenSans-LightItalic.svg": SrcFontOpen_sansOpensansLightitalicSvg,
	"../src/font/Open_Sans/OpenSans-LightItalic.ttf": SrcFontOpen_sansOpensansLightitalicTtf,
	"../src/font/Open_Sans/OpenSans-LightItalic.woff": SrcFontOpen_sansOpensansLightitalicWoff,
	"../src/font/Open_Sans/OpenSans-Regular.eot": SrcFontOpen_sansOpensansRegularEot,
	"../src/font/Open_Sans/OpenSans-Regular.svg": SrcFontOpen_sansOpensansRegularSvg,
	"../src/font/Open_Sans/OpenSans-Regular.ttf": SrcFontOpen_sansOpensansRegularTtf,
	"../src/font/Open_Sans/OpenSans-Regular.woff": SrcFontOpen_sansOpensansRegularWoff,
	"../src/font/Open_Sans/OpenSans-Regular.woff2": SrcFontOpen_sansOpensansRegularWoff2,
	"../src/font/Open_Sans/OpenSans-Semibold.eot": SrcFontOpen_sansOpensansSemiboldEot,
	"../src/font/Open_Sans/OpenSans-Semibold.svg": SrcFontOpen_sansOpensansSemiboldSvg,
	"../src/font/Open_Sans/OpenSans-Semibold.ttf": SrcFontOpen_sansOpensansSemiboldTtf,
	"../src/font/Open_Sans/OpenSans-Semibold.woff": SrcFontOpen_sansOpensansSemiboldWoff,
	"../src/font/Open_Sans/OpenSans-Semibold.woff2": SrcFontOpen_sansOpensansSemiboldWoff2,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.eot": SrcFontOpen_sansOpensansSemibolditalicEot,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.svg": SrcFontOpen_sansOpensansSemibolditalicSvg,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.ttf": SrcFontOpen_sansOpensansSemibolditalicTtf,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.woff": SrcFontOpen_sansOpensansSemibolditalicWoff,
	"../src/font/Roboto_Slab/LICENSE.txt": SrcFontRoboto_slabLicenseTxt,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.eot": SrcFontRoboto_slabRobotoslabBoldEot,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.svg": SrcFontRoboto_slabRobotoslabBoldSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.ttf": SrcFontRoboto_slabRobotoslabBoldTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.woff": SrcFontRoboto_slabRobotoslabBoldWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.woff2": SrcFontRoboto_slabRobotoslabBoldWoff2,
	"../src/font/Roboto_Slab/RobotoSlab-Light.eot": SrcFontRoboto_slabRobotoslabLightEot,
	"../src/font/Roboto_Slab/RobotoSlab-Light.svg": SrcFontRoboto_slabRobotoslabLightSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Light.ttf": SrcFontRoboto_slabRobotoslabLightTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Light.woff": SrcFontRoboto_slabRobotoslabLightWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.eot": SrcFontRoboto_slabRobotoslabRegularEot,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.svg": SrcFontRoboto_slabRobotoslabRegularSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.ttf": SrcFontRoboto_slabRobotoslabRegularTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.woff": SrcFontRoboto_slabRobotoslabRegularWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.woff2": SrcFontRoboto_slabRobotoslabRegularWoff2,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.eot": SrcFontRoboto_slabRobotoslabThinEot,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.svg": SrcFontRoboto_slabRobotoslabThinSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.ttf": SrcFontRoboto_slabRobotoslabThinTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.woff": SrcFontRoboto_slabRobotoslabThinWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.woff2": SrcFontRoboto_slabRobotoslabThinWoff2,
	"../src/font/Ubuntu_Mono/UFL.txt": SrcFontUbuntu_monoUflTxt,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.eot": SrcFontUbuntu_monoUbuntumonoBoldEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.svg": SrcFontUbuntu_monoUbuntumonoBoldSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf": SrcFontUbuntu_monoUbuntumonoBoldTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff": SrcFontUbuntu_monoUbuntumonoBoldWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2": SrcFontUbuntu_monoUbuntumonoBoldWoff2,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot": SrcFontUbuntu_monoUbuntumonoBolditalicEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg": SrcFontUbuntu_monoUbuntumonoBolditalicSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf": SrcFontUbuntu_monoUbuntumonoBolditalicTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff": SrcFontUbuntu_monoUbuntumonoBolditalicWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.eot": SrcFontUbuntu_monoUbuntumonoItalicEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.svg": SrcFontUbuntu_monoUbuntumonoItalicSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf": SrcFontUbuntu_monoUbuntumonoItalicTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.woff": SrcFontUbuntu_monoUbuntumonoItalicWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.eot": SrcFontUbuntu_monoUbuntumonoRegularEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.svg": SrcFontUbuntu_monoUbuntumonoRegularSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf": SrcFontUbuntu_monoUbuntumonoRegularTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff": SrcFontUbuntu_monoUbuntumonoRegularWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2": SrcFontUbuntu_monoUbuntumonoRegularWoff2,
	"../src/font/florence.eot": SrcFontFlorenceEot,
	"../src/font/florence.svg": SrcFontFlorenceSvg,
	"../src/font/florence.ttf": SrcFontFlorenceTtf,
	"../src/font/florence.woff": SrcFontFlorenceWoff,
	"../src/html templates/jquery-ui.min.js": SrcHtmlTemplatesJqueryUiMinJs,
	"../src/html templates/pagedown.css": SrcHtmlTemplatesPagedownCss,
	"../src/html templates/publish-manual.html": SrcHtmlTemplatesPublishManualHtml,
	"../src/html templates/publish-scheduled.html": SrcHtmlTemplatesPublishScheduledHtml,
	"../src/html templates/ui-functions.js": SrcHtmlTemplatesUiFunctionsJs,
	"../src/html templates/workspace-browse.html": SrcHtmlTemplatesWorkspaceBrowseHtml,
	"../src/html templates/workspace-create.html": SrcHtmlTemplatesWorkspaceCreateHtml,
	"../src/html templates/workspace-edit.html": SrcHtmlTemplatesWorkspaceEditHtml,
	"../src/img/favicon11.ico": SrcImgFavicon11Ico,
	"../src/img/favicon12.ico": SrcImgFavicon12Ico,
	"../src/img/favicon21.ico": SrcImgFavicon21Ico,
	"../src/img/favicon22.ico": SrcImgFavicon22Ico,
	"../src/img/favicon23.ico": SrcImgFavicon23Ico,
	"../src/img/favicon24.ico": SrcImgFavicon24Ico,
	"../src/img/flo-logo.png": SrcImgFloLogoPng,
	"../src/img/flo-logo144.png": SrcImgFloLogo144Png,
	"../src/img/rule-21.png": SrcImgRule21Png,
	"../src/img/rule-22.png": SrcImgRule22Png,
	"../src/img/rule.png": SrcImgRulePng,
	"../src/img/sb_v_double_arrow.png": SrcImgSb_v_double_arrowPng,
	"../src/img/semi-transparent-bg.png": SrcImgSemiTransparentBgPng,
	"../src/img/sprite.png": SrcImgSpritePng,
	"../src/img/ui-bg_diagonals-thick_18_b81900_40x40.png": SrcImgUiBg_diagonalsThick_18_b81900_40x40Png,
	"../src/img/ui-bg_diagonals-thick_20_666666_40x40.png": SrcImgUiBg_diagonalsThick_20_666666_40x40Png,
	"../src/img/ui-bg_flat_10_000000_40x100.png": SrcImgUiBg_flat_10_000000_40x100Png,
	"../src/img/ui-bg_glass_100_f6f6f6_1x400.png": SrcImgUiBg_glass_100_f6f6f6_1x400Png,
	"../src/img/ui-bg_glass_100_fdf5ce_1x400.png": SrcImgUiBg_glass_100_fdf5ce_1x400Png,
	"../src/img/ui-bg_glass_65_ffffff_1x400.png": SrcImgUiBg_glass_65_ffffff_1x400Png,
	"../src/img/ui-bg_gloss-wave_35_f6a828_500x100.png": SrcImgUiBg_glossWave_35_f6a828_500x100Png,
	"../src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png": SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png,
	"../src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png": SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png,
	"../src/img/ui-icons_222222_256x240.png": SrcImgUiIcons_222222_256x240Png,
	"../src/img/ui-icons_228ef1_256x240.png": SrcImgUiIcons_228ef1_256x240Png,
	"../src/img/ui-icons_ef8c08_256x240.png": SrcImgUiIcons_ef8c08_256x240Png,
	"../src/img/ui-icons_ffd27a_256x240.png": SrcImgUiIcons_ffd27a_256x240Png,
	"../src/img/ui-icons_ffffff_256x240.png": SrcImgUiIcons_ffffff_256x240Png,
	"../src/img/wmd-buttons.png": SrcImgWmdButtonsPng,
	"../src/index.html": SrcIndexHtml,
	"../src/js/classes/cookieUtils.js": SrcJsClassesCookieutilsJs,
	"../src/js/classes/florence.js": SrcJsClassesFlorenceJs,
	"../src/js/classes/pathUtils.js": SrcJsClassesPathutilsJs,
	"../src/js/classes/stringUtils.js": SrcJsClassesStringutilsJs,
	"../src/js/components/_accordion.js": SrcJsComponents_accordionJs,
	"../src/js/components/_fileInput.js": SrcJsComponents_fileinputJs,
	"../src/js/components/_hidePanel.js": SrcJsComponents_hidepanelJs,
	"../src/js/components/_showPanel.js": SrcJsComponents_showpanelJs,
	"../src/js/functions/_ContentDeleteMarker.js": SrcJsFunctions_contentdeletemarkerJs,
	"../src/js/functions/__init.js": SrcJsFunctions__initJs,
	"../src/js/functions/_accordionSettings.js": SrcJsFunctions_accordionsettingsJs,
	"../src/js/functions/_autoSize.js": SrcJsFunctions_autosizeJs,
	"../src/js/functions/_checkForPageChanged.js": SrcJsFunctions_checkforpagechangedJs,
	"../src/js/functions/_checkPathParsed.js": SrcJsFunctions_checkpathparsedJs,
	"../src/js/functions/_checkPathSlashes.js": SrcJsFunctions_checkpathslashesJs,
	"../src/js/functions/_checkRenameUri.js": SrcJsFunctions_checkrenameuriJs,
	"../src/js/functions/_collectionHelpers.js": SrcJsFunctions_collectionhelpersJs,
	"../src/js/functions/_copyPath.js": SrcJsFunctions_copypathJs,
	"../src/js/functions/_createCollection.js": SrcJsFunctions_createcollectionJs,
	"../src/js/functions/_createWorkspace.js": SrcJsFunctions_createworkspaceJs,
	"../src/js/functions/_deleteTeam.js": SrcJsFunctions_deleteteamJs,
	"../src/js/functions/_deleteUnpublishedVersion.js": SrcJsFunctions_deleteunpublishedversionJs,
	"../src/js/functions/_deleteUser.js": SrcJsFunctions_deleteuserJs,
	"../src/js/functions/_editAddDataset.js": SrcJsFunctions_editadddatasetJs,
	"../src/js/functions/_editAddFile.js": SrcJsFunctions_editaddfileJs,
	"../src/js/functions/_editAddFileWithDetails.js": SrcJsFunctions_editaddfilewithdetailsJs,
	"../src/js/functions/_editAlert.js": SrcJsFunctions_editalertJs,
	"../src/js/functions/_editBlocks.js": SrcJsFunctions_editblocksJs,
	"../src/js/functions/_editCollection.js": SrcJsFunctions_editcollectionJs,
	"../src/js/functions/_editDatasetVersion.js": SrcJsFunctions_editdatasetversionJs,
	"../src/js/functions/_editDate.js": SrcJsFunctions_editdateJs,
	"../src/js/functions/_editDocWithFilesCorrection.js": SrcJsFunctions_editdocwithfilescorrectionJs,
	"../src/js/functions/_editDocumentCorrection.js": SrcJsFunctions_editdocumentcorrectionJs,
	"../src/js/functions/_editIntLinks.js": SrcJsFunctions_editintlinksJs,
	"../src/js/functions/_editMarkdownOneObject.js": SrcJsFunctions_editmarkdownoneobjectJs,
	"../src/js/functions/_editMarkdownWithNoTitle.js": SrcJsFunctions_editmarkdownwithnotitleJs,
	"../src/js/functions/_editServiceMessage.js": SrcJsFunctions_editservicemessageJs,
	"../src/js/functions/_editTopics.js": SrcJsFunctions_edittopicsJs,
	"../src/js/functions/_environment.js": SrcJsFunctions_environmentJs,
	"../src/js/functions/_externalLinkAccordionSection.js": SrcJsFunctions_externallinkaccordionsectionJs,
	"../src/js/functions/_fileDelete.js": SrcJsFunctions_filedeleteJs,
	"../src/js/functions/_fileUpload.js": SrcJsFunctions_fileuploadJs,
	"../src/js/functions/_getLastPosition.js": SrcJsFunctions_getlastpositionJs,
	"../src/js/functions/_getNetworkStatus.js": SrcJsFunctions_getnetworkstatusJs,
	"../src/js/functions/_getParentPage.js": SrcJsFunctions_getparentpageJs,
	"../src/js/functions/_getPathNameTrimLast.js": SrcJsFunctions_getpathnametrimlastJs,
	"../src/js/functions/_getPreviewUrl.js": SrcJsFunctions_getpreviewurlJs,
	"../src/js/functions/_handleApiError.js": SrcJsFunctions_handleapierrorJs,
	"../src/js/functions/_initialiseNoteMarkdown.js": SrcJsFunctions_initialisenotemarkdownJs,
	"../src/js/functions/_inputValidation.js": SrcJsFunctions_inputvalidationJs,
	"../src/js/functions/_loadBrowseScreen.js": SrcJsFunctions_loadbrowsescreenJs,
	"../src/js/functions/_loadChartBuilder.js": SrcJsFunctions_loadchartbuilderJs,
	"../src/js/functions/_loadChartsList.js": SrcJsFunctions_loadchartslistJs,
	"../src/js/functions/_loadCreateScreen.js": SrcJsFunctions_loadcreatescreenJs,
	"../src/js/functions/_loadCreator.js": SrcJsFunctions_loadcreatorJs,
	"../src/js/functions/_loadCreatorDatepicker.js": SrcJsFunctions_loadcreatordatepickerJs,
	"../src/js/functions/_loadEmbedIframe.js": SrcJsFunctions_loadembediframeJs,
	"../src/js/functions/_loadEquationBuilder.js": SrcJsFunctions_loadequationbuilderJs,
	"../src/js/functions/_loadEquationsList.js": SrcJsFunctions_loadequationslistJs,
	"../src/js/functions/_loadImageBuilder.js": SrcJsFunctions_loadimagebuilderJs,
	"../src/js/functions/_loadImagesList.js": SrcJsFunctions_loadimageslistJs,
	"../src/js/functions/_loadImportScreen.js": SrcJsFunctions_loadimportscreenJs,
	"../src/js/functions/_loadMarkdownEditor.js": SrcJsFunctions_loadmarkdowneditorJs,
	"../src/js/functions/_loadPageDataIntoEditor.js": SrcJsFunctions_loadpagedataintoeditorJs,
	"../src/js/functions/_loadParentLink.js": SrcJsFunctions_loadparentlinkJs,
	"../src/js/functions/_loadT16Creator.js": SrcJsFunctions_loadt16creatorJs,
	"../src/js/functions/_loadT4Creator.js": SrcJsFunctions_loadt4creatorJs,
	"../src/js/functions/_loadT6Creator.js": SrcJsFunctions_loadt6creatorJs,
	"../src/js/functions/_loadT7Creator.js": SrcJsFunctions_loadt7creatorJs,
	"../src/js/functions/_loadT8DatasetCreator.js": SrcJsFunctions_loadt8datasetcreatorJs,
	"../src/js/functions/_loadT8LandingCreator.js": SrcJsFunctions_loadt8landingcreatorJs,
	"../src/js/functions/_loadTableBuilder.js": SrcJsFunctions_loadtablebuilderJs,
	"../src/js/functions/_loadTablesList.js": SrcJsFunctions_loadtableslistJs,
	"../src/js/functions/_loadVisCreator.js": SrcJsFunctions_loadviscreatorJs,
	"../src/js/functions/_logout.js": SrcJsFunctions_logoutJs,
	"../src/js/functions/_makeUrl.js": SrcJsFunctions_makeurlJs,
	"../src/js/functions/_markdownContentAccordionSection.js": SrcJsFunctions_markdowncontentaccordionsectionJs,
	"../src/js/functions/_markdownSetLines.js": SrcJsFunctions_markdownsetlinesJs,
	"../src/js/functions/_menuSelectSettings.js": SrcJsFunctions_menuselectsettingsJs,
	"../src/js/functions/_moveBrowseNode.js": SrcJsFunctions_movebrowsenodeJs,
	"../src/js/functions/_parseUrl.js": SrcJsFunctions_parseurlJs,
	"../src/js/functions/_postApproveCollection.js": SrcJsFunctions_postapprovecollectionJs,
	"../src/js/functions/_postComplete.js": SrcJsFunctions_postcompleteJs,
	"../src/js/functions/_postContent.js": SrcJsFunctions_postcontentJs,
	"../src/js/functions/_postLogin.js": SrcJsFunctions_postloginJs,
	"../src/js/functions/_postReview.js": SrcJsFunctions_postreviewJs,
	"../src/js/functions/_postTeam.js": SrcJsFunctions_postteamJs,
	"../src/js/functions/_postUser.js": SrcJsFunctions_postuserJs,
	"../src/js/functions/_publish.js": SrcJsFunctions_publishJs,
	"../src/js/functions/_refreshPreview.js": SrcJsFunctions_refreshpreviewJs,
	"../src/js/functions/_relatedItemAccordionSection.js": SrcJsFunctions_relateditemaccordionsectionJs,
	"../src/js/functions/_renameChildren.js": SrcJsFunctions_renamechildrenJs,
	"../src/js/functions/_renameContent.js": SrcJsFunctions_renamecontentJs,
	"../src/js/functions/_renderAccordionSections.js": SrcJsFunctions_renderaccordionsectionsJs,
	"../src/js/functions/_reset.js": SrcJsFunctions_resetJs,
	"../src/js/functions/_saveContent.js": SrcJsFunctions_savecontentJs,
	"../src/js/functions/_saveNewCorrection.js": SrcJsFunctions_savenewcorrectionJs,
	"../src/js/functions/_setShortcuts.js": SrcJsFunctions_setshortcutsJs,
	"../src/js/functions/_setupFlorence.js": SrcJsFunctions_setupflorenceJs,
	"../src/js/functions/_t16ReleaseEditor.js": SrcJsFunctions_t16releaseeditorJs,
	"../src/js/functions/_t1Editor.js": SrcJsFunctions_t1editorJs,
	"../src/js/functions/_t1EditorCensus.js": SrcJsFunctions_t1editorcensusJs,
	"../src/js/functions/_t2Editor.js": SrcJsFunctions_t2editorJs,
	"../src/js/functions/_t3Editor.js": SrcJsFunctions_t3editorJs,
	"../src/js/functions/_t4ArticleDownloadEditor.js": SrcJsFunctions_t4articledownloadeditorJs,
	"../src/js/functions/_t4ArticleEditor.js": SrcJsFunctions_t4articleeditorJs,
	"../src/js/functions/_t4BulletinEditor.js": SrcJsFunctions_t4bulletineditorJs,
	"../src/js/functions/_t5TimeseriesEditor.js": SrcJsFunctions_t5timeserieseditorJs,
	"../src/js/functions/_t6CompendiumChapterEditor.js": SrcJsFunctions_t6compendiumchaptereditorJs,
	"../src/js/functions/_t6CompendiumDataEditor.js": SrcJsFunctions_t6compendiumdataeditorJs,
	"../src/js/functions/_t6CompendiumEditor.js": SrcJsFunctions_t6compendiumeditorJs,
	"../src/js/functions/_t7AdHocEditor.js": SrcJsFunctions_t7adhoceditorJs,
	"../src/js/functions/_t7FoiEditor.js": SrcJsFunctions_t7foieditorJs,
	"../src/js/functions/_t7MethodologyDownloadEditor.js": SrcJsFunctions_t7methodologydownloadeditorJs,
	"../src/js/functions/_t7MethodologyEditor.js": SrcJsFunctions_t7methodologyeditorJs,
	"../src/js/functions/_t7QmiEditor.js": SrcJsFunctions_t7qmieditorJs,
	"../src/js/functions/_t7StaticArticleEditor.js": SrcJsFunctions_t7staticarticleeditorJs,
	"../src/js/functions/_t7StaticLandingPageEditor.js": SrcJsFunctions_t7staticlandingpageeditorJs,
	"../src/js/functions/_t7StaticPageEditor.js": SrcJsFunctions_t7staticpageeditorJs,
	"../src/js/functions/_t8DatasetEditor.js": SrcJsFunctions_t8dataseteditorJs,
	"../src/js/functions/_t8LandingPageEditor.js": SrcJsFunctions_t8landingpageeditorJs,
	"../src/js/functions/_transfer.js": SrcJsFunctions_transferJs,
	"../src/js/functions/_treeNodeSelect.js": SrcJsFunctions_treenodeselectJs,
	"../src/js/functions/_ui.js": SrcJsFunctions_uiJs,
	"../src/js/functions/_uiTidyup.js": SrcJsFunctions_uitidyupJs,
	"../src/js/functions/_updateContent.js": SrcJsFunctions_updatecontentJs,
	"../src/js/functions/_viewChangePassword.js": SrcJsFunctions_viewchangepasswordJs,
	"../src/js/functions/_viewCollectionDetails.js": SrcJsFunctions_viewcollectiondetailsJs,
	"../src/js/functions/_viewCollections.js": SrcJsFunctions_viewcollectionsJs,
	"../src/js/functions/_viewController.js": SrcJsFunctions_viewcontrollerJs,
	"../src/js/functions/_viewLogIn.js": SrcJsFunctions_viewloginJs,
	"../src/js/functions/_viewPublish.js": SrcJsFunctions_viewpublishJs,
	"../src/js/functions/_viewPublishDetails.js": SrcJsFunctions_viewpublishdetailsJs,
	"../src/js/functions/_viewReleaseSelector.js": SrcJsFunctions_viewreleaseselectorJs,
	"../src/js/functions/_viewReportDetails.js": SrcJsFunctions_viewreportdetailsJs,
	"../src/js/functions/_viewReports.js": SrcJsFunctions_viewreportsJs,
	"../src/js/functions/_viewTeamDetails.js": SrcJsFunctions_viewteamdetailsJs,
	"../src/js/functions/_viewTeams.js": SrcJsFunctions_viewteamsJs,
	"../src/js/functions/_viewUserDetails.js": SrcJsFunctions_viewuserdetailsJs,
	"../src/js/functions/_viewUsers.js": SrcJsFunctions_viewusersJs,
	"../src/js/functions/_viewWorkspace.js": SrcJsFunctions_viewworkspaceJs,
	"../src/js/functions/_visualisationEditor.js": SrcJsFunctions_visualisationeditorJs,
	"../src/js/functions/registerServiceWorker.js": SrcJsFunctionsRegisterserviceworkerJs,
	"../src/js/third-party/Markdown.Converter.js": SrcJsThirdPartyMarkdownConverterJs,
	"../src/js/third-party/Markdown.Editor.js": SrcJsThirdPartyMarkdownEditorJs,
	"../src/js/third-party/Markdown.Extra.js": SrcJsThirdPartyMarkdownExtraJs,
	"../src/js/third-party/Markdown.Sanitizer.js": SrcJsThirdPartyMarkdownSanitizerJs,
	"../src/js/third-party/ZeroClipboard.min.js": SrcJsThirdPartyZeroclipboardMinJs,
	"../src/js/third-party/ZeroClipboard.swf": SrcJsThirdPartyZeroclipboardSwf,
	"../src/js/third-party/autosize.js": SrcJsThirdPartyAutosizeJs,
	"../src/js/third-party/clipboard.min.js": SrcJsThirdPartyClipboardMinJs,
	"../src/js/third-party/handlebars.runtime.min.js": SrcJsThirdPartyHandlebarsRuntimeMinJs,
	"../src/js/third-party/highcharts-more.js": SrcJsThirdPartyHighchartsMoreJs,
	"../src/js/third-party/highcharts.js": SrcJsThirdPartyHighchartsJs,
	"../src/js/third-party/jquery-ui-timepicker-addon.js": SrcJsThirdPartyJqueryUiTimepickerAddonJs,
	"../src/js/third-party/jquery-ui.js": SrcJsThirdPartyJqueryUiJs,
	"../src/js/third-party/jquery.hotkeys.js": SrcJsThirdPartyJqueryHotkeysJs,
	"../src/js/third-party/mathjax/MathJax.js": SrcJsThirdPartyMathjaxMathjaxJs,
	"../src/js/third-party/mathjax/config/AM_CHTML-full.js": SrcJsThirdPartyMathjaxConfigAm_chtmlFullJs,
	"../src/js/third-party/mathjax/config/AM_CHTML.js": SrcJsThirdPartyMathjaxConfigAm_chtmlJs,
	"../src/js/third-party/mathjax/config/AM_HTMLorMML-full.js": SrcJsThirdPartyMathjaxConfigAm_htmlormmlFullJs,
	"../src/js/third-party/mathjax/config/AM_HTMLorMML.js": SrcJsThirdPartyMathjaxConfigAm_htmlormmlJs,
	"../src/js/third-party/mathjax/config/AM_SVG-full.js": SrcJsThirdPartyMathjaxConfigAm_svgFullJs,
	"../src/js/third-party/mathjax/config/AM_SVG.js": SrcJsThirdPartyMathjaxConfigAm_svgJs,
	"../src/js/third-party/mathjax/config/Accessible-full.js": SrcJsThirdPartyMathjaxConfigAccessibleFullJs,
	"../src/js/third-party/mathjax/config/Accessible.js": SrcJsThirdPartyMathjaxConfigAccessibleJs,
	"../src/js/third-party/mathjax/config/MML_CHTML-full.js": SrcJsThirdPartyMathjaxConfigMml_chtmlFullJs,
	"../src/js/third-party/mathjax/config/MML_CHTML.js": SrcJsThirdPartyMathjaxConfigMml_chtmlJs,
	"../src/js/third-party/mathjax/config/MML_HTMLorMML-full.js": SrcJsThirdPartyMathjaxConfigMml_htmlormmlFullJs,
	"../src/js/third-party/mathjax/config/MML_HTMLorMML.js": SrcJsThirdPartyMathjaxConfigMml_htmlormmlJs,
	"../src/js/third-party/mathjax/config/MML_SVG-full.js": SrcJsThirdPartyMathjaxConfigMml_svgFullJs,
	"../src/js/third-party/mathjax/config/MML_SVG.js": SrcJsThirdPartyMathjaxConfigMml_svgJs,
	"../src/js/third-party/mathjax/config/MMLorHTML.js": SrcJsThirdPartyMathjaxConfigMmlorhtmlJs,
	"../src/js/third-party/mathjax/config/Safe.js": SrcJsThirdPartyMathjaxConfigSafeJs,
	"../src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML-full.js": SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlFullJs,
	"../src/js/third-party/mathjax/config/TeX-AMS-MML_HTMLorMML.js": SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlJs,
	"../src/js/third-party/mathjax/config/TeX-AMS-MML_SVG-full.js": SrcJsThirdPartyMathjaxConfigTexAmsMml_svgFullJs,
	"../src/js/third-party/mathjax/config/TeX-AMS-MML_SVG.js": SrcJsThirdPartyMathjaxConfigTexAmsMml_svgJs,
	"../src/js/third-party/mathjax/config/TeX-AMS_CHTML-full.js": SrcJsThirdPartyMathjaxConfigTexAms_chtmlFullJs,
	"../src/js/third-party/mathjax/config/TeX-AMS_CHTML.js": SrcJsThirdPartyMathjaxConfigTexAms_chtmlJs,
	"../src/js/third-party/mathjax/config/TeX-AMS_HTML-full.js": SrcJsThirdPartyMathjaxConfigTexAms_htmlFullJs,
	"../src/js/third-party/mathjax/config/TeX-AMS_HTML.js": SrcJsThirdPartyMathjaxConfigTexAms_htmlJs,
	"../src/js/third-party/mathjax/config/TeX-AMS_SVG-full.js": SrcJsThirdPartyMathjaxConfigTexAms_svgFullJs,
	"../src/js/third-party/mathjax/config/TeX-AMS_SVG.js": SrcJsThirdPartyMathjaxConfigTexAms_svgJs,
	"../src/js/third-party/mathjax/config/TeX-MML-AM_CHTML-full.js": SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlFullJs,
	"../src/js/third-party/mathjax/config/TeX-MML-AM_CHTML.js": SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlJs,
	"../src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML-full.js": SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlFullJs,
	"../src/js/third-party/mathjax/config/TeX-MML-AM_HTMLorMML.js": SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlJs,
	"../src/js/third-party/mathjax/config/TeX-MML-AM_SVG-full.js": SrcJsThirdPartyMathjaxConfigTexMmlAm_svgFullJs,
	"../src/js/third-party/mathjax/config/TeX-MML-AM_SVG.js": SrcJsThirdPartyMathjaxConfigTexMmlAm_svgJs,
	"../src/js/third-party/mathjax/config/default.js": SrcJsThirdPartyMathjaxConfigDefaultJs,
	"../src/js/third-party/mathjax/config/local/local.js": SrcJsThirdPartyMathjaxConfigLocalLocalJs,
	"../src/js/third-party/mathjax/extensions/AssistiveMML.js": SrcJsThirdPartyMathjaxExtensionsAssistivemmlJs,
	"../src/js/third-party/mathjax/extensions/CHTML-preview.js": SrcJsThirdPartyMathjaxExtensionsChtmlPreviewJs,
	"../src/js/third-party/mathjax/extensions/FontWarnings.js": SrcJsThirdPartyMathjaxExtensionsFontwarningsJs,
	"../src/js/third-party/mathjax/extensions/HTML-CSS/handle-floats.js": SrcJsThirdPartyMathjaxExtensionsHtmlCssHandleFloatsJs,
	"../src/js/third-party/mathjax/extensions/HelpDialog.js": SrcJsThirdPartyMathjaxExtensionsHelpdialogJs,
	"../src/js/third-party/mathjax/extensions/MatchWebFonts.js": SrcJsThirdPartyMathjaxExtensionsMatchwebfontsJs,
	"../src/js/third-party/mathjax/extensions/MathEvents.js": SrcJsThirdPartyMathjaxExtensionsMatheventsJs,
	"../src/js/third-party/mathjax/extensions/MathML/content-mathml.js": SrcJsThirdPartyMathjaxExtensionsMathmlContentMathmlJs,
	"../src/js/third-party/mathjax/extensions/MathML/mml3.js": SrcJsThirdPartyMathjaxExtensionsMathmlMml3Js,
	"../src/js/third-party/mathjax/extensions/MathMenu.js": SrcJsThirdPartyMathjaxExtensionsMathmenuJs,
	"../src/js/third-party/mathjax/extensions/MathZoom.js": SrcJsThirdPartyMathjaxExtensionsMathzoomJs,
	"../src/js/third-party/mathjax/extensions/Safe.js": SrcJsThirdPartyMathjaxExtensionsSafeJs,
	"../src/js/third-party/mathjax/extensions/TeX/AMScd.js": SrcJsThirdPartyMathjaxExtensionsTexAmscdJs,
	"../src/js/third-party/mathjax/extensions/TeX/AMSmath.js": SrcJsThirdPartyMathjaxExtensionsTexAmsmathJs,
	"../src/js/third-party/mathjax/extensions/TeX/AMSsymbols.js": SrcJsThirdPartyMathjaxExtensionsTexAmssymbolsJs,
	"../src/js/third-party/mathjax/extensions/TeX/HTML.js": SrcJsThirdPartyMathjaxExtensionsTexHtmlJs,
	"../src/js/third-party/mathjax/extensions/TeX/action.js": SrcJsThirdPartyMathjaxExtensionsTexActionJs,
	"../src/js/third-party/mathjax/extensions/TeX/autobold.js": SrcJsThirdPartyMathjaxExtensionsTexAutoboldJs,
	"../src/js/third-party/mathjax/extensions/TeX/autoload-all.js": SrcJsThirdPartyMathjaxExtensionsTexAutoloadAllJs,
	"../src/js/third-party/mathjax/extensions/TeX/bbox.js": SrcJsThirdPartyMathjaxExtensionsTexBboxJs,
	"../src/js/third-party/mathjax/extensions/TeX/begingroup.js": SrcJsThirdPartyMathjaxExtensionsTexBegingroupJs,
	"../src/js/third-party/mathjax/extensions/TeX/boldsymbol.js": SrcJsThirdPartyMathjaxExtensionsTexBoldsymbolJs,
	"../src/js/third-party/mathjax/extensions/TeX/cancel.js": SrcJsThirdPartyMathjaxExtensionsTexCancelJs,
	"../src/js/third-party/mathjax/extensions/TeX/color.js": SrcJsThirdPartyMathjaxExtensionsTexColorJs,
	"../src/js/third-party/mathjax/extensions/TeX/enclose.js": SrcJsThirdPartyMathjaxExtensionsTexEncloseJs,
	"../src/js/third-party/mathjax/extensions/TeX/extpfeil.js": SrcJsThirdPartyMathjaxExtensionsTexExtpfeilJs,
	"../src/js/third-party/mathjax/extensions/TeX/mathchoice.js": SrcJsThirdPartyMathjaxExtensionsTexMathchoiceJs,
	"../src/js/third-party/mathjax/extensions/TeX/mediawiki-texvc.js": SrcJsThirdPartyMathjaxExtensionsTexMediawikiTexvcJs,
	"../src/js/third-party/mathjax/extensions/TeX/mhchem.js": SrcJsThirdPartyMathjaxExtensionsTexMhchemJs,
	"../src/js/third-party/mathjax/extensions/TeX/newcommand.js": SrcJsThirdPartyMathjaxExtensionsTexNewcommandJs,
	"../src/js/third-party/mathjax/extensions/TeX/noErrors.js": SrcJsThirdPartyMathjaxExtensionsTexNoerrorsJs,
	"../src/js/third-party/mathjax/extensions/TeX/noUndefined.js": SrcJsThirdPartyMathjaxExtensionsTexNoundefinedJs,
	"../src/js/third-party/mathjax/extensions/TeX/unicode.js": SrcJsThirdPartyMathjaxExtensionsTexUnicodeJs,
	"../src/js/third-party/mathjax/extensions/TeX/verb.js": SrcJsThirdPartyMathjaxExtensionsTexVerbJs,
	"../src/js/third-party/mathjax/extensions/asciimath2jax.js": SrcJsThirdPartyMathjaxExtensionsAsciimath2jaxJs,
	"../src/js/third-party/mathjax/extensions/fast-preview.js": SrcJsThirdPartyMathjaxExtensionsFastPreviewJs,
	"../src/js/third-party/mathjax/extensions/jsMath2jax.js": SrcJsThirdPartyMathjaxExtensionsJsmath2jaxJs,
	"../src/js/third-party/mathjax/extensions/mml2jax.js": SrcJsThirdPartyMathjaxExtensionsMml2jaxJs,
	"../src/js/third-party/mathjax/extensions/tex2jax.js": SrcJsThirdPartyMathjaxExtensionsTex2jaxJs,
	"../src/js/third-party/mathjax/extensions/toMathML.js": SrcJsThirdPartyMathjaxExtensionsTomathmlJs,
	"../src/js/third-party/mathjax/jax/element/mml/jax.js": SrcJsThirdPartyMathjaxJaxElementMmlJaxJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/Arrows.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableArrowsJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/BasicLatin.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableBasiclatinJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/CombDiactForSymbols.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiactforsymbolsJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/Dingbats.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableDingbatsJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/MathOperators.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsA.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsaJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/MiscMathSymbolsB.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsbJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/MiscSymbolsAndArrows.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscsymbolsandarrowsJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/MiscTechnical.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableMisctechnicalJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsA.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsaJs,
	"../src/js/third-party/mathjax/jax/element/mml/optable/SupplementalArrowsB.js": SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsbJs,
	"../src/js/third-party/mathjax/jax/input/AsciiMath/config.js": SrcJsThirdPartyMathjaxJaxInputAsciimathConfigJs,
	"../src/js/third-party/mathjax/jax/input/AsciiMath/jax.js": SrcJsThirdPartyMathjaxJaxInputAsciimathJaxJs,
	"../src/js/third-party/mathjax/jax/input/MathML/config.js": SrcJsThirdPartyMathjaxJaxInputMathmlConfigJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/a.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesAJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/b.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesBJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/c.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesCJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/d.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesDJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/e.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesEJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/f.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/fr.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFrJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/g.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesGJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/h.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesHJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/i.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesIJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/j.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesJJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/k.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesKJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/l.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesLJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/m.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesMJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/n.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesNJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/o.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/opf.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOpfJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/p.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesPJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/q.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesQJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/r.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesRJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/s.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesSJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/scr.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesScrJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/t.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesTJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/u.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesUJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/v.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesVJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/w.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesWJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/x.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesXJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/y.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesYJs,
	"../src/js/third-party/mathjax/jax/input/MathML/entities/z.js": SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesZJs,
	"../src/js/third-party/mathjax/jax/input/MathML/jax.js": SrcJsThirdPartyMathjaxJaxInputMathmlJaxJs,
	"../src/js/third-party/mathjax/jax/input/TeX/config.js": SrcJsThirdPartyMathjaxJaxInputTexConfigJs,
	"../src/js/third-party/mathjax/jax/input/TeX/jax.js": SrcJsThirdPartyMathjaxJaxInputTexJaxJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/annotation-xml.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadAnnotationXmlJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/maction.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMactionJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/menclose.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMencloseJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mglyph.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMglyphJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mmultiscripts.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMmultiscriptsJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/ms.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMsJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/mtable.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMtableJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/autoload/multiline.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMultilineJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/config.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlConfigJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/AMS-Regular.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexAmsRegularJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Caligraphic-Bold.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexCaligraphicBoldJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Bold.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturBoldJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Fraktur-Regular.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturRegularJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Main-Bold.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMainBoldJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Math-BoldItalic.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMathBolditalicJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Bold.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifBoldJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Italic.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifItalicJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/SansSerif-Regular.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifRegularJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Script-Regular.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexScriptRegularJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/Typewriter-Regular.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexTypewriterRegularJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/fonts/TeX/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataJs,
	"../src/js/third-party/mathjax/jax/output/CommonHTML/jax.js": SrcJsThirdPartyMathjaxJaxOutputCommonhtmlJaxJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/annotation-xml.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadAnnotationXmlJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/maction.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMactionJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/menclose.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMencloseJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mglyph.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMglyphJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mmultiscripts.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMmultiscriptsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/ms.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/mtable.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMtableJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/autoload/multiline.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMultilineJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/blank.gif": SrcJsThirdPartyMathjaxJaxOutputHtmlCssBlankGif,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/config.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssConfigJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Asana-Math/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Pagella/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Gyre-Termes/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Size7/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize7RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Latin-Modern/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/AlphaPresentForms.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldAlphapresentformsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Arrows.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldArrowsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BBBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBbboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoldFraktur.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoldfrakturJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/BoxDrawing.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoxdrawingJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CombDiactForSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiactforsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/ControlPictures.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldControlpicturesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/CurrencySymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCurrencysymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Cyrillic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCyrillicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/EnclosedAlphanum.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldEnclosedalphanumJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/GreekSSBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekssboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/IPAExtensions.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldIpaextensionsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedAdditional.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedadditionalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LatinExtendedD.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendeddJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MathSSBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathssboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscMathSymbolsB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/MiscTechnical.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMisctechnicalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/NumberForms.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldNumberformsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/PhoneticExtensions.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldPhoneticextensionsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuperAndSubscripts.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuperandsubscriptsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Bold/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/AlphaPresentForms.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicAlphapresentformsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/BoxDrawing.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBoxdrawingJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CombDiactForSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCombdiactforsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/ControlPictures.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicControlpicturesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/CurrencySymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCurrencysymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Cyrillic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCyrillicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/EnclosedAlphanum.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicEnclosedalphanumJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekBoldItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekbolditalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/GreekSSBoldItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekssbolditalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/IPAExtensions.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicIpaextensionsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedAdditional.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedadditionalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathbolditalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathBoldScript.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathboldscriptJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/MathSSItalicBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathssitalicboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/BoldItalic/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/AlphaPresentForms.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicAlphapresentformsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/BoxDrawing.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicBoxdrawingJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CombDiactForSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCombdiactforsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ControlPictures.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicControlpicturesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/CurrencySymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCurrencysymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Cyrillic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCyrillicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/EnclosedAlphanum.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicEnclosedalphanumJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/GreekItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekitalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/IPAExtensions.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIpaextensionsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedAdditional.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedadditionalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathitalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathSSItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathssitalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/MathScript.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathscriptJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Italic/ij.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIjJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/AlphaPresentForms.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularAlphapresentformsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Arrows.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularArrowsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BBBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBbboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BlockElements.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBlockelementsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoldFraktur.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoldfrakturJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/BoxDrawing.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoxdrawingJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CJK.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCjkJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CombDiactForSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiactforsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ControlPictures.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularControlpicturesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/CurrencySymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCurrencysymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Cyrillic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCyrillicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Dingbats.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularDingbatsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/EnclosedAlphanum.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularEnclosedalphanumJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Fraktur.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularFrakturJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekBoldItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekbolditalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekitalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/GreekSSBoldItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssbolditalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Hiragana.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularHiraganaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/IPAExtensions.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIpaextensionsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedAdditional.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedadditionalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LatinExtendedD.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendeddJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathbolditalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathBoldScript.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldscriptJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathitalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSS.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathSSItalicBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathScript.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathscriptJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MathTT.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathttJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscMathSymbolsB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscSymbolsAndArrows.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsandarrowsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/MiscTechnical.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMisctechnicalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/NumberForms.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularNumberformsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/PhoneticExtensions.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularPhoneticextensionsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/Specials.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpecialsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuperAndSubscripts.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuperandsubscriptsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/SupplementalArrowsB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/General/Regular/ij.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIjJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsD/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsSm/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUp/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpD/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/IntegralsUpSm/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Bold/PrivateUse.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldPrivateuseJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/BoldItalic/PrivateUse.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicPrivateuseJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Italic/PrivateUse.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicPrivateuseJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/NonUnicode/Regular/PrivateUse.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularPrivateuseJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFiveSym/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeFourSym/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeOneSym/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeThreeSym/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/SizeTwoSym/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/All.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularAllJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-1.0.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdata10Js,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-beta.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataBetaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Normal/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/STIX-Web/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Arrows.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularArrowsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BBBold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBbboldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/BoxDrawing.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBoxdrawingJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Dingbats.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularDingbatsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/EnclosedAlphanum.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularEnclosedalphanumJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscmathsymbolsbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/MiscTechnical.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMisctechnicalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/PUA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularPuaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/AMS/Regular/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Caligraphic/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/Other.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldOtherJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Bold/PUA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldPuaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/Other.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularOtherJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Fraktur/Regular/PUA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularPuaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Greek/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Arrows.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldArrowsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/CombDiactForSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiactforsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscMathSymbolsA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscmathsymbolsaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/MiscTechnical.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMisctechnicalJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Bold/SupplementalArrowsA.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSupplementalarrowsaJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Main/Regular/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Math/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Bold/Other.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldOtherJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Italic/Other.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicOtherJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/SansSerif/Regular/Other.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularOtherJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Script/Regular/Other.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularOtherJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/Typewriter/Regular/Other.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularOtherJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinChrome/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinchromeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/AMS.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularAmsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Bold.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularBoldJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/WinIE6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/fonts/TeX/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/imageFonts.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssImagefontsJs,
	"../src/js/third-party/mathjax/jax/output/HTML-CSS/jax.js": SrcJsThirdPartyMathjaxJaxOutputHtmlCssJaxJs,
	"../src/js/third-party/mathjax/jax/output/NativeMML/config.js": SrcJsThirdPartyMathjaxJaxOutputNativemmlConfigJs,
	"../src/js/third-party/mathjax/jax/output/NativeMML/jax.js": SrcJsThirdPartyMathjaxJaxOutputNativemmlJaxJs,
	"../src/js/third-party/mathjax/jax/output/PlainSource/config.js": SrcJsThirdPartyMathjaxJaxOutputPlainsourceConfigJs,
	"../src/js/third-party/mathjax/jax/output/PlainSource/jax.js": SrcJsThirdPartyMathjaxJaxOutputPlainsourceJaxJs,
	"../src/js/third-party/mathjax/jax/output/PreviewHTML/config.js": SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlConfigJs,
	"../src/js/third-party/mathjax/jax/output/PreviewHTML/jax.js": SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlJaxJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/annotation-xml.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadAnnotationXmlJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/maction.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMactionJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/menclose.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMencloseJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/mglyph.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMglyphJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/mmultiscripts.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMmultiscriptsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/ms.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/mtable.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMtableJs,
	"../src/js/third-party/mathjax/jax/output/SVG/autoload/multiline.js": SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMultilineJs,
	"../src/js/third-party/mathjax/jax/output/SVG/config.js": SrcJsThirdPartyMathjaxJaxOutputSvgConfigJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Asana-Math/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Pagella/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Gyre-Termes/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size6/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize6RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Size7/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize7RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Latin-Modern/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/NonUnicode/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNonunicodeRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Normal/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNormalRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/Neo-Euler/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Alphabets/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Arrows/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/DoubleStruck/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Latin/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Marks/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Misc/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Monospace/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMonospaceRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Normal/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Operators/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Shapes/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Size5/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize5RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Symbols/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/Variants/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/STIX-Web/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Arrows.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularArrowsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/BoxDrawing.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularBoxdrawingJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Dingbats.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularDingbatsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/EnclosedAlphanum.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularEnclosedalphanumJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscMathSymbolsB.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscmathsymbolsbJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/MiscTechnical.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMisctechnicalJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/PUA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularPuaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/AMS/Regular/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Caligraphic/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/Other.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldOtherJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Bold/PUA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldPuaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/Other.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularOtherJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Fraktur/Regular/PUA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularPuaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Arrows.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldArrowsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/CombDiactForSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiactforsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Latin1Supplement.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatin1supplementJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscMathSymbolsA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscmathsymbolsaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/MiscTechnical.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMisctechnicalJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Bold/SupplementalArrowsA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSupplementalarrowsaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GeneralPunctuation.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGeneralpunctuationJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Italic/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GeometricShapes.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGeometricshapesJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/GreekAndCoptic.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGreekandcopticJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedA.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedaJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LatinExtendedB.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedbJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/LetterlikeSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLetterlikesymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MathOperators.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/MiscSymbols.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMiscsymbolsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SpacingModLetters.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSpacingmodlettersJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Main/Regular/SuppMathOperators.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSuppmathoperatorsJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/BoldItalic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathBolditalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Math/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Bold/Other.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldOtherJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Italic/Other.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicOtherJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/SansSerif/Regular/Other.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularOtherJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Script/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size1/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize1RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size2/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize2RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size3/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize3RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Size4/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize4RegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/BasicLatin.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularBasiclatinJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/CombDiacritMarks.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularCombdiacritmarksJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Main.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularMainJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/Typewriter/Regular/Other.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularOtherJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata-extra.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataExtraJs,
	"../src/js/third-party/mathjax/jax/output/SVG/fonts/TeX/fontdata.js": SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataJs,
	"../src/js/third-party/mathjax/jax/output/SVG/jax.js": SrcJsThirdPartyMathjaxJaxOutputSvgJaxJs,
	"../src/js/third-party/mathjax/localization/ast/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationAstFontwarningsJs,
	"../src/js/third-party/mathjax/localization/ast/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationAstHtmlCssJs,
	"../src/js/third-party/mathjax/localization/ast/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationAstHelpdialogJs,
	"../src/js/third-party/mathjax/localization/ast/MathML.js": SrcJsThirdPartyMathjaxLocalizationAstMathmlJs,
	"../src/js/third-party/mathjax/localization/ast/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationAstMathmenuJs,
	"../src/js/third-party/mathjax/localization/ast/TeX.js": SrcJsThirdPartyMathjaxLocalizationAstTexJs,
	"../src/js/third-party/mathjax/localization/ast/ast.js": SrcJsThirdPartyMathjaxLocalizationAstAstJs,
	"../src/js/third-party/mathjax/localization/bcc/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationBccFontwarningsJs,
	"../src/js/third-party/mathjax/localization/bcc/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationBccHtmlCssJs,
	"../src/js/third-party/mathjax/localization/bcc/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationBccHelpdialogJs,
	"../src/js/third-party/mathjax/localization/bcc/MathML.js": SrcJsThirdPartyMathjaxLocalizationBccMathmlJs,
	"../src/js/third-party/mathjax/localization/bcc/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationBccMathmenuJs,
	"../src/js/third-party/mathjax/localization/bcc/TeX.js": SrcJsThirdPartyMathjaxLocalizationBccTexJs,
	"../src/js/third-party/mathjax/localization/bcc/bcc.js": SrcJsThirdPartyMathjaxLocalizationBccBccJs,
	"../src/js/third-party/mathjax/localization/bg/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationBgFontwarningsJs,
	"../src/js/third-party/mathjax/localization/bg/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationBgHtmlCssJs,
	"../src/js/third-party/mathjax/localization/bg/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationBgHelpdialogJs,
	"../src/js/third-party/mathjax/localization/bg/MathML.js": SrcJsThirdPartyMathjaxLocalizationBgMathmlJs,
	"../src/js/third-party/mathjax/localization/bg/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationBgMathmenuJs,
	"../src/js/third-party/mathjax/localization/bg/TeX.js": SrcJsThirdPartyMathjaxLocalizationBgTexJs,
	"../src/js/third-party/mathjax/localization/bg/bg.js": SrcJsThirdPartyMathjaxLocalizationBgBgJs,
	"../src/js/third-party/mathjax/localization/br/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationBrFontwarningsJs,
	"../src/js/third-party/mathjax/localization/br/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationBrHtmlCssJs,
	"../src/js/third-party/mathjax/localization/br/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationBrHelpdialogJs,
	"../src/js/third-party/mathjax/localization/br/MathML.js": SrcJsThirdPartyMathjaxLocalizationBrMathmlJs,
	"../src/js/third-party/mathjax/localization/br/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationBrMathmenuJs,
	"../src/js/third-party/mathjax/localization/br/TeX.js": SrcJsThirdPartyMathjaxLocalizationBrTexJs,
	"../src/js/third-party/mathjax/localization/br/br.js": SrcJsThirdPartyMathjaxLocalizationBrBrJs,
	"../src/js/third-party/mathjax/localization/ca/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationCaFontwarningsJs,
	"../src/js/third-party/mathjax/localization/ca/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationCaHtmlCssJs,
	"../src/js/third-party/mathjax/localization/ca/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationCaHelpdialogJs,
	"../src/js/third-party/mathjax/localization/ca/MathML.js": SrcJsThirdPartyMathjaxLocalizationCaMathmlJs,
	"../src/js/third-party/mathjax/localization/ca/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationCaMathmenuJs,
	"../src/js/third-party/mathjax/localization/ca/TeX.js": SrcJsThirdPartyMathjaxLocalizationCaTexJs,
	"../src/js/third-party/mathjax/localization/ca/ca.js": SrcJsThirdPartyMathjaxLocalizationCaCaJs,
	"../src/js/third-party/mathjax/localization/cdo/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationCdoFontwarningsJs,
	"../src/js/third-party/mathjax/localization/cdo/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationCdoHtmlCssJs,
	"../src/js/third-party/mathjax/localization/cdo/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationCdoHelpdialogJs,
	"../src/js/third-party/mathjax/localization/cdo/MathML.js": SrcJsThirdPartyMathjaxLocalizationCdoMathmlJs,
	"../src/js/third-party/mathjax/localization/cdo/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationCdoMathmenuJs,
	"../src/js/third-party/mathjax/localization/cdo/TeX.js": SrcJsThirdPartyMathjaxLocalizationCdoTexJs,
	"../src/js/third-party/mathjax/localization/cdo/cdo.js": SrcJsThirdPartyMathjaxLocalizationCdoCdoJs,
	"../src/js/third-party/mathjax/localization/ce/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationCeFontwarningsJs,
	"../src/js/third-party/mathjax/localization/ce/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationCeHtmlCssJs,
	"../src/js/third-party/mathjax/localization/ce/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationCeHelpdialogJs,
	"../src/js/third-party/mathjax/localization/ce/MathML.js": SrcJsThirdPartyMathjaxLocalizationCeMathmlJs,
	"../src/js/third-party/mathjax/localization/ce/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationCeMathmenuJs,
	"../src/js/third-party/mathjax/localization/ce/TeX.js": SrcJsThirdPartyMathjaxLocalizationCeTexJs,
	"../src/js/third-party/mathjax/localization/ce/ce.js": SrcJsThirdPartyMathjaxLocalizationCeCeJs,
	"../src/js/third-party/mathjax/localization/cs/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationCsFontwarningsJs,
	"../src/js/third-party/mathjax/localization/cs/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationCsHtmlCssJs,
	"../src/js/third-party/mathjax/localization/cs/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationCsHelpdialogJs,
	"../src/js/third-party/mathjax/localization/cs/MathML.js": SrcJsThirdPartyMathjaxLocalizationCsMathmlJs,
	"../src/js/third-party/mathjax/localization/cs/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationCsMathmenuJs,
	"../src/js/third-party/mathjax/localization/cs/TeX.js": SrcJsThirdPartyMathjaxLocalizationCsTexJs,
	"../src/js/third-party/mathjax/localization/cs/cs.js": SrcJsThirdPartyMathjaxLocalizationCsCsJs,
	"../src/js/third-party/mathjax/localization/cy/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationCyFontwarningsJs,
	"../src/js/third-party/mathjax/localization/cy/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationCyHtmlCssJs,
	"../src/js/third-party/mathjax/localization/cy/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationCyHelpdialogJs,
	"../src/js/third-party/mathjax/localization/cy/MathML.js": SrcJsThirdPartyMathjaxLocalizationCyMathmlJs,
	"../src/js/third-party/mathjax/localization/cy/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationCyMathmenuJs,
	"../src/js/third-party/mathjax/localization/cy/TeX.js": SrcJsThirdPartyMathjaxLocalizationCyTexJs,
	"../src/js/third-party/mathjax/localization/cy/cy.js": SrcJsThirdPartyMathjaxLocalizationCyCyJs,
	"../src/js/third-party/mathjax/localization/da/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationDaFontwarningsJs,
	"../src/js/third-party/mathjax/localization/da/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationDaHtmlCssJs,
	"../src/js/third-party/mathjax/localization/da/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationDaHelpdialogJs,
	"../src/js/third-party/mathjax/localization/da/MathML.js": SrcJsThirdPartyMathjaxLocalizationDaMathmlJs,
	"../src/js/third-party/mathjax/localization/da/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationDaMathmenuJs,
	"../src/js/third-party/mathjax/localization/da/TeX.js": SrcJsThirdPartyMathjaxLocalizationDaTexJs,
	"../src/js/third-party/mathjax/localization/da/da.js": SrcJsThirdPartyMathjaxLocalizationDaDaJs,
	"../src/js/third-party/mathjax/localization/de/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationDeFontwarningsJs,
	"../src/js/third-party/mathjax/localization/de/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationDeHtmlCssJs,
	"../src/js/third-party/mathjax/localization/de/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationDeHelpdialogJs,
	"../src/js/third-party/mathjax/localization/de/MathML.js": SrcJsThirdPartyMathjaxLocalizationDeMathmlJs,
	"../src/js/third-party/mathjax/localization/de/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationDeMathmenuJs,
	"../src/js/third-party/mathjax/localization/de/TeX.js": SrcJsThirdPartyMathjaxLocalizationDeTexJs,
	"../src/js/third-party/mathjax/localization/de/de.js": SrcJsThirdPartyMathjaxLocalizationDeDeJs,
	"../src/js/third-party/mathjax/localization/en/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationEnFontwarningsJs,
	"../src/js/third-party/mathjax/localization/en/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationEnHtmlCssJs,
	"../src/js/third-party/mathjax/localization/en/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationEnHelpdialogJs,
	"../src/js/third-party/mathjax/localization/en/MathML.js": SrcJsThirdPartyMathjaxLocalizationEnMathmlJs,
	"../src/js/third-party/mathjax/localization/en/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationEnMathmenuJs,
	"../src/js/third-party/mathjax/localization/en/TeX.js": SrcJsThirdPartyMathjaxLocalizationEnTexJs,
	"../src/js/third-party/mathjax/localization/en/en.js": SrcJsThirdPartyMathjaxLocalizationEnEnJs,
	"../src/js/third-party/mathjax/localization/eo/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationEoFontwarningsJs,
	"../src/js/third-party/mathjax/localization/eo/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationEoHtmlCssJs,
	"../src/js/third-party/mathjax/localization/eo/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationEoHelpdialogJs,
	"../src/js/third-party/mathjax/localization/eo/MathML.js": SrcJsThirdPartyMathjaxLocalizationEoMathmlJs,
	"../src/js/third-party/mathjax/localization/eo/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationEoMathmenuJs,
	"../src/js/third-party/mathjax/localization/eo/TeX.js": SrcJsThirdPartyMathjaxLocalizationEoTexJs,
	"../src/js/third-party/mathjax/localization/eo/eo.js": SrcJsThirdPartyMathjaxLocalizationEoEoJs,
	"../src/js/third-party/mathjax/localization/es/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationEsFontwarningsJs,
	"../src/js/third-party/mathjax/localization/es/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationEsHtmlCssJs,
	"../src/js/third-party/mathjax/localization/es/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationEsHelpdialogJs,
	"../src/js/third-party/mathjax/localization/es/MathML.js": SrcJsThirdPartyMathjaxLocalizationEsMathmlJs,
	"../src/js/third-party/mathjax/localization/es/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationEsMathmenuJs,
	"../src/js/third-party/mathjax/localization/es/TeX.js": SrcJsThirdPartyMathjaxLocalizationEsTexJs,
	"../src/js/third-party/mathjax/localization/es/es.js": SrcJsThirdPartyMathjaxLocalizationEsEsJs,
	"../src/js/third-party/mathjax/localization/fa/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationFaFontwarningsJs,
	"../src/js/third-party/mathjax/localization/fa/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationFaHtmlCssJs,
	"../src/js/third-party/mathjax/localization/fa/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationFaHelpdialogJs,
	"../src/js/third-party/mathjax/localization/fa/MathML.js": SrcJsThirdPartyMathjaxLocalizationFaMathmlJs,
	"../src/js/third-party/mathjax/localization/fa/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationFaMathmenuJs,
	"../src/js/third-party/mathjax/localization/fa/TeX.js": SrcJsThirdPartyMathjaxLocalizationFaTexJs,
	"../src/js/third-party/mathjax/localization/fa/fa.js": SrcJsThirdPartyMathjaxLocalizationFaFaJs,
	"../src/js/third-party/mathjax/localization/fi/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationFiFontwarningsJs,
	"../src/js/third-party/mathjax/localization/fi/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationFiHtmlCssJs,
	"../src/js/third-party/mathjax/localization/fi/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationFiHelpdialogJs,
	"../src/js/third-party/mathjax/localization/fi/MathML.js": SrcJsThirdPartyMathjaxLocalizationFiMathmlJs,
	"../src/js/third-party/mathjax/localization/fi/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationFiMathmenuJs,
	"../src/js/third-party/mathjax/localization/fi/TeX.js": SrcJsThirdPartyMathjaxLocalizationFiTexJs,
	"../src/js/third-party/mathjax/localization/fi/fi.js": SrcJsThirdPartyMathjaxLocalizationFiFiJs,
	"../src/js/third-party/mathjax/localization/fr/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationFrFontwarningsJs,
	"../src/js/third-party/mathjax/localization/fr/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationFrHtmlCssJs,
	"../src/js/third-party/mathjax/localization/fr/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationFrHelpdialogJs,
	"../src/js/third-party/mathjax/localization/fr/MathML.js": SrcJsThirdPartyMathjaxLocalizationFrMathmlJs,
	"../src/js/third-party/mathjax/localization/fr/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationFrMathmenuJs,
	"../src/js/third-party/mathjax/localization/fr/TeX.js": SrcJsThirdPartyMathjaxLocalizationFrTexJs,
	"../src/js/third-party/mathjax/localization/fr/fr.js": SrcJsThirdPartyMathjaxLocalizationFrFrJs,
	"../src/js/third-party/mathjax/localization/gl/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationGlFontwarningsJs,
	"../src/js/third-party/mathjax/localization/gl/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationGlHtmlCssJs,
	"../src/js/third-party/mathjax/localization/gl/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationGlHelpdialogJs,
	"../src/js/third-party/mathjax/localization/gl/MathML.js": SrcJsThirdPartyMathjaxLocalizationGlMathmlJs,
	"../src/js/third-party/mathjax/localization/gl/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationGlMathmenuJs,
	"../src/js/third-party/mathjax/localization/gl/TeX.js": SrcJsThirdPartyMathjaxLocalizationGlTexJs,
	"../src/js/third-party/mathjax/localization/gl/gl.js": SrcJsThirdPartyMathjaxLocalizationGlGlJs,
	"../src/js/third-party/mathjax/localization/he/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationHeFontwarningsJs,
	"../src/js/third-party/mathjax/localization/he/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationHeHtmlCssJs,
	"../src/js/third-party/mathjax/localization/he/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationHeHelpdialogJs,
	"../src/js/third-party/mathjax/localization/he/MathML.js": SrcJsThirdPartyMathjaxLocalizationHeMathmlJs,
	"../src/js/third-party/mathjax/localization/he/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationHeMathmenuJs,
	"../src/js/third-party/mathjax/localization/he/TeX.js": SrcJsThirdPartyMathjaxLocalizationHeTexJs,
	"../src/js/third-party/mathjax/localization/he/he.js": SrcJsThirdPartyMathjaxLocalizationHeHeJs,
	"../src/js/third-party/mathjax/localization/ia/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationIaFontwarningsJs,
	"../src/js/third-party/mathjax/localization/ia/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationIaHtmlCssJs,
	"../src/js/third-party/mathjax/localization/ia/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationIaHelpdialogJs,
	"../src/js/third-party/mathjax/localization/ia/MathML.js": SrcJsThirdPartyMathjaxLocalizationIaMathmlJs,
	"../src/js/third-party/mathjax/localization/ia/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationIaMathmenuJs,
	"../src/js/third-party/mathjax/localization/ia/TeX.js": SrcJsThirdPartyMathjaxLocalizationIaTexJs,
	"../src/js/third-party/mathjax/localization/ia/ia.js": SrcJsThirdPartyMathjaxLocalizationIaIaJs,
	"../src/js/third-party/mathjax/localization/it/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationItFontwarningsJs,
	"../src/js/third-party/mathjax/localization/it/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationItHtmlCssJs,
	"../src/js/third-party/mathjax/localization/it/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationItHelpdialogJs,
	"../src/js/third-party/mathjax/localization/it/MathML.js": SrcJsThirdPartyMathjaxLocalizationItMathmlJs,
	"../src/js/third-party/mathjax/localization/it/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationItMathmenuJs,
	"../src/js/third-party/mathjax/localization/it/TeX.js": SrcJsThirdPartyMathjaxLocalizationItTexJs,
	"../src/js/third-party/mathjax/localization/it/it.js": SrcJsThirdPartyMathjaxLocalizationItItJs,
	"../src/js/third-party/mathjax/localization/ja/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationJaFontwarningsJs,
	"../src/js/third-party/mathjax/localization/ja/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationJaHtmlCssJs,
	"../src/js/third-party/mathjax/localization/ja/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationJaHelpdialogJs,
	"../src/js/third-party/mathjax/localization/ja/MathML.js": SrcJsThirdPartyMathjaxLocalizationJaMathmlJs,
	"../src/js/third-party/mathjax/localization/ja/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationJaMathmenuJs,
	"../src/js/third-party/mathjax/localization/ja/TeX.js": SrcJsThirdPartyMathjaxLocalizationJaTexJs,
	"../src/js/third-party/mathjax/localization/ja/ja.js": SrcJsThirdPartyMathjaxLocalizationJaJaJs,
	"../src/js/third-party/mathjax/localization/kn/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationKnFontwarningsJs,
	"../src/js/third-party/mathjax/localization/kn/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationKnHtmlCssJs,
	"../src/js/third-party/mathjax/localization/kn/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationKnHelpdialogJs,
	"../src/js/third-party/mathjax/localization/kn/MathML.js": SrcJsThirdPartyMathjaxLocalizationKnMathmlJs,
	"../src/js/third-party/mathjax/localization/kn/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationKnMathmenuJs,
	"../src/js/third-party/mathjax/localization/kn/TeX.js": SrcJsThirdPartyMathjaxLocalizationKnTexJs,
	"../src/js/third-party/mathjax/localization/kn/kn.js": SrcJsThirdPartyMathjaxLocalizationKnKnJs,
	"../src/js/third-party/mathjax/localization/ko/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationKoFontwarningsJs,
	"../src/js/third-party/mathjax/localization/ko/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationKoHtmlCssJs,
	"../src/js/third-party/mathjax/localization/ko/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationKoHelpdialogJs,
	"../src/js/third-party/mathjax/localization/ko/MathML.js": SrcJsThirdPartyMathjaxLocalizationKoMathmlJs,
	"../src/js/third-party/mathjax/localization/ko/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationKoMathmenuJs,
	"../src/js/third-party/mathjax/localization/ko/TeX.js": SrcJsThirdPartyMathjaxLocalizationKoTexJs,
	"../src/js/third-party/mathjax/localization/ko/ko.js": SrcJsThirdPartyMathjaxLocalizationKoKoJs,
	"../src/js/third-party/mathjax/localization/lb/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationLbFontwarningsJs,
	"../src/js/third-party/mathjax/localization/lb/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationLbHtmlCssJs,
	"../src/js/third-party/mathjax/localization/lb/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationLbHelpdialogJs,
	"../src/js/third-party/mathjax/localization/lb/MathML.js": SrcJsThirdPartyMathjaxLocalizationLbMathmlJs,
	"../src/js/third-party/mathjax/localization/lb/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationLbMathmenuJs,
	"../src/js/third-party/mathjax/localization/lb/TeX.js": SrcJsThirdPartyMathjaxLocalizationLbTexJs,
	"../src/js/third-party/mathjax/localization/lb/lb.js": SrcJsThirdPartyMathjaxLocalizationLbLbJs,
	"../src/js/third-party/mathjax/localization/lki/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationLkiFontwarningsJs,
	"../src/js/third-party/mathjax/localization/lki/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationLkiHtmlCssJs,
	"../src/js/third-party/mathjax/localization/lki/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationLkiHelpdialogJs,
	"../src/js/third-party/mathjax/localization/lki/MathML.js": SrcJsThirdPartyMathjaxLocalizationLkiMathmlJs,
	"../src/js/third-party/mathjax/localization/lki/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationLkiMathmenuJs,
	"../src/js/third-party/mathjax/localization/lki/TeX.js": SrcJsThirdPartyMathjaxLocalizationLkiTexJs,
	"../src/js/third-party/mathjax/localization/lki/lki.js": SrcJsThirdPartyMathjaxLocalizationLkiLkiJs,
	"../src/js/third-party/mathjax/localization/lt/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationLtFontwarningsJs,
	"../src/js/third-party/mathjax/localization/lt/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationLtHtmlCssJs,
	"../src/js/third-party/mathjax/localization/lt/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationLtHelpdialogJs,
	"../src/js/third-party/mathjax/localization/lt/MathML.js": SrcJsThirdPartyMathjaxLocalizationLtMathmlJs,
	"../src/js/third-party/mathjax/localization/lt/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationLtMathmenuJs,
	"../src/js/third-party/mathjax/localization/lt/TeX.js": SrcJsThirdPartyMathjaxLocalizationLtTexJs,
	"../src/js/third-party/mathjax/localization/lt/lt.js": SrcJsThirdPartyMathjaxLocalizationLtLtJs,
	"../src/js/third-party/mathjax/localization/mk/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationMkFontwarningsJs,
	"../src/js/third-party/mathjax/localization/mk/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationMkHtmlCssJs,
	"../src/js/third-party/mathjax/localization/mk/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationMkHelpdialogJs,
	"../src/js/third-party/mathjax/localization/mk/MathML.js": SrcJsThirdPartyMathjaxLocalizationMkMathmlJs,
	"../src/js/third-party/mathjax/localization/mk/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationMkMathmenuJs,
	"../src/js/third-party/mathjax/localization/mk/TeX.js": SrcJsThirdPartyMathjaxLocalizationMkTexJs,
	"../src/js/third-party/mathjax/localization/mk/mk.js": SrcJsThirdPartyMathjaxLocalizationMkMkJs,
	"../src/js/third-party/mathjax/localization/nl/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationNlFontwarningsJs,
	"../src/js/third-party/mathjax/localization/nl/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationNlHtmlCssJs,
	"../src/js/third-party/mathjax/localization/nl/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationNlHelpdialogJs,
	"../src/js/third-party/mathjax/localization/nl/MathML.js": SrcJsThirdPartyMathjaxLocalizationNlMathmlJs,
	"../src/js/third-party/mathjax/localization/nl/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationNlMathmenuJs,
	"../src/js/third-party/mathjax/localization/nl/TeX.js": SrcJsThirdPartyMathjaxLocalizationNlTexJs,
	"../src/js/third-party/mathjax/localization/nl/nl.js": SrcJsThirdPartyMathjaxLocalizationNlNlJs,
	"../src/js/third-party/mathjax/localization/oc/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationOcFontwarningsJs,
	"../src/js/third-party/mathjax/localization/oc/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationOcHtmlCssJs,
	"../src/js/third-party/mathjax/localization/oc/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationOcHelpdialogJs,
	"../src/js/third-party/mathjax/localization/oc/MathML.js": SrcJsThirdPartyMathjaxLocalizationOcMathmlJs,
	"../src/js/third-party/mathjax/localization/oc/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationOcMathmenuJs,
	"../src/js/third-party/mathjax/localization/oc/TeX.js": SrcJsThirdPartyMathjaxLocalizationOcTexJs,
	"../src/js/third-party/mathjax/localization/oc/oc.js": SrcJsThirdPartyMathjaxLocalizationOcOcJs,
	"../src/js/third-party/mathjax/localization/pl/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationPlFontwarningsJs,
	"../src/js/third-party/mathjax/localization/pl/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationPlHtmlCssJs,
	"../src/js/third-party/mathjax/localization/pl/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationPlHelpdialogJs,
	"../src/js/third-party/mathjax/localization/pl/MathML.js": SrcJsThirdPartyMathjaxLocalizationPlMathmlJs,
	"../src/js/third-party/mathjax/localization/pl/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationPlMathmenuJs,
	"../src/js/third-party/mathjax/localization/pl/TeX.js": SrcJsThirdPartyMathjaxLocalizationPlTexJs,
	"../src/js/third-party/mathjax/localization/pl/pl.js": SrcJsThirdPartyMathjaxLocalizationPlPlJs,
	"../src/js/third-party/mathjax/localization/pt/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationPtFontwarningsJs,
	"../src/js/third-party/mathjax/localization/pt/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationPtHtmlCssJs,
	"../src/js/third-party/mathjax/localization/pt/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationPtHelpdialogJs,
	"../src/js/third-party/mathjax/localization/pt/MathML.js": SrcJsThirdPartyMathjaxLocalizationPtMathmlJs,
	"../src/js/third-party/mathjax/localization/pt/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationPtMathmenuJs,
	"../src/js/third-party/mathjax/localization/pt/TeX.js": SrcJsThirdPartyMathjaxLocalizationPtTexJs,
	"../src/js/third-party/mathjax/localization/pt/pt.js": SrcJsThirdPartyMathjaxLocalizationPtPtJs,
	"../src/js/third-party/mathjax/localization/pt-br/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationPtBrFontwarningsJs,
	"../src/js/third-party/mathjax/localization/pt-br/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationPtBrHtmlCssJs,
	"../src/js/third-party/mathjax/localization/pt-br/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationPtBrHelpdialogJs,
	"../src/js/third-party/mathjax/localization/pt-br/MathML.js": SrcJsThirdPartyMathjaxLocalizationPtBrMathmlJs,
	"../src/js/third-party/mathjax/localization/pt-br/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationPtBrMathmenuJs,
	"../src/js/third-party/mathjax/localization/pt-br/TeX.js": SrcJsThirdPartyMathjaxLocalizationPtBrTexJs,
	"../src/js/third-party/mathjax/localization/pt-br/pt-br.js": SrcJsThirdPartyMathjaxLocalizationPtBrPtBrJs,
	"../src/js/third-party/mathjax/localization/qqq/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationQqqFontwarningsJs,
	"../src/js/third-party/mathjax/localization/qqq/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationQqqHtmlCssJs,
	"../src/js/third-party/mathjax/localization/qqq/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationQqqHelpdialogJs,
	"../src/js/third-party/mathjax/localization/qqq/MathML.js": SrcJsThirdPartyMathjaxLocalizationQqqMathmlJs,
	"../src/js/third-party/mathjax/localization/qqq/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationQqqMathmenuJs,
	"../src/js/third-party/mathjax/localization/qqq/TeX.js": SrcJsThirdPartyMathjaxLocalizationQqqTexJs,
	"../src/js/third-party/mathjax/localization/qqq/qqq.js": SrcJsThirdPartyMathjaxLocalizationQqqQqqJs,
	"../src/js/third-party/mathjax/localization/ru/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationRuFontwarningsJs,
	"../src/js/third-party/mathjax/localization/ru/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationRuHtmlCssJs,
	"../src/js/third-party/mathjax/localization/ru/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationRuHelpdialogJs,
	"../src/js/third-party/mathjax/localization/ru/MathML.js": SrcJsThirdPartyMathjaxLocalizationRuMathmlJs,
	"../src/js/third-party/mathjax/localization/ru/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationRuMathmenuJs,
	"../src/js/third-party/mathjax/localization/ru/TeX.js": SrcJsThirdPartyMathjaxLocalizationRuTexJs,
	"../src/js/third-party/mathjax/localization/ru/ru.js": SrcJsThirdPartyMathjaxLocalizationRuRuJs,
	"../src/js/third-party/mathjax/localization/scn/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationScnFontwarningsJs,
	"../src/js/third-party/mathjax/localization/scn/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationScnHtmlCssJs,
	"../src/js/third-party/mathjax/localization/scn/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationScnHelpdialogJs,
	"../src/js/third-party/mathjax/localization/scn/MathML.js": SrcJsThirdPartyMathjaxLocalizationScnMathmlJs,
	"../src/js/third-party/mathjax/localization/scn/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationScnMathmenuJs,
	"../src/js/third-party/mathjax/localization/scn/TeX.js": SrcJsThirdPartyMathjaxLocalizationScnTexJs,
	"../src/js/third-party/mathjax/localization/scn/scn.js": SrcJsThirdPartyMathjaxLocalizationScnScnJs,
	"../src/js/third-party/mathjax/localization/sco/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationScoFontwarningsJs,
	"../src/js/third-party/mathjax/localization/sco/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationScoHtmlCssJs,
	"../src/js/third-party/mathjax/localization/sco/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationScoHelpdialogJs,
	"../src/js/third-party/mathjax/localization/sco/MathML.js": SrcJsThirdPartyMathjaxLocalizationScoMathmlJs,
	"../src/js/third-party/mathjax/localization/sco/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationScoMathmenuJs,
	"../src/js/third-party/mathjax/localization/sco/TeX.js": SrcJsThirdPartyMathjaxLocalizationScoTexJs,
	"../src/js/third-party/mathjax/localization/sco/sco.js": SrcJsThirdPartyMathjaxLocalizationScoScoJs,
	"../src/js/third-party/mathjax/localization/sl/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationSlFontwarningsJs,
	"../src/js/third-party/mathjax/localization/sl/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationSlHtmlCssJs,
	"../src/js/third-party/mathjax/localization/sl/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationSlHelpdialogJs,
	"../src/js/third-party/mathjax/localization/sl/MathML.js": SrcJsThirdPartyMathjaxLocalizationSlMathmlJs,
	"../src/js/third-party/mathjax/localization/sl/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationSlMathmenuJs,
	"../src/js/third-party/mathjax/localization/sl/TeX.js": SrcJsThirdPartyMathjaxLocalizationSlTexJs,
	"../src/js/third-party/mathjax/localization/sl/sl.js": SrcJsThirdPartyMathjaxLocalizationSlSlJs,
	"../src/js/third-party/mathjax/localization/sv/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationSvFontwarningsJs,
	"../src/js/third-party/mathjax/localization/sv/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationSvHtmlCssJs,
	"../src/js/third-party/mathjax/localization/sv/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationSvHelpdialogJs,
	"../src/js/third-party/mathjax/localization/sv/MathML.js": SrcJsThirdPartyMathjaxLocalizationSvMathmlJs,
	"../src/js/third-party/mathjax/localization/sv/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationSvMathmenuJs,
	"../src/js/third-party/mathjax/localization/sv/TeX.js": SrcJsThirdPartyMathjaxLocalizationSvTexJs,
	"../src/js/third-party/mathjax/localization/sv/sv.js": SrcJsThirdPartyMathjaxLocalizationSvSvJs,
	"../src/js/third-party/mathjax/localization/tr/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationTrFontwarningsJs,
	"../src/js/third-party/mathjax/localization/tr/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationTrHtmlCssJs,
	"../src/js/third-party/mathjax/localization/tr/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationTrHelpdialogJs,
	"../src/js/third-party/mathjax/localization/tr/MathML.js": SrcJsThirdPartyMathjaxLocalizationTrMathmlJs,
	"../src/js/third-party/mathjax/localization/tr/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationTrMathmenuJs,
	"../src/js/third-party/mathjax/localization/tr/TeX.js": SrcJsThirdPartyMathjaxLocalizationTrTexJs,
	"../src/js/third-party/mathjax/localization/tr/tr.js": SrcJsThirdPartyMathjaxLocalizationTrTrJs,
	"../src/js/third-party/mathjax/localization/uk/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationUkFontwarningsJs,
	"../src/js/third-party/mathjax/localization/uk/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationUkHtmlCssJs,
	"../src/js/third-party/mathjax/localization/uk/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationUkHelpdialogJs,
	"../src/js/third-party/mathjax/localization/uk/MathML.js": SrcJsThirdPartyMathjaxLocalizationUkMathmlJs,
	"../src/js/third-party/mathjax/localization/uk/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationUkMathmenuJs,
	"../src/js/third-party/mathjax/localization/uk/TeX.js": SrcJsThirdPartyMathjaxLocalizationUkTexJs,
	"../src/js/third-party/mathjax/localization/uk/uk.js": SrcJsThirdPartyMathjaxLocalizationUkUkJs,
	"../src/js/third-party/mathjax/localization/vi/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationViFontwarningsJs,
	"../src/js/third-party/mathjax/localization/vi/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationViHtmlCssJs,
	"../src/js/third-party/mathjax/localization/vi/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationViHelpdialogJs,
	"../src/js/third-party/mathjax/localization/vi/MathML.js": SrcJsThirdPartyMathjaxLocalizationViMathmlJs,
	"../src/js/third-party/mathjax/localization/vi/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationViMathmenuJs,
	"../src/js/third-party/mathjax/localization/vi/TeX.js": SrcJsThirdPartyMathjaxLocalizationViTexJs,
	"../src/js/third-party/mathjax/localization/vi/vi.js": SrcJsThirdPartyMathjaxLocalizationViViJs,
	"../src/js/third-party/mathjax/localization/zh-hans/FontWarnings.js": SrcJsThirdPartyMathjaxLocalizationZhHansFontwarningsJs,
	"../src/js/third-party/mathjax/localization/zh-hans/HTML-CSS.js": SrcJsThirdPartyMathjaxLocalizationZhHansHtmlCssJs,
	"../src/js/third-party/mathjax/localization/zh-hans/HelpDialog.js": SrcJsThirdPartyMathjaxLocalizationZhHansHelpdialogJs,
	"../src/js/third-party/mathjax/localization/zh-hans/MathML.js": SrcJsThirdPartyMathjaxLocalizationZhHansMathmlJs,
	"../src/js/third-party/mathjax/localization/zh-hans/MathMenu.js": SrcJsThirdPartyMathjaxLocalizationZhHansMathmenuJs,
	"../src/js/third-party/mathjax/localization/zh-hans/TeX.js": SrcJsThirdPartyMathjaxLocalizationZhHansTexJs,
	"../src/js/third-party/mathjax/localization/zh-hans/zh-hans.js": SrcJsThirdPartyMathjaxLocalizationZhHansZhHansJs,
	"../src/js/third-party/sweetalert.min.js": SrcJsThirdPartySweetalertMinJs,
	"../src/js/third-party/tag-it.js": SrcJsThirdPartyTagItJs,
	"../src/js/third-party/underscore-min.js": SrcJsThirdPartyUnderscoreMinJs,
	"../src/js/third-party/underscore-min.map": SrcJsThirdPartyUnderscoreMinMap,
	"../src/js/zebedee-api/_deleteCollection.js": SrcJsZebedeeApi_deletecollectionJs,
	"../src/js/zebedee-api/_deleteContent.js": SrcJsZebedeeApi_deletecontentJs,
	"../src/js/zebedee-api/_deleteEquation.js": SrcJsZebedeeApi_deleteequationJs,
	"../src/js/zebedee-api/_getCollection.js": SrcJsZebedeeApi_getcollectionJs,
	"../src/js/zebedee-api/_getPageData.js": SrcJsZebedeeApi_getpagedataJs,
	"../src/js/zebedee-api/_getPageResource.js": SrcJsZebedeeApi_getpageresourceJs,
	"../src/js/zebedee-api/_getTeams.js": SrcJsZebedeeApi_getteamsJs,
	"../src/js/zebedee-api/_getUserPermission.js": SrcJsZebedeeApi_getuserpermissionJs,
	"../src/js/zebedee-api/_getUsers.js": SrcJsZebedeeApi_getusersJs,
	"../src/js/zebedee-api/_moveContent.js": SrcJsZebedeeApi_movecontentJs,
	"../src/js/zebedee-api/_postPassword.js": SrcJsZebedeeApi_postpasswordJs,
	"../src/js/zebedee-api/_postPermission.js": SrcJsZebedeeApi_postpermissionJs,
	"../src/js/zebedee-api/_putContent.js": SrcJsZebedeeApi_putcontentJs,
	"../src/manifest.json": SrcManifestJson,
	"../src/package.json": SrcPackageJson,
	"../src/scss/components/_accordion.scss": SrcScssComponents_accordionScss,
	"../src/scss/components/_builder.scss": SrcScssComponents_builderScss,
	"../src/scss/components/_icons.scss": SrcScssComponents_iconsScss,
	"../src/scss/components/_markdown-editor.scss": SrcScssComponents_markdownEditorScss,
	"../src/scss/components/_network-status.scss": SrcScssComponents_networkStatusScss,
	"../src/scss/components/_page.scss": SrcScssComponents_pageScss,
	"../src/scss/components/_slider.scss": SrcScssComponents_sliderScss,
	"../src/scss/elements/_buttons.scss": SrcScssElements_buttonsScss,
	"../src/scss/elements/_forms.scss": SrcScssElements_formsScss,
	"../src/scss/elements/_inputs.scss": SrcScssElements_inputsScss,
	"../src/scss/elements/_nav.scss": SrcScssElements_navScss,
	"../src/scss/elements/_tables.scss": SrcScssElements_tablesScss,
	"../src/scss/elements/_typography.scss": SrcScssElements_typographyScss,
	"../src/scss/main.scss": SrcScssMainScss,
	"../src/scss/partials/_base.scss": SrcScssPartials_baseScss,
	"../src/scss/partials/_collections.scss": SrcScssPartials_collectionsScss,
	"../src/scss/partials/_colour-palette.scss": SrcScssPartials_colourPaletteScss,
	"../src/scss/partials/_elements.scss": SrcScssPartials_elementsScss,
	"../src/scss/partials/_fonts.scss": SrcScssPartials_fontsScss,
	"../src/scss/partials/_jqui.scss": SrcScssPartials_jquiScss,
	"../src/scss/partials/_publish.scss": SrcScssPartials_publishScss,
	"../src/scss/partials/_reset.scss": SrcScssPartials_resetScss,
	"../src/scss/partials/_shame.scss": SrcScssPartials_shameScss,
	"../src/scss/partials/_utilities.scss": SrcScssPartials_utilitiesScss,
	"../src/scss/partials/_workspace.scss": SrcScssPartials_workspaceScss,
	"../src/scss/utilities/_display.scss": SrcScssUtilities_displayScss,
	"../src/scss/utilities/_grid.scss": SrcScssUtilities_gridScss,
	"../src/scss/utilities/_margin.scss": SrcScssUtilities_marginScss,
	"../src/scss/utilities/_mixins.scss": SrcScssUtilities_mixinsScss,
	"../src/scss/utilities/_padding.scss": SrcScssUtilities_paddingScss,
	"../src/scss/utilities/_panels.scss": SrcScssUtilities_panelsScss,
	"../src/scss/utilities/_utilities.scss": SrcScssUtilities_utilitiesScss,
	"../src/service-worker.js": SrcServiceWorkerJs,
	"../src/spec/classes/FlorenceSpec.js": SrcSpecClassesFlorencespecJs,
	"../src/spec/classes/PathUtilsSpec.js": SrcSpecClassesPathutilsspecJs,
	"../src/spec/classes/StringUtilsSpec.js": SrcSpecClassesStringutilsspecJs,
	"../src/spec/support/jasmine.json": SrcSpecSupportJasmineJson,
	"../src/templates/blockModal.handlebars": SrcTemplatesBlockmodalHandlebars,
	"../src/templates/blockNewsModal.handlebars": SrcTemplatesBlocknewsmodalHandlebars,
	"../src/templates/browseNode.handlebars": SrcTemplatesBrowsenodeHandlebars,
	"../src/templates/browseNodeDataVis.handlebars": SrcTemplatesBrowsenodedatavisHandlebars,
	"../src/templates/changePassword.handlebars": SrcTemplatesChangepasswordHandlebars,
	"../src/templates/chartBuilder.handlebars": SrcTemplatesChartbuilderHandlebars,
	"../src/templates/chartEditBarChartExtras.handlebars": SrcTemplatesCharteditbarchartextrasHandlebars,
	"../src/templates/chartEditBarlineExtras.handlebars": SrcTemplatesCharteditbarlineextrasHandlebars,
	"../src/templates/chartEditDualAxisExtras.handlebars": SrcTemplatesCharteditdualaxisextrasHandlebars,
	"../src/templates/chartEditLineChartExtras.handlebars": SrcTemplatesCharteditlinechartextrasHandlebars,
	"../src/templates/childDeletes.handlebars": SrcTemplatesChilddeletesHandlebars,
	"../src/templates/collectionDetails.handlebars": SrcTemplatesCollectiondetailsHandlebars,
	"../src/templates/collectionEdit.handlebars": SrcTemplatesCollectioneditHandlebars,
	"../src/templates/collectionList.handlebars": SrcTemplatesCollectionlistHandlebars,
	"../src/templates/editNav.handlebars": SrcTemplatesEditnavHandlebars,
	"../src/templates/editNavChild.handlebars": SrcTemplatesEditnavchildHandlebars,
	"../src/templates/editorAlert.handlebars": SrcTemplatesEditoralertHandlebars,
	"../src/templates/editorCompendiumDatasetFiles.handlebars": SrcTemplatesEditorcompendiumdatasetfilesHandlebars,
	"../src/templates/editorContent.handlebars": SrcTemplatesEditorcontentHandlebars,
	"../src/templates/editorContentNoTitle.handlebars": SrcTemplatesEditorcontentnotitleHandlebars,
	"../src/templates/editorContentOne.handlebars": SrcTemplatesEditorcontentoneHandlebars,
	"../src/templates/editorCorrection.handlebars": SrcTemplatesEditorcorrectionHandlebars,
	"../src/templates/editorDate.handlebars": SrcTemplatesEditordateHandlebars,
	"../src/templates/editorDocWithFiles.handlebars": SrcTemplatesEditordocwithfilesHandlebars,
	"../src/templates/editorDownloads.handlebars": SrcTemplatesEditordownloadsHandlebars,
	"../src/templates/editorDownloadsWithSummary.handlebars": SrcTemplatesEditordownloadswithsummaryHandlebars,
	"../src/templates/editorLinks.handlebars": SrcTemplatesEditorlinksHandlebars,
	"../src/templates/editorRelated.handlebars": SrcTemplatesEditorrelatedHandlebars,
	"../src/templates/editorServiceMessage.handlebars": SrcTemplatesEditorservicemessageHandlebars,
	"../src/templates/editorT1Blocks.handlebars": SrcTemplatesEditort1blocksHandlebars,
	"../src/templates/editorTopics.handlebars": SrcTemplatesEditortopicsHandlebars,
	"../src/templates/embedIframe.handlebars": SrcTemplatesEmbediframeHandlebars,
	"../src/templates/equationBuilder.handlebars": SrcTemplatesEquationbuilderHandlebars,
	"../src/templates/florence.handlebars": SrcTemplatesFlorenceHandlebars,
	"../src/templates/iframeNav.handlebars": SrcTemplatesIframenavHandlebars,
	"../src/templates/imageBuilder.handlebars": SrcTemplatesImagebuilderHandlebars,
	"../src/templates/linkExternalModal.handlebars": SrcTemplatesLinkexternalmodalHandlebars,
	"../src/templates/linkModal.handlebars": SrcTemplatesLinkmodalHandlebars,
	"../src/templates/loadingAnimation.handlebars": SrcTemplatesLoadinganimationHandlebars,
	"../src/templates/login.handlebars": SrcTemplatesLoginHandlebars,
	"../src/templates/mainNav.handlebars": SrcTemplatesMainnavHandlebars,
	"../src/templates/markdownEditor.handlebars": SrcTemplatesMarkdowneditorHandlebars,
	"../src/templates/markdownEditorNoTitle.handlebars": SrcTemplatesMarkdowneditornotitleHandlebars,
	"../src/templates/publishDetails.handlebars": SrcTemplatesPublishdetailsHandlebars,
	"../src/templates/publishList.handlebars": SrcTemplatesPublishlistHandlebars,
	"../src/templates/relatedModal.handlebars": SrcTemplatesRelatedmodalHandlebars,
	"../src/templates/releaseSelector.handlebars": SrcTemplatesReleaseselectorHandlebars,
	"../src/templates/reportList.handlebars": SrcTemplatesReportlistHandlebars,
	"../src/templates/reportPublishedDetails.handlebars": SrcTemplatesReportpublisheddetailsHandlebars,
	"../src/templates/reportUnpublishedDetails.handlebars": SrcTemplatesReportunpublisheddetailsHandlebars,
	"../src/templates/selectorHour.handlebars": SrcTemplatesSelectorhourHandlebars,
	"../src/templates/selectorMinute.handlebars": SrcTemplatesSelectorminuteHandlebars,
	"../src/templates/tableBuilder.handlebars": SrcTemplatesTablebuilderHandlebars,
	"../src/templates/teamDetails.handlebars": SrcTemplatesTeamdetailsHandlebars,
	"../src/templates/teamEdit.handlebars": SrcTemplatesTeameditHandlebars,
	"../src/templates/teamList.handlebars": SrcTemplatesTeamlistHandlebars,
	"../src/templates/tickAnimation.handlebars": SrcTemplatesTickanimationHandlebars,
	"../src/templates/uploadFileForm.handlebars": SrcTemplatesUploadfileformHandlebars,
	"../src/templates/userDetails.handlebars": SrcTemplatesUserdetailsHandlebars,
	"../src/templates/userList.handlebars": SrcTemplatesUserlistHandlebars,
	"../src/templates/workBrowse.handlebars": SrcTemplatesWorkbrowseHandlebars,
	"../src/templates/workCreate.handlebars": SrcTemplatesWorkcreateHandlebars,
	"../src/templates/workEditCharts.handlebars": SrcTemplatesWorkeditchartsHandlebars,
	"../src/templates/workEditEquations.handlebars": SrcTemplatesWorkeditequationsHandlebars,
	"../src/templates/workEditImages.handlebars": SrcTemplatesWorkeditimagesHandlebars,
	"../src/templates/workEditT1.handlebars": SrcTemplatesWorkeditt1Handlebars,
	"../src/templates/workEditT16.handlebars": SrcTemplatesWorkeditt16Handlebars,
	"../src/templates/workEditT1Census.handlebars": SrcTemplatesWorkeditt1censusHandlebars,
	"../src/templates/workEditT1Sections.handlebars": SrcTemplatesWorkeditt1sectionsHandlebars,
	"../src/templates/workEditT2.handlebars": SrcTemplatesWorkeditt2Handlebars,
	"../src/templates/workEditT3.handlebars": SrcTemplatesWorkeditt3Handlebars,
	"../src/templates/workEditT4Article.handlebars": SrcTemplatesWorkeditt4articleHandlebars,
	"../src/templates/workEditT4ArticleDownload.handlebars": SrcTemplatesWorkeditt4articledownloadHandlebars,
	"../src/templates/workEditT4Bulletin.handlebars": SrcTemplatesWorkeditt4bulletinHandlebars,
	"../src/templates/workEditT4Compendium.handlebars": SrcTemplatesWorkeditt4compendiumHandlebars,
	"../src/templates/workEditT4Methodology.handlebars": SrcTemplatesWorkeditt4methodologyHandlebars,
	"../src/templates/workEditT5.handlebars": SrcTemplatesWorkeditt5Handlebars,
	"../src/templates/workEditT6.handlebars": SrcTemplatesWorkeditt6Handlebars,
	"../src/templates/workEditT6Chapter.handlebars": SrcTemplatesWorkeditt6chapterHandlebars,
	"../src/templates/workEditT6Dataset.handlebars": SrcTemplatesWorkeditt6datasetHandlebars,
	"../src/templates/workEditT7.handlebars": SrcTemplatesWorkeditt7Handlebars,
	"../src/templates/workEditT7Landing.handlebars": SrcTemplatesWorkeditt7landingHandlebars,
	"../src/templates/workEditT7StaticArticle.handlebars": SrcTemplatesWorkeditt7staticarticleHandlebars,
	"../src/templates/workEditT8.handlebars": SrcTemplatesWorkeditt8Handlebars,
	"../src/templates/workEditT8Compendium.handlebars": SrcTemplatesWorkeditt8compendiumHandlebars,
	"../src/templates/workEditT8CorrectionList.handlebars": SrcTemplatesWorkeditt8correctionlistHandlebars,
	"../src/templates/workEditT8LandingDatasetList.handlebars": SrcTemplatesWorkeditt8landingdatasetlistHandlebars,
	"../src/templates/workEditT8LandingPage.handlebars": SrcTemplatesWorkeditt8landingpageHandlebars,
	"../src/templates/workEditT8VersionList.handlebars": SrcTemplatesWorkeditt8versionlistHandlebars,
	"../src/templates/workEditTables.handlebars": SrcTemplatesWorkedittablesHandlebars,
	"../src/templates/workEditVisualisation.handlebars": SrcTemplatesWorkeditvisualisationHandlebars,
	"../src/templates/workImport.handlebars": SrcTemplatesWorkimportHandlebars,
	"../src/templates/workSpace.handlebars": SrcTemplatesWorkspaceHandlebars,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"src": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{SrcDs_store, map[string]*bintree{}},
			"assets": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"main.min.css": &bintree{SrcAssetsCssMainMinCss, map[string]*bintree{}},
					"main.min.css.map": &bintree{SrcAssetsCssMainMinCssMap, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"jquery.min.js": &bintree{SrcAssetsJsJqueryMinJs, map[string]*bintree{}},
					"main.js": &bintree{SrcAssetsJsMainJs, map[string]*bintree{}},
					"templates.js": &bintree{SrcAssetsJsTemplatesJs, map[string]*bintree{}},
				}},
				"version.json": &bintree{SrcAssetsVersionJson, map[string]*bintree{}},
			}},
			"css": &bintree{nil, map[string]*bintree{
				"florence.css": &bintree{SrcCssFlorenceCss, map[string]*bintree{}},
				"rapid-prototype-main.css": &bintree{SrcCssRapidPrototypeMainCss, map[string]*bintree{}},
				"third-party": &bintree{nil, map[string]*bintree{
					"c3.css": &bintree{SrcCssThirdPartyC3Css, map[string]*bintree{}},
					"jquery-ui.theme.min.css": &bintree{SrcCssThirdPartyJqueryUiThemeMinCss, map[string]*bintree{}},
					"jquery.tagit.css": &bintree{SrcCssThirdPartyJqueryTagitCss, map[string]*bintree{}},
					"pagedown.css": &bintree{SrcCssThirdPartyPagedownCss, map[string]*bintree{}},
					"responsive-tables.css": &bintree{SrcCssThirdPartyResponsiveTablesCss, map[string]*bintree{}},
					"sweetalert.css": &bintree{SrcCssThirdPartySweetalertCss, map[string]*bintree{}},
					"tagit.ui-zendesk.css": &bintree{SrcCssThirdPartyTagitUiZendeskCss, map[string]*bintree{}},
				}},
			}},
			"florence.html": &bintree{SrcFlorenceHtml, map[string]*bintree{}},
			"font": &bintree{nil, map[string]*bintree{
				"Open_Sans": &bintree{nil, map[string]*bintree{
					"LICENSE.txt": &bintree{SrcFontOpen_sansLicenseTxt, map[string]*bintree{}},
					"OpenSans-Bold.eot": &bintree{SrcFontOpen_sansOpensansBoldEot, map[string]*bintree{}},
					"OpenSans-Bold.svg": &bintree{SrcFontOpen_sansOpensansBoldSvg, map[string]*bintree{}},
					"OpenSans-Bold.ttf": &bintree{SrcFontOpen_sansOpensansBoldTtf, map[string]*bintree{}},
					"OpenSans-Bold.woff": &bintree{SrcFontOpen_sansOpensansBoldWoff, map[string]*bintree{}},
					"OpenSans-Bold.woff2": &bintree{SrcFontOpen_sansOpensansBoldWoff2, map[string]*bintree{}},
					"OpenSans-BoldItalic.eot": &bintree{SrcFontOpen_sansOpensansBolditalicEot, map[string]*bintree{}},
					"OpenSans-BoldItalic.svg": &bintree{SrcFontOpen_sansOpensansBolditalicSvg, map[string]*bintree{}},
					"OpenSans-BoldItalic.ttf": &bintree{SrcFontOpen_sansOpensansBolditalicTtf, map[string]*bintree{}},
					"OpenSans-BoldItalic.woff": &bintree{SrcFontOpen_sansOpensansBolditalicWoff, map[string]*bintree{}},
					"OpenSans-ExtraBold.eot": &bintree{SrcFontOpen_sansOpensansExtraboldEot, map[string]*bintree{}},
					"OpenSans-ExtraBold.svg": &bintree{SrcFontOpen_sansOpensansExtraboldSvg, map[string]*bintree{}},
					"OpenSans-ExtraBold.ttf": &bintree{SrcFontOpen_sansOpensansExtraboldTtf, map[string]*bintree{}},
					"OpenSans-ExtraBold.woff": &bintree{SrcFontOpen_sansOpensansExtraboldWoff, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.eot": &bintree{SrcFontOpen_sansOpensansExtrabolditalicEot, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.svg": &bintree{SrcFontOpen_sansOpensansExtrabolditalicSvg, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.ttf": &bintree{SrcFontOpen_sansOpensansExtrabolditalicTtf, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.woff": &bintree{SrcFontOpen_sansOpensansExtrabolditalicWoff, map[string]*bintree{}},
					"OpenSans-Italic.eot": &bintree{SrcFontOpen_sansOpensansItalicEot, map[string]*bintree{}},
					"OpenSans-Italic.svg": &bintree{SrcFontOpen_sansOpensansItalicSvg, map[string]*bintree{}},
					"OpenSans-Italic.ttf": &bintree{SrcFontOpen_sansOpensansItalicTtf, map[string]*bintree{}},
					"OpenSans-Italic.woff": &bintree{SrcFontOpen_sansOpensansItalicWoff, map[string]*bintree{}},
					"OpenSans-Light.eot": &bintree{SrcFontOpen_sansOpensansLightEot, map[string]*bintree{}},
					"OpenSans-Light.svg": &bintree{SrcFontOpen_sansOpensansLightSvg, map[string]*bintree{}},
					"OpenSans-Light.ttf": &bintree{SrcFontOpen_sansOpensansLightTtf, map[string]*bintree{}},
					"OpenSans-Light.woff": &bintree{SrcFontOpen_sansOpensansLightWoff, map[string]*bintree{}},
					"OpenSans-Light.woff2": &bintree{SrcFontOpen_sansOpensansLightWoff2, map[string]*bintree{}},
					"OpenSans-LightItalic.eot": &bintree{SrcFontOpen_sansOpensansLightitalicEot, map[string]*bintree{}},
					"OpenSans-LightItalic.svg": &bintree{SrcFontOpen_sansOpensansLightitalicSvg, map[string]*bintree{}},
					"OpenSans-LightItalic.ttf": &bintree{SrcFontOpen_sansOpensansLightitalicTtf, map[string]*bintree{}},
					"OpenSans-LightItalic.woff": &bintree{SrcFontOpen_sansOpensansLightitalicWoff, map[string]*bintree{}},
					"OpenSans-Regular.eot": &bintree{SrcFontOpen_sansOpensansRegularEot, map[string]*bintree{}},
					"OpenSans-Regular.svg": &bintree{SrcFontOpen_sansOpensansRegularSvg, map[string]*bintree{}},
					"OpenSans-Regular.ttf": &bintree{SrcFontOpen_sansOpensansRegularTtf, map[string]*bintree{}},
					"OpenSans-Regular.woff": &bintree{SrcFontOpen_sansOpensansRegularWoff, map[string]*bintree{}},
					"OpenSans-Regular.woff2": &bintree{SrcFontOpen_sansOpensansRegularWoff2, map[string]*bintree{}},
					"OpenSans-Semibold.eot": &bintree{SrcFontOpen_sansOpensansSemiboldEot, map[string]*bintree{}},
					"OpenSans-Semibold.svg": &bintree{SrcFontOpen_sansOpensansSemiboldSvg, map[string]*bintree{}},
					"OpenSans-Semibold.ttf": &bintree{SrcFontOpen_sansOpensansSemiboldTtf, map[string]*bintree{}},
					"OpenSans-Semibold.woff": &bintree{SrcFontOpen_sansOpensansSemiboldWoff, map[string]*bintree{}},
					"OpenSans-Semibold.woff2": &bintree{SrcFontOpen_sansOpensansSemiboldWoff2, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.eot": &bintree{SrcFontOpen_sansOpensansSemibolditalicEot, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.svg": &bintree{SrcFontOpen_sansOpensansSemibolditalicSvg, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.ttf": &bintree{SrcFontOpen_sansOpensansSemibolditalicTtf, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.woff": &bintree{SrcFontOpen_sansOpensansSemibolditalicWoff, map[string]*bintree{}},
				}},
				"Roboto_Slab": &bintree{nil, map[string]*bintree{
					"LICENSE.txt": &bintree{SrcFontRoboto_slabLicenseTxt, map[string]*bintree{}},
					"RobotoSlab-Bold.eot": &bintree{SrcFontRoboto_slabRobotoslabBoldEot, map[string]*bintree{}},
					"RobotoSlab-Bold.svg": &bintree{SrcFontRoboto_slabRobotoslabBoldSvg, map[string]*bintree{}},
					"RobotoSlab-Bold.ttf": &bintree{SrcFontRoboto_slabRobotoslabBoldTtf, map[string]*bintree{}},
					"RobotoSlab-Bold.woff": &bintree{SrcFontRoboto_slabRobotoslabBoldWoff, map[string]*bintree{}},
					"RobotoSlab-Bold.woff2": &bintree{SrcFontRoboto_slabRobotoslabBoldWoff2, map[string]*bintree{}},
					"RobotoSlab-Light.eot": &bintree{SrcFontRoboto_slabRobotoslabLightEot, map[string]*bintree{}},
					"RobotoSlab-Light.svg": &bintree{SrcFontRoboto_slabRobotoslabLightSvg, map[string]*bintree{}},
					"RobotoSlab-Light.ttf": &bintree{SrcFontRoboto_slabRobotoslabLightTtf, map[string]*bintree{}},
					"RobotoSlab-Light.woff": &bintree{SrcFontRoboto_slabRobotoslabLightWoff, map[string]*bintree{}},
					"RobotoSlab-Regular.eot": &bintree{SrcFontRoboto_slabRobotoslabRegularEot, map[string]*bintree{}},
					"RobotoSlab-Regular.svg": &bintree{SrcFontRoboto_slabRobotoslabRegularSvg, map[string]*bintree{}},
					"RobotoSlab-Regular.ttf": &bintree{SrcFontRoboto_slabRobotoslabRegularTtf, map[string]*bintree{}},
					"RobotoSlab-Regular.woff": &bintree{SrcFontRoboto_slabRobotoslabRegularWoff, map[string]*bintree{}},
					"RobotoSlab-Regular.woff2": &bintree{SrcFontRoboto_slabRobotoslabRegularWoff2, map[string]*bintree{}},
					"RobotoSlab-Thin.eot": &bintree{SrcFontRoboto_slabRobotoslabThinEot, map[string]*bintree{}},
					"RobotoSlab-Thin.svg": &bintree{SrcFontRoboto_slabRobotoslabThinSvg, map[string]*bintree{}},
					"RobotoSlab-Thin.ttf": &bintree{SrcFontRoboto_slabRobotoslabThinTtf, map[string]*bintree{}},
					"RobotoSlab-Thin.woff": &bintree{SrcFontRoboto_slabRobotoslabThinWoff, map[string]*bintree{}},
					"RobotoSlab-Thin.woff2": &bintree{SrcFontRoboto_slabRobotoslabThinWoff2, map[string]*bintree{}},
				}},
				"Ubuntu_Mono": &bintree{nil, map[string]*bintree{
					"UFL.txt": &bintree{SrcFontUbuntu_monoUflTxt, map[string]*bintree{}},
					"UbuntuMono-Bold.eot": &bintree{SrcFontUbuntu_monoUbuntumonoBoldEot, map[string]*bintree{}},
					"UbuntuMono-Bold.svg": &bintree{SrcFontUbuntu_monoUbuntumonoBoldSvg, map[string]*bintree{}},
					"UbuntuMono-Bold.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoBoldTtf, map[string]*bintree{}},
					"UbuntuMono-Bold.woff": &bintree{SrcFontUbuntu_monoUbuntumonoBoldWoff, map[string]*bintree{}},
					"UbuntuMono-Bold.woff2": &bintree{SrcFontUbuntu_monoUbuntumonoBoldWoff2, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.eot": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicEot, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.svg": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicSvg, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicTtf, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.woff": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicWoff, map[string]*bintree{}},
					"UbuntuMono-Italic.eot": &bintree{SrcFontUbuntu_monoUbuntumonoItalicEot, map[string]*bintree{}},
					"UbuntuMono-Italic.svg": &bintree{SrcFontUbuntu_monoUbuntumonoItalicSvg, map[string]*bintree{}},
					"UbuntuMono-Italic.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoItalicTtf, map[string]*bintree{}},
					"UbuntuMono-Italic.woff": &bintree{SrcFontUbuntu_monoUbuntumonoItalicWoff, map[string]*bintree{}},
					"UbuntuMono-Regular.eot": &bintree{SrcFontUbuntu_monoUbuntumonoRegularEot, map[string]*bintree{}},
					"UbuntuMono-Regular.svg": &bintree{SrcFontUbuntu_monoUbuntumonoRegularSvg, map[string]*bintree{}},
					"UbuntuMono-Regular.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoRegularTtf, map[string]*bintree{}},
					"UbuntuMono-Regular.woff": &bintree{SrcFontUbuntu_monoUbuntumonoRegularWoff, map[string]*bintree{}},
					"UbuntuMono-Regular.woff2": &bintree{SrcFontUbuntu_monoUbuntumonoRegularWoff2, map[string]*bintree{}},
				}},
				"florence.eot": &bintree{SrcFontFlorenceEot, map[string]*bintree{}},
				"florence.svg": &bintree{SrcFontFlorenceSvg, map[string]*bintree{}},
				"florence.ttf": &bintree{SrcFontFlorenceTtf, map[string]*bintree{}},
				"florence.woff": &bintree{SrcFontFlorenceWoff, map[string]*bintree{}},
			}},
			"html templates": &bintree{nil, map[string]*bintree{
				"jquery-ui.min.js": &bintree{SrcHtmlTemplatesJqueryUiMinJs, map[string]*bintree{}},
				"pagedown.css": &bintree{SrcHtmlTemplatesPagedownCss, map[string]*bintree{}},
				"publish-manual.html": &bintree{SrcHtmlTemplatesPublishManualHtml, map[string]*bintree{}},
				"publish-scheduled.html": &bintree{SrcHtmlTemplatesPublishScheduledHtml, map[string]*bintree{}},
				"ui-functions.js": &bintree{SrcHtmlTemplatesUiFunctionsJs, map[string]*bintree{}},
				"workspace-browse.html": &bintree{SrcHtmlTemplatesWorkspaceBrowseHtml, map[string]*bintree{}},
				"workspace-create.html": &bintree{SrcHtmlTemplatesWorkspaceCreateHtml, map[string]*bintree{}},
				"workspace-edit.html": &bintree{SrcHtmlTemplatesWorkspaceEditHtml, map[string]*bintree{}},
			}},
			"img": &bintree{nil, map[string]*bintree{
				"favicon11.ico": &bintree{SrcImgFavicon11Ico, map[string]*bintree{}},
				"favicon12.ico": &bintree{SrcImgFavicon12Ico, map[string]*bintree{}},
				"favicon21.ico": &bintree{SrcImgFavicon21Ico, map[string]*bintree{}},
				"favicon22.ico": &bintree{SrcImgFavicon22Ico, map[string]*bintree{}},
				"favicon23.ico": &bintree{SrcImgFavicon23Ico, map[string]*bintree{}},
				"favicon24.ico": &bintree{SrcImgFavicon24Ico, map[string]*bintree{}},
				"flo-logo.png": &bintree{SrcImgFloLogoPng, map[string]*bintree{}},
				"flo-logo144.png": &bintree{SrcImgFloLogo144Png, map[string]*bintree{}},
				"rule-21.png": &bintree{SrcImgRule21Png, map[string]*bintree{}},
				"rule-22.png": &bintree{SrcImgRule22Png, map[string]*bintree{}},
				"rule.png": &bintree{SrcImgRulePng, map[string]*bintree{}},
				"sb_v_double_arrow.png": &bintree{SrcImgSb_v_double_arrowPng, map[string]*bintree{}},
				"semi-transparent-bg.png": &bintree{SrcImgSemiTransparentBgPng, map[string]*bintree{}},
				"sprite.png": &bintree{SrcImgSpritePng, map[string]*bintree{}},
				"ui-bg_diagonals-thick_18_b81900_40x40.png": &bintree{SrcImgUiBg_diagonalsThick_18_b81900_40x40Png, map[string]*bintree{}},
				"ui-bg_diagonals-thick_20_666666_40x40.png": &bintree{SrcImgUiBg_diagonalsThick_20_666666_40x40Png, map[string]*bintree{}},
				"ui-bg_flat_10_000000_40x100.png": &bintree{SrcImgUiBg_flat_10_000000_40x100Png, map[string]*bintree{}},
				"ui-bg_glass_100_f6f6f6_1x400.png": &bintree{SrcImgUiBg_glass_100_f6f6f6_1x400Png, map[string]*bintree{}},
				"ui-bg_glass_100_fdf5ce_1x400.png": &bintree{SrcImgUiBg_glass_100_fdf5ce_1x400Png, map[string]*bintree{}},
				"ui-bg_glass_65_ffffff_1x400.png": &bintree{SrcImgUiBg_glass_65_ffffff_1x400Png, map[string]*bintree{}},
				"ui-bg_gloss-wave_35_f6a828_500x100.png": &bintree{SrcImgUiBg_glossWave_35_f6a828_500x100Png, map[string]*bintree{}},
				"ui-bg_highlight-soft_100_eeeeee_1x100.png": &bintree{SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png, map[string]*bintree{}},
				"ui-bg_highlight-soft_75_ffe45c_1x100.png": &bintree{SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png, map[string]*bintree{}},
				"ui-icons_222222_256x240.png": &bintree{SrcImgUiIcons_222222_256x240Png, map[string]*bintree{}},
				"ui-icons_228ef1_256x240.png": &bintree{SrcImgUiIcons_228ef1_256x240Png, map[string]*bintree{}},
				"ui-icons_ef8c08_256x240.png": &bintree{SrcImgUiIcons_ef8c08_256x240Png, map[string]*bintree{}},
				"ui-icons_ffd27a_256x240.png": &bintree{SrcImgUiIcons_ffd27a_256x240Png, map[string]*bintree{}},
				"ui-icons_ffffff_256x240.png": &bintree{SrcImgUiIcons_ffffff_256x240Png, map[string]*bintree{}},
				"wmd-buttons.png": &bintree{SrcImgWmdButtonsPng, map[string]*bintree{}},
			}},
			"index.html": &bintree{SrcIndexHtml, map[string]*bintree{}},
			"js": &bintree{nil, map[string]*bintree{
				"classes": &bintree{nil, map[string]*bintree{
					"cookieUtils.js": &bintree{SrcJsClassesCookieutilsJs, map[string]*bintree{}},
					"florence.js": &bintree{SrcJsClassesFlorenceJs, map[string]*bintree{}},
					"pathUtils.js": &bintree{SrcJsClassesPathutilsJs, map[string]*bintree{}},
					"stringUtils.js": &bintree{SrcJsClassesStringutilsJs, map[string]*bintree{}},
				}},
				"components": &bintree{nil, map[string]*bintree{
					"_accordion.js": &bintree{SrcJsComponents_accordionJs, map[string]*bintree{}},
					"_fileInput.js": &bintree{SrcJsComponents_fileinputJs, map[string]*bintree{}},
					"_hidePanel.js": &bintree{SrcJsComponents_hidepanelJs, map[string]*bintree{}},
					"_showPanel.js": &bintree{SrcJsComponents_showpanelJs, map[string]*bintree{}},
				}},
				"functions": &bintree{nil, map[string]*bintree{
					"_ContentDeleteMarker.js": &bintree{SrcJsFunctions_contentdeletemarkerJs, map[string]*bintree{}},
					"__init.js": &bintree{SrcJsFunctions__initJs, map[string]*bintree{}},
					"_accordionSettings.js": &bintree{SrcJsFunctions_accordionsettingsJs, map[string]*bintree{}},
					"_autoSize.js": &bintree{SrcJsFunctions_autosizeJs, map[string]*bintree{}},
					"_checkForPageChanged.js": &bintree{SrcJsFunctions_checkforpagechangedJs, map[string]*bintree{}},
					"_checkPathParsed.js": &bintree{SrcJsFunctions_checkpathparsedJs, map[string]*bintree{}},
					"_checkPathSlashes.js": &bintree{SrcJsFunctions_checkpathslashesJs, map[string]*bintree{}},
					"_checkRenameUri.js": &bintree{SrcJsFunctions_checkrenameuriJs, map[string]*bintree{}},
					"_collectionHelpers.js": &bintree{SrcJsFunctions_collectionhelpersJs, map[string]*bintree{}},
					"_copyPath.js": &bintree{SrcJsFunctions_copypathJs, map[string]*bintree{}},
					"_createCollection.js": &bintree{SrcJsFunctions_createcollectionJs, map[string]*bintree{}},
					"_createWorkspace.js": &bintree{SrcJsFunctions_createworkspaceJs, map[string]*bintree{}},
					"_deleteTeam.js": &bintree{SrcJsFunctions_deleteteamJs, map[string]*bintree{}},
					"_deleteUnpublishedVersion.js": &bintree{SrcJsFunctions_deleteunpublishedversionJs, map[string]*bintree{}},
					"_deleteUser.js": &bintree{SrcJsFunctions_deleteuserJs, map[string]*bintree{}},
					"_editAddDataset.js": &bintree{SrcJsFunctions_editadddatasetJs, map[string]*bintree{}},
					"_editAddFile.js": &bintree{SrcJsFunctions_editaddfileJs, map[string]*bintree{}},
					"_editAddFileWithDetails.js": &bintree{SrcJsFunctions_editaddfilewithdetailsJs, map[string]*bintree{}},
					"_editAlert.js": &bintree{SrcJsFunctions_editalertJs, map[string]*bintree{}},
					"_editBlocks.js": &bintree{SrcJsFunctions_editblocksJs, map[string]*bintree{}},
					"_editCollection.js": &bintree{SrcJsFunctions_editcollectionJs, map[string]*bintree{}},
					"_editDatasetVersion.js": &bintree{SrcJsFunctions_editdatasetversionJs, map[string]*bintree{}},
					"_editDate.js": &bintree{SrcJsFunctions_editdateJs, map[string]*bintree{}},
					"_editDocWithFilesCorrection.js": &bintree{SrcJsFunctions_editdocwithfilescorrectionJs, map[string]*bintree{}},
					"_editDocumentCorrection.js": &bintree{SrcJsFunctions_editdocumentcorrectionJs, map[string]*bintree{}},
					"_editIntLinks.js": &bintree{SrcJsFunctions_editintlinksJs, map[string]*bintree{}},
					"_editMarkdownOneObject.js": &bintree{SrcJsFunctions_editmarkdownoneobjectJs, map[string]*bintree{}},
					"_editMarkdownWithNoTitle.js": &bintree{SrcJsFunctions_editmarkdownwithnotitleJs, map[string]*bintree{}},
					"_editServiceMessage.js": &bintree{SrcJsFunctions_editservicemessageJs, map[string]*bintree{}},
					"_editTopics.js": &bintree{SrcJsFunctions_edittopicsJs, map[string]*bintree{}},
					"_environment.js": &bintree{SrcJsFunctions_environmentJs, map[string]*bintree{}},
					"_externalLinkAccordionSection.js": &bintree{SrcJsFunctions_externallinkaccordionsectionJs, map[string]*bintree{}},
					"_fileDelete.js": &bintree{SrcJsFunctions_filedeleteJs, map[string]*bintree{}},
					"_fileUpload.js": &bintree{SrcJsFunctions_fileuploadJs, map[string]*bintree{}},
					"_getLastPosition.js": &bintree{SrcJsFunctions_getlastpositionJs, map[string]*bintree{}},
					"_getNetworkStatus.js": &bintree{SrcJsFunctions_getnetworkstatusJs, map[string]*bintree{}},
					"_getParentPage.js": &bintree{SrcJsFunctions_getparentpageJs, map[string]*bintree{}},
					"_getPathNameTrimLast.js": &bintree{SrcJsFunctions_getpathnametrimlastJs, map[string]*bintree{}},
					"_getPreviewUrl.js": &bintree{SrcJsFunctions_getpreviewurlJs, map[string]*bintree{}},
					"_handleApiError.js": &bintree{SrcJsFunctions_handleapierrorJs, map[string]*bintree{}},
					"_initialiseNoteMarkdown.js": &bintree{SrcJsFunctions_initialisenotemarkdownJs, map[string]*bintree{}},
					"_inputValidation.js": &bintree{SrcJsFunctions_inputvalidationJs, map[string]*bintree{}},
					"_loadBrowseScreen.js": &bintree{SrcJsFunctions_loadbrowsescreenJs, map[string]*bintree{}},
					"_loadChartBuilder.js": &bintree{SrcJsFunctions_loadchartbuilderJs, map[string]*bintree{}},
					"_loadChartsList.js": &bintree{SrcJsFunctions_loadchartslistJs, map[string]*bintree{}},
					"_loadCreateScreen.js": &bintree{SrcJsFunctions_loadcreatescreenJs, map[string]*bintree{}},
					"_loadCreator.js": &bintree{SrcJsFunctions_loadcreatorJs, map[string]*bintree{}},
					"_loadCreatorDatepicker.js": &bintree{SrcJsFunctions_loadcreatordatepickerJs, map[string]*bintree{}},
					"_loadEmbedIframe.js": &bintree{SrcJsFunctions_loadembediframeJs, map[string]*bintree{}},
					"_loadEquationBuilder.js": &bintree{SrcJsFunctions_loadequationbuilderJs, map[string]*bintree{}},
					"_loadEquationsList.js": &bintree{SrcJsFunctions_loadequationslistJs, map[string]*bintree{}},
					"_loadImageBuilder.js": &bintree{SrcJsFunctions_loadimagebuilderJs, map[string]*bintree{}},
					"_loadImagesList.js": &bintree{SrcJsFunctions_loadimageslistJs, map[string]*bintree{}},
					"_loadImportScreen.js": &bintree{SrcJsFunctions_loadimportscreenJs, map[string]*bintree{}},
					"_loadMarkdownEditor.js": &bintree{SrcJsFunctions_loadmarkdowneditorJs, map[string]*bintree{}},
					"_loadPageDataIntoEditor.js": &bintree{SrcJsFunctions_loadpagedataintoeditorJs, map[string]*bintree{}},
					"_loadParentLink.js": &bintree{SrcJsFunctions_loadparentlinkJs, map[string]*bintree{}},
					"_loadT16Creator.js": &bintree{SrcJsFunctions_loadt16creatorJs, map[string]*bintree{}},
					"_loadT4Creator.js": &bintree{SrcJsFunctions_loadt4creatorJs, map[string]*bintree{}},
					"_loadT6Creator.js": &bintree{SrcJsFunctions_loadt6creatorJs, map[string]*bintree{}},
					"_loadT7Creator.js": &bintree{SrcJsFunctions_loadt7creatorJs, map[string]*bintree{}},
					"_loadT8DatasetCreator.js": &bintree{SrcJsFunctions_loadt8datasetcreatorJs, map[string]*bintree{}},
					"_loadT8LandingCreator.js": &bintree{SrcJsFunctions_loadt8landingcreatorJs, map[string]*bintree{}},
					"_loadTableBuilder.js": &bintree{SrcJsFunctions_loadtablebuilderJs, map[string]*bintree{}},
					"_loadTablesList.js": &bintree{SrcJsFunctions_loadtableslistJs, map[string]*bintree{}},
					"_loadVisCreator.js": &bintree{SrcJsFunctions_loadviscreatorJs, map[string]*bintree{}},
					"_logout.js": &bintree{SrcJsFunctions_logoutJs, map[string]*bintree{}},
					"_makeUrl.js": &bintree{SrcJsFunctions_makeurlJs, map[string]*bintree{}},
					"_markdownContentAccordionSection.js": &bintree{SrcJsFunctions_markdowncontentaccordionsectionJs, map[string]*bintree{}},
					"_markdownSetLines.js": &bintree{SrcJsFunctions_markdownsetlinesJs, map[string]*bintree{}},
					"_menuSelectSettings.js": &bintree{SrcJsFunctions_menuselectsettingsJs, map[string]*bintree{}},
					"_moveBrowseNode.js": &bintree{SrcJsFunctions_movebrowsenodeJs, map[string]*bintree{}},
					"_parseUrl.js": &bintree{SrcJsFunctions_parseurlJs, map[string]*bintree{}},
					"_postApproveCollection.js": &bintree{SrcJsFunctions_postapprovecollectionJs, map[string]*bintree{}},
					"_postComplete.js": &bintree{SrcJsFunctions_postcompleteJs, map[string]*bintree{}},
					"_postContent.js": &bintree{SrcJsFunctions_postcontentJs, map[string]*bintree{}},
					"_postLogin.js": &bintree{SrcJsFunctions_postloginJs, map[string]*bintree{}},
					"_postReview.js": &bintree{SrcJsFunctions_postreviewJs, map[string]*bintree{}},
					"_postTeam.js": &bintree{SrcJsFunctions_postteamJs, map[string]*bintree{}},
					"_postUser.js": &bintree{SrcJsFunctions_postuserJs, map[string]*bintree{}},
					"_publish.js": &bintree{SrcJsFunctions_publishJs, map[string]*bintree{}},
					"_refreshPreview.js": &bintree{SrcJsFunctions_refreshpreviewJs, map[string]*bintree{}},
					"_relatedItemAccordionSection.js": &bintree{SrcJsFunctions_relateditemaccordionsectionJs, map[string]*bintree{}},
					"_renameChildren.js": &bintree{SrcJsFunctions_renamechildrenJs, map[string]*bintree{}},
					"_renameContent.js": &bintree{SrcJsFunctions_renamecontentJs, map[string]*bintree{}},
					"_renderAccordionSections.js": &bintree{SrcJsFunctions_renderaccordionsectionsJs, map[string]*bintree{}},
					"_reset.js": &bintree{SrcJsFunctions_resetJs, map[string]*bintree{}},
					"_saveContent.js": &bintree{SrcJsFunctions_savecontentJs, map[string]*bintree{}},
					"_saveNewCorrection.js": &bintree{SrcJsFunctions_savenewcorrectionJs, map[string]*bintree{}},
					"_setShortcuts.js": &bintree{SrcJsFunctions_setshortcutsJs, map[string]*bintree{}},
					"_setupFlorence.js": &bintree{SrcJsFunctions_setupflorenceJs, map[string]*bintree{}},
					"_t16ReleaseEditor.js": &bintree{SrcJsFunctions_t16releaseeditorJs, map[string]*bintree{}},
					"_t1Editor.js": &bintree{SrcJsFunctions_t1editorJs, map[string]*bintree{}},
					"_t1EditorCensus.js": &bintree{SrcJsFunctions_t1editorcensusJs, map[string]*bintree{}},
					"_t2Editor.js": &bintree{SrcJsFunctions_t2editorJs, map[string]*bintree{}},
					"_t3Editor.js": &bintree{SrcJsFunctions_t3editorJs, map[string]*bintree{}},
					"_t4ArticleDownloadEditor.js": &bintree{SrcJsFunctions_t4articledownloadeditorJs, map[string]*bintree{}},
					"_t4ArticleEditor.js": &bintree{SrcJsFunctions_t4articleeditorJs, map[string]*bintree{}},
					"_t4BulletinEditor.js": &bintree{SrcJsFunctions_t4bulletineditorJs, map[string]*bintree{}},
					"_t5TimeseriesEditor.js": &bintree{SrcJsFunctions_t5timeserieseditorJs, map[string]*bintree{}},
					"_t6CompendiumChapterEditor.js": &bintree{SrcJsFunctions_t6compendiumchaptereditorJs, map[string]*bintree{}},
					"_t6CompendiumDataEditor.js": &bintree{SrcJsFunctions_t6compendiumdataeditorJs, map[string]*bintree{}},
					"_t6CompendiumEditor.js": &bintree{SrcJsFunctions_t6compendiumeditorJs, map[string]*bintree{}},
					"_t7AdHocEditor.js": &bintree{SrcJsFunctions_t7adhoceditorJs, map[string]*bintree{}},
					"_t7FoiEditor.js": &bintree{SrcJsFunctions_t7foieditorJs, map[string]*bintree{}},
					"_t7MethodologyDownloadEditor.js": &bintree{SrcJsFunctions_t7methodologydownloadeditorJs, map[string]*bintree{}},
					"_t7MethodologyEditor.js": &bintree{SrcJsFunctions_t7methodologyeditorJs, map[string]*bintree{}},
					"_t7QmiEditor.js": &bintree{SrcJsFunctions_t7qmieditorJs, map[string]*bintree{}},
					"_t7StaticArticleEditor.js": &bintree{SrcJsFunctions_t7staticarticleeditorJs, map[string]*bintree{}},
					"_t7StaticLandingPageEditor.js": &bintree{SrcJsFunctions_t7staticlandingpageeditorJs, map[string]*bintree{}},
					"_t7StaticPageEditor.js": &bintree{SrcJsFunctions_t7staticpageeditorJs, map[string]*bintree{}},
					"_t8DatasetEditor.js": &bintree{SrcJsFunctions_t8dataseteditorJs, map[string]*bintree{}},
					"_t8LandingPageEditor.js": &bintree{SrcJsFunctions_t8landingpageeditorJs, map[string]*bintree{}},
					"_transfer.js": &bintree{SrcJsFunctions_transferJs, map[string]*bintree{}},
					"_treeNodeSelect.js": &bintree{SrcJsFunctions_treenodeselectJs, map[string]*bintree{}},
					"_ui.js": &bintree{SrcJsFunctions_uiJs, map[string]*bintree{}},
					"_uiTidyup.js": &bintree{SrcJsFunctions_uitidyupJs, map[string]*bintree{}},
					"_updateContent.js": &bintree{SrcJsFunctions_updatecontentJs, map[string]*bintree{}},
					"_viewChangePassword.js": &bintree{SrcJsFunctions_viewchangepasswordJs, map[string]*bintree{}},
					"_viewCollectionDetails.js": &bintree{SrcJsFunctions_viewcollectiondetailsJs, map[string]*bintree{}},
					"_viewCollections.js": &bintree{SrcJsFunctions_viewcollectionsJs, map[string]*bintree{}},
					"_viewController.js": &bintree{SrcJsFunctions_viewcontrollerJs, map[string]*bintree{}},
					"_viewLogIn.js": &bintree{SrcJsFunctions_viewloginJs, map[string]*bintree{}},
					"_viewPublish.js": &bintree{SrcJsFunctions_viewpublishJs, map[string]*bintree{}},
					"_viewPublishDetails.js": &bintree{SrcJsFunctions_viewpublishdetailsJs, map[string]*bintree{}},
					"_viewReleaseSelector.js": &bintree{SrcJsFunctions_viewreleaseselectorJs, map[string]*bintree{}},
					"_viewReportDetails.js": &bintree{SrcJsFunctions_viewreportdetailsJs, map[string]*bintree{}},
					"_viewReports.js": &bintree{SrcJsFunctions_viewreportsJs, map[string]*bintree{}},
					"_viewTeamDetails.js": &bintree{SrcJsFunctions_viewteamdetailsJs, map[string]*bintree{}},
					"_viewTeams.js": &bintree{SrcJsFunctions_viewteamsJs, map[string]*bintree{}},
					"_viewUserDetails.js": &bintree{SrcJsFunctions_viewuserdetailsJs, map[string]*bintree{}},
					"_viewUsers.js": &bintree{SrcJsFunctions_viewusersJs, map[string]*bintree{}},
					"_viewWorkspace.js": &bintree{SrcJsFunctions_viewworkspaceJs, map[string]*bintree{}},
					"_visualisationEditor.js": &bintree{SrcJsFunctions_visualisationeditorJs, map[string]*bintree{}},
					"registerServiceWorker.js": &bintree{SrcJsFunctionsRegisterserviceworkerJs, map[string]*bintree{}},
				}},
				"third-party": &bintree{nil, map[string]*bintree{
					"Markdown.Converter.js": &bintree{SrcJsThirdPartyMarkdownConverterJs, map[string]*bintree{}},
					"Markdown.Editor.js": &bintree{SrcJsThirdPartyMarkdownEditorJs, map[string]*bintree{}},
					"Markdown.Extra.js": &bintree{SrcJsThirdPartyMarkdownExtraJs, map[string]*bintree{}},
					"Markdown.Sanitizer.js": &bintree{SrcJsThirdPartyMarkdownSanitizerJs, map[string]*bintree{}},
					"ZeroClipboard.min.js": &bintree{SrcJsThirdPartyZeroclipboardMinJs, map[string]*bintree{}},
					"ZeroClipboard.swf": &bintree{SrcJsThirdPartyZeroclipboardSwf, map[string]*bintree{}},
					"autosize.js": &bintree{SrcJsThirdPartyAutosizeJs, map[string]*bintree{}},
					"clipboard.min.js": &bintree{SrcJsThirdPartyClipboardMinJs, map[string]*bintree{}},
					"handlebars.runtime.min.js": &bintree{SrcJsThirdPartyHandlebarsRuntimeMinJs, map[string]*bintree{}},
					"highcharts-more.js": &bintree{SrcJsThirdPartyHighchartsMoreJs, map[string]*bintree{}},
					"highcharts.js": &bintree{SrcJsThirdPartyHighchartsJs, map[string]*bintree{}},
					"jquery-ui-timepicker-addon.js": &bintree{SrcJsThirdPartyJqueryUiTimepickerAddonJs, map[string]*bintree{}},
					"jquery-ui.js": &bintree{SrcJsThirdPartyJqueryUiJs, map[string]*bintree{}},
					"jquery.hotkeys.js": &bintree{SrcJsThirdPartyJqueryHotkeysJs, map[string]*bintree{}},
					"mathjax": &bintree{nil, map[string]*bintree{
						"MathJax.js": &bintree{SrcJsThirdPartyMathjaxMathjaxJs, map[string]*bintree{}},
						"config": &bintree{nil, map[string]*bintree{
							"AM_CHTML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigAm_chtmlFullJs, map[string]*bintree{}},
							"AM_CHTML.js": &bintree{SrcJsThirdPartyMathjaxConfigAm_chtmlJs, map[string]*bintree{}},
							"AM_HTMLorMML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigAm_htmlormmlFullJs, map[string]*bintree{}},
							"AM_HTMLorMML.js": &bintree{SrcJsThirdPartyMathjaxConfigAm_htmlormmlJs, map[string]*bintree{}},
							"AM_SVG-full.js": &bintree{SrcJsThirdPartyMathjaxConfigAm_svgFullJs, map[string]*bintree{}},
							"AM_SVG.js": &bintree{SrcJsThirdPartyMathjaxConfigAm_svgJs, map[string]*bintree{}},
							"Accessible-full.js": &bintree{SrcJsThirdPartyMathjaxConfigAccessibleFullJs, map[string]*bintree{}},
							"Accessible.js": &bintree{SrcJsThirdPartyMathjaxConfigAccessibleJs, map[string]*bintree{}},
							"MML_CHTML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigMml_chtmlFullJs, map[string]*bintree{}},
							"MML_CHTML.js": &bintree{SrcJsThirdPartyMathjaxConfigMml_chtmlJs, map[string]*bintree{}},
							"MML_HTMLorMML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigMml_htmlormmlFullJs, map[string]*bintree{}},
							"MML_HTMLorMML.js": &bintree{SrcJsThirdPartyMathjaxConfigMml_htmlormmlJs, map[string]*bintree{}},
							"MML_SVG-full.js": &bintree{SrcJsThirdPartyMathjaxConfigMml_svgFullJs, map[string]*bintree{}},
							"MML_SVG.js": &bintree{SrcJsThirdPartyMathjaxConfigMml_svgJs, map[string]*bintree{}},
							"MMLorHTML.js": &bintree{SrcJsThirdPartyMathjaxConfigMmlorhtmlJs, map[string]*bintree{}},
							"Safe.js": &bintree{SrcJsThirdPartyMathjaxConfigSafeJs, map[string]*bintree{}},
							"TeX-AMS-MML_HTMLorMML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlFullJs, map[string]*bintree{}},
							"TeX-AMS-MML_HTMLorMML.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAmsMml_htmlormmlJs, map[string]*bintree{}},
							"TeX-AMS-MML_SVG-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAmsMml_svgFullJs, map[string]*bintree{}},
							"TeX-AMS-MML_SVG.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAmsMml_svgJs, map[string]*bintree{}},
							"TeX-AMS_CHTML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAms_chtmlFullJs, map[string]*bintree{}},
							"TeX-AMS_CHTML.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAms_chtmlJs, map[string]*bintree{}},
							"TeX-AMS_HTML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAms_htmlFullJs, map[string]*bintree{}},
							"TeX-AMS_HTML.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAms_htmlJs, map[string]*bintree{}},
							"TeX-AMS_SVG-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAms_svgFullJs, map[string]*bintree{}},
							"TeX-AMS_SVG.js": &bintree{SrcJsThirdPartyMathjaxConfigTexAms_svgJs, map[string]*bintree{}},
							"TeX-MML-AM_CHTML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlFullJs, map[string]*bintree{}},
							"TeX-MML-AM_CHTML.js": &bintree{SrcJsThirdPartyMathjaxConfigTexMmlAm_chtmlJs, map[string]*bintree{}},
							"TeX-MML-AM_HTMLorMML-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlFullJs, map[string]*bintree{}},
							"TeX-MML-AM_HTMLorMML.js": &bintree{SrcJsThirdPartyMathjaxConfigTexMmlAm_htmlormmlJs, map[string]*bintree{}},
							"TeX-MML-AM_SVG-full.js": &bintree{SrcJsThirdPartyMathjaxConfigTexMmlAm_svgFullJs, map[string]*bintree{}},
							"TeX-MML-AM_SVG.js": &bintree{SrcJsThirdPartyMathjaxConfigTexMmlAm_svgJs, map[string]*bintree{}},
							"default.js": &bintree{SrcJsThirdPartyMathjaxConfigDefaultJs, map[string]*bintree{}},
							"local": &bintree{nil, map[string]*bintree{
								"local.js": &bintree{SrcJsThirdPartyMathjaxConfigLocalLocalJs, map[string]*bintree{}},
							}},
						}},
						"extensions": &bintree{nil, map[string]*bintree{
							"AssistiveMML.js": &bintree{SrcJsThirdPartyMathjaxExtensionsAssistivemmlJs, map[string]*bintree{}},
							"CHTML-preview.js": &bintree{SrcJsThirdPartyMathjaxExtensionsChtmlPreviewJs, map[string]*bintree{}},
							"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxExtensionsFontwarningsJs, map[string]*bintree{}},
							"HTML-CSS": &bintree{nil, map[string]*bintree{
								"handle-floats.js": &bintree{SrcJsThirdPartyMathjaxExtensionsHtmlCssHandleFloatsJs, map[string]*bintree{}},
							}},
							"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxExtensionsHelpdialogJs, map[string]*bintree{}},
							"MatchWebFonts.js": &bintree{SrcJsThirdPartyMathjaxExtensionsMatchwebfontsJs, map[string]*bintree{}},
							"MathEvents.js": &bintree{SrcJsThirdPartyMathjaxExtensionsMatheventsJs, map[string]*bintree{}},
							"MathML": &bintree{nil, map[string]*bintree{
								"content-mathml.js": &bintree{SrcJsThirdPartyMathjaxExtensionsMathmlContentMathmlJs, map[string]*bintree{}},
								"mml3.js": &bintree{SrcJsThirdPartyMathjaxExtensionsMathmlMml3Js, map[string]*bintree{}},
							}},
							"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxExtensionsMathmenuJs, map[string]*bintree{}},
							"MathZoom.js": &bintree{SrcJsThirdPartyMathjaxExtensionsMathzoomJs, map[string]*bintree{}},
							"Safe.js": &bintree{SrcJsThirdPartyMathjaxExtensionsSafeJs, map[string]*bintree{}},
							"TeX": &bintree{nil, map[string]*bintree{
								"AMScd.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexAmscdJs, map[string]*bintree{}},
								"AMSmath.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexAmsmathJs, map[string]*bintree{}},
								"AMSsymbols.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexAmssymbolsJs, map[string]*bintree{}},
								"HTML.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexHtmlJs, map[string]*bintree{}},
								"action.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexActionJs, map[string]*bintree{}},
								"autobold.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexAutoboldJs, map[string]*bintree{}},
								"autoload-all.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexAutoloadAllJs, map[string]*bintree{}},
								"bbox.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexBboxJs, map[string]*bintree{}},
								"begingroup.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexBegingroupJs, map[string]*bintree{}},
								"boldsymbol.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexBoldsymbolJs, map[string]*bintree{}},
								"cancel.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexCancelJs, map[string]*bintree{}},
								"color.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexColorJs, map[string]*bintree{}},
								"enclose.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexEncloseJs, map[string]*bintree{}},
								"extpfeil.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexExtpfeilJs, map[string]*bintree{}},
								"mathchoice.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexMathchoiceJs, map[string]*bintree{}},
								"mediawiki-texvc.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexMediawikiTexvcJs, map[string]*bintree{}},
								"mhchem.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexMhchemJs, map[string]*bintree{}},
								"newcommand.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexNewcommandJs, map[string]*bintree{}},
								"noErrors.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexNoerrorsJs, map[string]*bintree{}},
								"noUndefined.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexNoundefinedJs, map[string]*bintree{}},
								"unicode.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexUnicodeJs, map[string]*bintree{}},
								"verb.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTexVerbJs, map[string]*bintree{}},
							}},
							"asciimath2jax.js": &bintree{SrcJsThirdPartyMathjaxExtensionsAsciimath2jaxJs, map[string]*bintree{}},
							"fast-preview.js": &bintree{SrcJsThirdPartyMathjaxExtensionsFastPreviewJs, map[string]*bintree{}},
							"jsMath2jax.js": &bintree{SrcJsThirdPartyMathjaxExtensionsJsmath2jaxJs, map[string]*bintree{}},
							"mml2jax.js": &bintree{SrcJsThirdPartyMathjaxExtensionsMml2jaxJs, map[string]*bintree{}},
							"tex2jax.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTex2jaxJs, map[string]*bintree{}},
							"toMathML.js": &bintree{SrcJsThirdPartyMathjaxExtensionsTomathmlJs, map[string]*bintree{}},
						}},
						"jax": &bintree{nil, map[string]*bintree{
							"element": &bintree{nil, map[string]*bintree{
								"mml": &bintree{nil, map[string]*bintree{
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlJaxJs, map[string]*bintree{}},
									"optable": &bintree{nil, map[string]*bintree{
										"Arrows.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableArrowsJs, map[string]*bintree{}},
										"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableBasiclatinJs, map[string]*bintree{}},
										"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiacritmarksJs, map[string]*bintree{}},
										"CombDiactForSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableCombdiactforsymbolsJs, map[string]*bintree{}},
										"Dingbats.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableDingbatsJs, map[string]*bintree{}},
										"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableGeneralpunctuationJs, map[string]*bintree{}},
										"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableGeometricshapesJs, map[string]*bintree{}},
										"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableGreekandcopticJs, map[string]*bintree{}},
										"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableLatin1supplementJs, map[string]*bintree{}},
										"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableLetterlikesymbolsJs, map[string]*bintree{}},
										"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableMathoperatorsJs, map[string]*bintree{}},
										"MiscMathSymbolsA.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsaJs, map[string]*bintree{}},
										"MiscMathSymbolsB.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscmathsymbolsbJs, map[string]*bintree{}},
										"MiscSymbolsAndArrows.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableMiscsymbolsandarrowsJs, map[string]*bintree{}},
										"MiscTechnical.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableMisctechnicalJs, map[string]*bintree{}},
										"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableSpacingmodlettersJs, map[string]*bintree{}},
										"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableSuppmathoperatorsJs, map[string]*bintree{}},
										"SupplementalArrowsA.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsaJs, map[string]*bintree{}},
										"SupplementalArrowsB.js": &bintree{SrcJsThirdPartyMathjaxJaxElementMmlOptableSupplementalarrowsbJs, map[string]*bintree{}},
									}},
								}},
							}},
							"input": &bintree{nil, map[string]*bintree{
								"AsciiMath": &bintree{nil, map[string]*bintree{
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxInputAsciimathConfigJs, map[string]*bintree{}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxInputAsciimathJaxJs, map[string]*bintree{}},
								}},
								"MathML": &bintree{nil, map[string]*bintree{
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlConfigJs, map[string]*bintree{}},
									"entities": &bintree{nil, map[string]*bintree{
										"a.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesAJs, map[string]*bintree{}},
										"b.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesBJs, map[string]*bintree{}},
										"c.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesCJs, map[string]*bintree{}},
										"d.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesDJs, map[string]*bintree{}},
										"e.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesEJs, map[string]*bintree{}},
										"f.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFJs, map[string]*bintree{}},
										"fr.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesFrJs, map[string]*bintree{}},
										"g.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesGJs, map[string]*bintree{}},
										"h.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesHJs, map[string]*bintree{}},
										"i.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesIJs, map[string]*bintree{}},
										"j.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesJJs, map[string]*bintree{}},
										"k.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesKJs, map[string]*bintree{}},
										"l.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesLJs, map[string]*bintree{}},
										"m.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesMJs, map[string]*bintree{}},
										"n.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesNJs, map[string]*bintree{}},
										"o.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOJs, map[string]*bintree{}},
										"opf.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesOpfJs, map[string]*bintree{}},
										"p.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesPJs, map[string]*bintree{}},
										"q.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesQJs, map[string]*bintree{}},
										"r.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesRJs, map[string]*bintree{}},
										"s.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesSJs, map[string]*bintree{}},
										"scr.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesScrJs, map[string]*bintree{}},
										"t.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesTJs, map[string]*bintree{}},
										"u.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesUJs, map[string]*bintree{}},
										"v.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesVJs, map[string]*bintree{}},
										"w.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesWJs, map[string]*bintree{}},
										"x.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesXJs, map[string]*bintree{}},
										"y.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesYJs, map[string]*bintree{}},
										"z.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlEntitiesZJs, map[string]*bintree{}},
									}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxInputMathmlJaxJs, map[string]*bintree{}},
								}},
								"TeX": &bintree{nil, map[string]*bintree{
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxInputTexConfigJs, map[string]*bintree{}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxInputTexJaxJs, map[string]*bintree{}},
								}},
							}},
							"output": &bintree{nil, map[string]*bintree{
								"CommonHTML": &bintree{nil, map[string]*bintree{
									"autoload": &bintree{nil, map[string]*bintree{
										"annotation-xml.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadAnnotationXmlJs, map[string]*bintree{}},
										"maction.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMactionJs, map[string]*bintree{}},
										"menclose.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMencloseJs, map[string]*bintree{}},
										"mglyph.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMglyphJs, map[string]*bintree{}},
										"mmultiscripts.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMmultiscriptsJs, map[string]*bintree{}},
										"ms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMsJs, map[string]*bintree{}},
										"mtable.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMtableJs, map[string]*bintree{}},
										"multiline.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlAutoloadMultilineJs, map[string]*bintree{}},
									}},
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlConfigJs, map[string]*bintree{}},
									"fonts": &bintree{nil, map[string]*bintree{
										"TeX": &bintree{nil, map[string]*bintree{
											"AMS-Regular.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexAmsRegularJs, map[string]*bintree{}},
											"Caligraphic-Bold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexCaligraphicBoldJs, map[string]*bintree{}},
											"Fraktur-Bold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturBoldJs, map[string]*bintree{}},
											"Fraktur-Regular.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFrakturRegularJs, map[string]*bintree{}},
											"Main-Bold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMainBoldJs, map[string]*bintree{}},
											"Math-BoldItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexMathBolditalicJs, map[string]*bintree{}},
											"SansSerif-Bold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifBoldJs, map[string]*bintree{}},
											"SansSerif-Italic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifItalicJs, map[string]*bintree{}},
											"SansSerif-Regular.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexSansserifRegularJs, map[string]*bintree{}},
											"Script-Regular.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexScriptRegularJs, map[string]*bintree{}},
											"Typewriter-Regular.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexTypewriterRegularJs, map[string]*bintree{}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlFontsTexFontdataJs, map[string]*bintree{}},
										}},
									}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputCommonhtmlJaxJs, map[string]*bintree{}},
								}},
								"HTML-CSS": &bintree{nil, map[string]*bintree{
									"autoload": &bintree{nil, map[string]*bintree{
										"annotation-xml.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadAnnotationXmlJs, map[string]*bintree{}},
										"maction.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMactionJs, map[string]*bintree{}},
										"menclose.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMencloseJs, map[string]*bintree{}},
										"mglyph.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMglyphJs, map[string]*bintree{}},
										"mmultiscripts.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMmultiscriptsJs, map[string]*bintree{}},
										"ms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMsJs, map[string]*bintree{}},
										"mtable.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMtableJs, map[string]*bintree{}},
										"multiline.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssAutoloadMultilineJs, map[string]*bintree{}},
									}},
									"blank.gif": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssBlankGif, map[string]*bintree{}},
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssConfigJs, map[string]*bintree{}},
									"fonts": &bintree{nil, map[string]*bintree{
										"Asana-Math": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsAsanaMathFontdataJs, map[string]*bintree{}},
										}},
										"Gyre-Pagella": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyrePagellaFontdataJs, map[string]*bintree{}},
										}},
										"Gyre-Termes": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsGyreTermesFontdataJs, map[string]*bintree{}},
										}},
										"Latin-Modern": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size7": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSize7RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsLatinModernFontdataJs, map[string]*bintree{}},
										}},
										"Neo-Euler": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsNeoEulerFontdataJs, map[string]*bintree{}},
										}},
										"STIX": &bintree{nil, map[string]*bintree{
											"General": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"AlphaPresentForms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldAlphapresentformsJs, map[string]*bintree{}},
													"Arrows.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldArrowsJs, map[string]*bintree{}},
													"BBBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBbboldJs, map[string]*bintree{}},
													"BoldFraktur.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoldfrakturJs, map[string]*bintree{}},
													"BoxDrawing.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldBoxdrawingJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiacritmarksJs, map[string]*bintree{}},
													"CombDiactForSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCombdiactforsymbolsJs, map[string]*bintree{}},
													"ControlPictures.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldControlpicturesJs, map[string]*bintree{}},
													"CurrencySymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCurrencysymbolsJs, map[string]*bintree{}},
													"Cyrillic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldCyrillicJs, map[string]*bintree{}},
													"EnclosedAlphanum.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldEnclosedalphanumJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeneralpunctuationJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGeometricshapesJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekandcopticJs, map[string]*bintree{}},
													"GreekBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekboldJs, map[string]*bintree{}},
													"GreekSSBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldGreekssboldJs, map[string]*bintree{}},
													"IPAExtensions.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldIpaextensionsJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedAdditional.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedadditionalJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendedbJs, map[string]*bintree{}},
													"LatinExtendedD.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLatinextendeddJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMainJs, map[string]*bintree{}},
													"MathBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathboldJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathoperatorsJs, map[string]*bintree{}},
													"MathSSBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMathssboldJs, map[string]*bintree{}},
													"MiscMathSymbolsA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsaJs, map[string]*bintree{}},
													"MiscMathSymbolsB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscmathsymbolsbJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMiscsymbolsJs, map[string]*bintree{}},
													"MiscTechnical.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldMisctechnicalJs, map[string]*bintree{}},
													"NumberForms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldNumberformsJs, map[string]*bintree{}},
													"PhoneticExtensions.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldPhoneticextensionsJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSpacingmodlettersJs, map[string]*bintree{}},
													"SuperAndSubscripts.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuperandsubscriptsJs, map[string]*bintree{}},
													"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBoldSuppmathoperatorsJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"AlphaPresentForms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicAlphapresentformsJs, map[string]*bintree{}},
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBasiclatinJs, map[string]*bintree{}},
													"BoxDrawing.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicBoxdrawingJs, map[string]*bintree{}},
													"CombDiactForSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCombdiactforsymbolsJs, map[string]*bintree{}},
													"ControlPictures.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicControlpicturesJs, map[string]*bintree{}},
													"CurrencySymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCurrencysymbolsJs, map[string]*bintree{}},
													"Cyrillic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicCyrillicJs, map[string]*bintree{}},
													"EnclosedAlphanum.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicEnclosedalphanumJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGeneralpunctuationJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekandcopticJs, map[string]*bintree{}},
													"GreekBoldItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekbolditalicJs, map[string]*bintree{}},
													"GreekSSBoldItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicGreekssbolditalicJs, map[string]*bintree{}},
													"IPAExtensions.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicIpaextensionsJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedAdditional.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedadditionalJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLatinextendedbJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMainJs, map[string]*bintree{}},
													"MathBoldItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathbolditalicJs, map[string]*bintree{}},
													"MathBoldScript.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathboldscriptJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathoperatorsJs, map[string]*bintree{}},
													"MathSSItalicBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicMathssitalicboldJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralBolditalicSpacingmodlettersJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"AlphaPresentForms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicAlphapresentformsJs, map[string]*bintree{}},
													"BoxDrawing.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicBoxdrawingJs, map[string]*bintree{}},
													"CombDiactForSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCombdiactforsymbolsJs, map[string]*bintree{}},
													"ControlPictures.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicControlpicturesJs, map[string]*bintree{}},
													"CurrencySymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCurrencysymbolsJs, map[string]*bintree{}},
													"Cyrillic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicCyrillicJs, map[string]*bintree{}},
													"EnclosedAlphanum.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicEnclosedalphanumJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGeneralpunctuationJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekandcopticJs, map[string]*bintree{}},
													"GreekItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicGreekitalicJs, map[string]*bintree{}},
													"IPAExtensions.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIpaextensionsJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedAdditional.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedadditionalJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLatinextendedbJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMainJs, map[string]*bintree{}},
													"MathItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathitalicJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathoperatorsJs, map[string]*bintree{}},
													"MathSSItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathssitalicJs, map[string]*bintree{}},
													"MathScript.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicMathscriptJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicSpacingmodlettersJs, map[string]*bintree{}},
													"ij.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralItalicIjJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"AlphaPresentForms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularAlphapresentformsJs, map[string]*bintree{}},
													"Arrows.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularArrowsJs, map[string]*bintree{}},
													"BBBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBbboldJs, map[string]*bintree{}},
													"BlockElements.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBlockelementsJs, map[string]*bintree{}},
													"BoldFraktur.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoldfrakturJs, map[string]*bintree{}},
													"BoxDrawing.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularBoxdrawingJs, map[string]*bintree{}},
													"CJK.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCjkJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiacritmarksJs, map[string]*bintree{}},
													"CombDiactForSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCombdiactforsymbolsJs, map[string]*bintree{}},
													"ControlPictures.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularControlpicturesJs, map[string]*bintree{}},
													"CurrencySymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCurrencysymbolsJs, map[string]*bintree{}},
													"Cyrillic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularCyrillicJs, map[string]*bintree{}},
													"Dingbats.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularDingbatsJs, map[string]*bintree{}},
													"EnclosedAlphanum.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularEnclosedalphanumJs, map[string]*bintree{}},
													"Fraktur.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularFrakturJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeneralpunctuationJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGeometricshapesJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekandcopticJs, map[string]*bintree{}},
													"GreekBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekboldJs, map[string]*bintree{}},
													"GreekBoldItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekbolditalicJs, map[string]*bintree{}},
													"GreekItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekitalicJs, map[string]*bintree{}},
													"GreekSSBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssboldJs, map[string]*bintree{}},
													"GreekSSBoldItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularGreekssbolditalicJs, map[string]*bintree{}},
													"Hiragana.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularHiraganaJs, map[string]*bintree{}},
													"IPAExtensions.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIpaextensionsJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedAdditional.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedadditionalJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendedbJs, map[string]*bintree{}},
													"LatinExtendedD.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLatinextendeddJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMainJs, map[string]*bintree{}},
													"MathBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldJs, map[string]*bintree{}},
													"MathBoldItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathbolditalicJs, map[string]*bintree{}},
													"MathBoldScript.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathboldscriptJs, map[string]*bintree{}},
													"MathItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathitalicJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathoperatorsJs, map[string]*bintree{}},
													"MathSS.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssJs, map[string]*bintree{}},
													"MathSSBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssboldJs, map[string]*bintree{}},
													"MathSSItalic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicJs, map[string]*bintree{}},
													"MathSSItalicBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathssitalicboldJs, map[string]*bintree{}},
													"MathScript.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathscriptJs, map[string]*bintree{}},
													"MathTT.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMathttJs, map[string]*bintree{}},
													"MiscMathSymbolsA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsaJs, map[string]*bintree{}},
													"MiscMathSymbolsB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscmathsymbolsbJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsJs, map[string]*bintree{}},
													"MiscSymbolsAndArrows.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMiscsymbolsandarrowsJs, map[string]*bintree{}},
													"MiscTechnical.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularMisctechnicalJs, map[string]*bintree{}},
													"NumberForms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularNumberformsJs, map[string]*bintree{}},
													"PhoneticExtensions.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularPhoneticextensionsJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpacingmodlettersJs, map[string]*bintree{}},
													"Specials.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSpecialsJs, map[string]*bintree{}},
													"SuperAndSubscripts.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuperandsubscriptsJs, map[string]*bintree{}},
													"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSuppmathoperatorsJs, map[string]*bintree{}},
													"SupplementalArrowsA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsaJs, map[string]*bintree{}},
													"SupplementalArrowsB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularSupplementalarrowsbJs, map[string]*bintree{}},
													"ij.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixGeneralRegularIjJs, map[string]*bintree{}},
												}},
											}},
											"IntegralsD": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdBoldAllJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsdRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"IntegralsSm": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmBoldAllJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralssmRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"IntegralsUp": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupBoldAllJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"IntegralsUpD": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdBoldAllJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupdRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"IntegralsUpSm": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmBoldAllJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixIntegralsupsmRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldMainJs, map[string]*bintree{}},
													"PrivateUse.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBoldPrivateuseJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicMainJs, map[string]*bintree{}},
													"PrivateUse.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeBolditalicPrivateuseJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicMainJs, map[string]*bintree{}},
													"PrivateUse.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeItalicPrivateuseJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularMainJs, map[string]*bintree{}},
													"PrivateUse.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixNonunicodeRegularPrivateuseJs, map[string]*bintree{}},
												}},
											}},
											"SizeFiveSym": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefivesymRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SizeFourSym": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizefoursymRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SizeOneSym": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizeonesymRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SizeThreeSym": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizethreesymRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SizeTwoSym": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixSizetwosymRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"All.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularAllJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-1.0.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdata10Js, map[string]*bintree{}},
											"fontdata-beta.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataBetaJs, map[string]*bintree{}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixFontdataJs, map[string]*bintree{}},
										}},
										"STIX-Web": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebNormalItalicMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesBolditalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsStixWebFontdataJs, map[string]*bintree{}},
										}},
										"TeX": &bintree{nil, map[string]*bintree{
											"AMS": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Arrows.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularArrowsJs, map[string]*bintree{}},
													"BBBold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBbboldJs, map[string]*bintree{}},
													"BoxDrawing.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularBoxdrawingJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularCombdiacritmarksJs, map[string]*bintree{}},
													"Dingbats.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularDingbatsJs, map[string]*bintree{}},
													"EnclosedAlphanum.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularEnclosedalphanumJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeneralpunctuationJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGeometricshapesJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularGreekandcopticJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLatinextendedaJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMainJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMathoperatorsJs, map[string]*bintree{}},
													"MiscMathSymbolsB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscmathsymbolsbJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMiscsymbolsJs, map[string]*bintree{}},
													"MiscTechnical.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularMisctechnicalJs, map[string]*bintree{}},
													"PUA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularPuaJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSpacingmodlettersJs, map[string]*bintree{}},
													"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexAmsRegularSuppmathoperatorsJs, map[string]*bintree{}},
												}},
											}},
											"Caligraphic": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexCaligraphicRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldBasiclatinJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldOtherJs, map[string]*bintree{}},
													"PUA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturBoldPuaJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularBasiclatinJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularOtherJs, map[string]*bintree{}},
													"PUA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFrakturRegularPuaJs, map[string]*bintree{}},
												}},
											}},
											"Greek": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexGreekRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Arrows.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldArrowsJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiacritmarksJs, map[string]*bintree{}},
													"CombDiactForSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldCombdiactforsymbolsJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeneralpunctuationJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldGeometricshapesJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLatinextendedbJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMainJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMathoperatorsJs, map[string]*bintree{}},
													"MiscMathSymbolsA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscmathsymbolsaJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMiscsymbolsJs, map[string]*bintree{}},
													"MiscTechnical.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldMisctechnicalJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSpacingmodlettersJs, map[string]*bintree{}},
													"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSuppmathoperatorsJs, map[string]*bintree{}},
													"SupplementalArrowsA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainBoldSupplementalarrowsaJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicCombdiacritmarksJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicGeneralpunctuationJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLatin1supplementJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularCombdiacritmarksJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularGeometricshapesJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMainJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularMiscsymbolsJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMainRegularSpacingmodlettersJs, map[string]*bintree{}},
												}},
											}},
											"Math": &bintree{nil, map[string]*bintree{
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexMathItalicMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifBoldOtherJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifItalicOtherJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSansserifRegularOtherJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularBasiclatinJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexScriptRegularOtherJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Typewriter": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexTypewriterRegularOtherJs, map[string]*bintree{}},
												}},
											}},
											"WinChrome": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinchromeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"WinIE6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"AMS.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularAmsJs, map[string]*bintree{}},
													"Bold.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularBoldJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexWinie6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssFontsTexFontdataJs, map[string]*bintree{}},
										}},
									}},
									"imageFonts.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssImagefontsJs, map[string]*bintree{}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputHtmlCssJaxJs, map[string]*bintree{}},
								}},
								"NativeMML": &bintree{nil, map[string]*bintree{
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputNativemmlConfigJs, map[string]*bintree{}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputNativemmlJaxJs, map[string]*bintree{}},
								}},
								"PlainSource": &bintree{nil, map[string]*bintree{
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputPlainsourceConfigJs, map[string]*bintree{}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputPlainsourceJaxJs, map[string]*bintree{}},
								}},
								"PreviewHTML": &bintree{nil, map[string]*bintree{
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlConfigJs, map[string]*bintree{}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputPreviewhtmlJaxJs, map[string]*bintree{}},
								}},
								"SVG": &bintree{nil, map[string]*bintree{
									"autoload": &bintree{nil, map[string]*bintree{
										"annotation-xml.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadAnnotationXmlJs, map[string]*bintree{}},
										"maction.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMactionJs, map[string]*bintree{}},
										"menclose.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMencloseJs, map[string]*bintree{}},
										"mglyph.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMglyphJs, map[string]*bintree{}},
										"mmultiscripts.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMmultiscriptsJs, map[string]*bintree{}},
										"ms.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMsJs, map[string]*bintree{}},
										"mtable.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMtableJs, map[string]*bintree{}},
										"multiline.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgAutoloadMultilineJs, map[string]*bintree{}},
									}},
									"config.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgConfigJs, map[string]*bintree{}},
									"fonts": &bintree{nil, map[string]*bintree{
										"Asana-Math": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsAsanaMathFontdataJs, map[string]*bintree{}},
										}},
										"Gyre-Pagella": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyrePagellaFontdataJs, map[string]*bintree{}},
										}},
										"Gyre-Termes": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsGyreTermesFontdataJs, map[string]*bintree{}},
										}},
										"Latin-Modern": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size6": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize6RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size7": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSize7RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsLatinModernFontdataJs, map[string]*bintree{}},
										}},
										"Neo-Euler": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"NonUnicode": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNonunicodeRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerNormalRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsNeoEulerFontdataJs, map[string]*bintree{}},
										}},
										"STIX-Web": &bintree{nil, map[string]*bintree{
											"Alphabets": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebAlphabetsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Arrows": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebArrowsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"DoubleStruck": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebDoublestruckRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFrakturRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Latin": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebLatinRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMainRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Marks": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMarksRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Misc": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMiscRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Monospace": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebMonospaceRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Normal": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebNormalItalicMainJs, map[string]*bintree{}},
												}},
											}},
											"Operators": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebOperatorsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSansserifRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Shapes": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesBolditalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebShapesRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size5": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSize5RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Symbols": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebSymbolsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Variants": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBoldMainJs, map[string]*bintree{}},
												}},
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsItalicMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebVariantsRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsStixWebFontdataJs, map[string]*bintree{}},
										}},
										"TeX": &bintree{nil, map[string]*bintree{
											"AMS": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Arrows.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularArrowsJs, map[string]*bintree{}},
													"BoxDrawing.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularBoxdrawingJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularCombdiacritmarksJs, map[string]*bintree{}},
													"Dingbats.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularDingbatsJs, map[string]*bintree{}},
													"EnclosedAlphanum.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularEnclosedalphanumJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeneralpunctuationJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGeometricshapesJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularGreekandcopticJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLatinextendedaJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMainJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMathoperatorsJs, map[string]*bintree{}},
													"MiscMathSymbolsB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscmathsymbolsbJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMiscsymbolsJs, map[string]*bintree{}},
													"MiscTechnical.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularMisctechnicalJs, map[string]*bintree{}},
													"PUA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularPuaJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSpacingmodlettersJs, map[string]*bintree{}},
													"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexAmsRegularSuppmathoperatorsJs, map[string]*bintree{}},
												}},
											}},
											"Caligraphic": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicBoldMainJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexCaligraphicRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Fraktur": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldBasiclatinJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldOtherJs, map[string]*bintree{}},
													"PUA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturBoldPuaJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularBasiclatinJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularOtherJs, map[string]*bintree{}},
													"PUA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFrakturRegularPuaJs, map[string]*bintree{}},
												}},
											}},
											"Main": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"Arrows.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldArrowsJs, map[string]*bintree{}},
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiacritmarksJs, map[string]*bintree{}},
													"CombDiactForSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldCombdiactforsymbolsJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeneralpunctuationJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGeometricshapesJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldGreekandcopticJs, map[string]*bintree{}},
													"Latin1Supplement.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatin1supplementJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLatinextendedbJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMainJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMathoperatorsJs, map[string]*bintree{}},
													"MiscMathSymbolsA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscmathsymbolsaJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMiscsymbolsJs, map[string]*bintree{}},
													"MiscTechnical.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldMisctechnicalJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSpacingmodlettersJs, map[string]*bintree{}},
													"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSuppmathoperatorsJs, map[string]*bintree{}},
													"SupplementalArrowsA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainBoldSupplementalarrowsaJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicCombdiacritmarksJs, map[string]*bintree{}},
													"GeneralPunctuation.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGeneralpunctuationJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicGreekandcopticJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLatinextendedbJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMainJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainItalicMathoperatorsJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularCombdiacritmarksJs, map[string]*bintree{}},
													"GeometricShapes.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGeometricshapesJs, map[string]*bintree{}},
													"GreekAndCoptic.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularGreekandcopticJs, map[string]*bintree{}},
													"LatinExtendedA.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedaJs, map[string]*bintree{}},
													"LatinExtendedB.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLatinextendedbJs, map[string]*bintree{}},
													"LetterlikeSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularLetterlikesymbolsJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMainJs, map[string]*bintree{}},
													"MathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMathoperatorsJs, map[string]*bintree{}},
													"MiscSymbols.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularMiscsymbolsJs, map[string]*bintree{}},
													"SpacingModLetters.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSpacingmodlettersJs, map[string]*bintree{}},
													"SuppMathOperators.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMainRegularSuppmathoperatorsJs, map[string]*bintree{}},
												}},
											}},
											"Math": &bintree{nil, map[string]*bintree{
												"BoldItalic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathBolditalicMainJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexMathItalicMainJs, map[string]*bintree{}},
												}},
											}},
											"SansSerif": &bintree{nil, map[string]*bintree{
												"Bold": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifBoldOtherJs, map[string]*bintree{}},
												}},
												"Italic": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifItalicOtherJs, map[string]*bintree{}},
												}},
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSansserifRegularOtherJs, map[string]*bintree{}},
												}},
											}},
											"Script": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularBasiclatinJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexScriptRegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size1": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize1RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size2": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize2RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size3": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize3RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Size4": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexSize4RegularMainJs, map[string]*bintree{}},
												}},
											}},
											"Typewriter": &bintree{nil, map[string]*bintree{
												"Regular": &bintree{nil, map[string]*bintree{
													"BasicLatin.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularBasiclatinJs, map[string]*bintree{}},
													"CombDiacritMarks.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularCombdiacritmarksJs, map[string]*bintree{}},
													"Main.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularMainJs, map[string]*bintree{}},
													"Other.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexTypewriterRegularOtherJs, map[string]*bintree{}},
												}},
											}},
											"fontdata-extra.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataExtraJs, map[string]*bintree{}},
											"fontdata.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgFontsTexFontdataJs, map[string]*bintree{}},
										}},
									}},
									"jax.js": &bintree{SrcJsThirdPartyMathjaxJaxOutputSvgJaxJs, map[string]*bintree{}},
								}},
							}},
						}},
						"localization": &bintree{nil, map[string]*bintree{
							"ast": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationAstFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationAstHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationAstHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationAstMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationAstMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationAstTexJs, map[string]*bintree{}},
								"ast.js": &bintree{SrcJsThirdPartyMathjaxLocalizationAstAstJs, map[string]*bintree{}},
							}},
							"bcc": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBccFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBccHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBccHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBccMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBccMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBccTexJs, map[string]*bintree{}},
								"bcc.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBccBccJs, map[string]*bintree{}},
							}},
							"bg": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBgFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBgHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBgHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBgMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBgMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBgTexJs, map[string]*bintree{}},
								"bg.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBgBgJs, map[string]*bintree{}},
							}},
							"br": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBrFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBrHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBrHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBrMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBrMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBrTexJs, map[string]*bintree{}},
								"br.js": &bintree{SrcJsThirdPartyMathjaxLocalizationBrBrJs, map[string]*bintree{}},
							}},
							"ca": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCaFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCaHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCaHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCaMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCaMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCaTexJs, map[string]*bintree{}},
								"ca.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCaCaJs, map[string]*bintree{}},
							}},
							"cdo": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCdoFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCdoHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCdoHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCdoMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCdoMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCdoTexJs, map[string]*bintree{}},
								"cdo.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCdoCdoJs, map[string]*bintree{}},
							}},
							"ce": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCeFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCeHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCeHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCeMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCeMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCeTexJs, map[string]*bintree{}},
								"ce.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCeCeJs, map[string]*bintree{}},
							}},
							"cs": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCsFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCsHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCsHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCsMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCsMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCsTexJs, map[string]*bintree{}},
								"cs.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCsCsJs, map[string]*bintree{}},
							}},
							"cy": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCyFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCyHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCyHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCyMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCyMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCyTexJs, map[string]*bintree{}},
								"cy.js": &bintree{SrcJsThirdPartyMathjaxLocalizationCyCyJs, map[string]*bintree{}},
							}},
							"da": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDaFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDaHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDaHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDaMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDaMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDaTexJs, map[string]*bintree{}},
								"da.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDaDaJs, map[string]*bintree{}},
							}},
							"de": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDeFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDeHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDeHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDeMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDeMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDeTexJs, map[string]*bintree{}},
								"de.js": &bintree{SrcJsThirdPartyMathjaxLocalizationDeDeJs, map[string]*bintree{}},
							}},
							"en": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEnFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEnHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEnHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEnMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEnMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEnTexJs, map[string]*bintree{}},
								"en.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEnEnJs, map[string]*bintree{}},
							}},
							"eo": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEoFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEoHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEoHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEoMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEoMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEoTexJs, map[string]*bintree{}},
								"eo.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEoEoJs, map[string]*bintree{}},
							}},
							"es": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEsFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEsHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEsHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEsMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEsMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEsTexJs, map[string]*bintree{}},
								"es.js": &bintree{SrcJsThirdPartyMathjaxLocalizationEsEsJs, map[string]*bintree{}},
							}},
							"fa": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFaFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFaHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFaHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFaMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFaMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFaTexJs, map[string]*bintree{}},
								"fa.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFaFaJs, map[string]*bintree{}},
							}},
							"fi": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFiFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFiHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFiHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFiMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFiMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFiTexJs, map[string]*bintree{}},
								"fi.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFiFiJs, map[string]*bintree{}},
							}},
							"fr": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFrFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFrHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFrHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFrMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFrMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFrTexJs, map[string]*bintree{}},
								"fr.js": &bintree{SrcJsThirdPartyMathjaxLocalizationFrFrJs, map[string]*bintree{}},
							}},
							"gl": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationGlFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationGlHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationGlHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationGlMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationGlMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationGlTexJs, map[string]*bintree{}},
								"gl.js": &bintree{SrcJsThirdPartyMathjaxLocalizationGlGlJs, map[string]*bintree{}},
							}},
							"he": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationHeFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationHeHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationHeHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationHeMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationHeMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationHeTexJs, map[string]*bintree{}},
								"he.js": &bintree{SrcJsThirdPartyMathjaxLocalizationHeHeJs, map[string]*bintree{}},
							}},
							"ia": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationIaFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationIaHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationIaHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationIaMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationIaMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationIaTexJs, map[string]*bintree{}},
								"ia.js": &bintree{SrcJsThirdPartyMathjaxLocalizationIaIaJs, map[string]*bintree{}},
							}},
							"it": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationItFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationItHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationItHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationItMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationItMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationItTexJs, map[string]*bintree{}},
								"it.js": &bintree{SrcJsThirdPartyMathjaxLocalizationItItJs, map[string]*bintree{}},
							}},
							"ja": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationJaFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationJaHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationJaHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationJaMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationJaMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationJaTexJs, map[string]*bintree{}},
								"ja.js": &bintree{SrcJsThirdPartyMathjaxLocalizationJaJaJs, map[string]*bintree{}},
							}},
							"kn": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKnFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKnHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKnHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKnMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKnMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKnTexJs, map[string]*bintree{}},
								"kn.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKnKnJs, map[string]*bintree{}},
							}},
							"ko": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKoFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKoHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKoHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKoMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKoMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKoTexJs, map[string]*bintree{}},
								"ko.js": &bintree{SrcJsThirdPartyMathjaxLocalizationKoKoJs, map[string]*bintree{}},
							}},
							"lb": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLbFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLbHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLbHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLbMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLbMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLbTexJs, map[string]*bintree{}},
								"lb.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLbLbJs, map[string]*bintree{}},
							}},
							"lki": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLkiFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLkiHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLkiHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLkiMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLkiMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLkiTexJs, map[string]*bintree{}},
								"lki.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLkiLkiJs, map[string]*bintree{}},
							}},
							"lt": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLtFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLtHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLtHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLtMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLtMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLtTexJs, map[string]*bintree{}},
								"lt.js": &bintree{SrcJsThirdPartyMathjaxLocalizationLtLtJs, map[string]*bintree{}},
							}},
							"mk": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationMkFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationMkHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationMkHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationMkMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationMkMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationMkTexJs, map[string]*bintree{}},
								"mk.js": &bintree{SrcJsThirdPartyMathjaxLocalizationMkMkJs, map[string]*bintree{}},
							}},
							"nl": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationNlFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationNlHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationNlHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationNlMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationNlMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationNlTexJs, map[string]*bintree{}},
								"nl.js": &bintree{SrcJsThirdPartyMathjaxLocalizationNlNlJs, map[string]*bintree{}},
							}},
							"oc": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationOcFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationOcHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationOcHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationOcMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationOcMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationOcTexJs, map[string]*bintree{}},
								"oc.js": &bintree{SrcJsThirdPartyMathjaxLocalizationOcOcJs, map[string]*bintree{}},
							}},
							"pl": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPlFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPlHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPlHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPlMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPlMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPlTexJs, map[string]*bintree{}},
								"pl.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPlPlJs, map[string]*bintree{}},
							}},
							"pt": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtTexJs, map[string]*bintree{}},
								"pt.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtPtJs, map[string]*bintree{}},
							}},
							"pt-br": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtBrFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtBrHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtBrHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtBrMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtBrMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtBrTexJs, map[string]*bintree{}},
								"pt-br.js": &bintree{SrcJsThirdPartyMathjaxLocalizationPtBrPtBrJs, map[string]*bintree{}},
							}},
							"qqq": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationQqqFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationQqqHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationQqqHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationQqqMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationQqqMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationQqqTexJs, map[string]*bintree{}},
								"qqq.js": &bintree{SrcJsThirdPartyMathjaxLocalizationQqqQqqJs, map[string]*bintree{}},
							}},
							"ru": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationRuFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationRuHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationRuHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationRuMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationRuMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationRuTexJs, map[string]*bintree{}},
								"ru.js": &bintree{SrcJsThirdPartyMathjaxLocalizationRuRuJs, map[string]*bintree{}},
							}},
							"scn": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScnFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScnHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScnHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScnMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScnMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScnTexJs, map[string]*bintree{}},
								"scn.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScnScnJs, map[string]*bintree{}},
							}},
							"sco": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScoFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScoHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScoHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScoMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScoMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScoTexJs, map[string]*bintree{}},
								"sco.js": &bintree{SrcJsThirdPartyMathjaxLocalizationScoScoJs, map[string]*bintree{}},
							}},
							"sl": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSlFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSlHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSlHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSlMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSlMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSlTexJs, map[string]*bintree{}},
								"sl.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSlSlJs, map[string]*bintree{}},
							}},
							"sv": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSvFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSvHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSvHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSvMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSvMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSvTexJs, map[string]*bintree{}},
								"sv.js": &bintree{SrcJsThirdPartyMathjaxLocalizationSvSvJs, map[string]*bintree{}},
							}},
							"tr": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationTrFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationTrHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationTrHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationTrMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationTrMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationTrTexJs, map[string]*bintree{}},
								"tr.js": &bintree{SrcJsThirdPartyMathjaxLocalizationTrTrJs, map[string]*bintree{}},
							}},
							"uk": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationUkFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationUkHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationUkHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationUkMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationUkMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationUkTexJs, map[string]*bintree{}},
								"uk.js": &bintree{SrcJsThirdPartyMathjaxLocalizationUkUkJs, map[string]*bintree{}},
							}},
							"vi": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationViFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationViHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationViHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationViMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationViMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationViTexJs, map[string]*bintree{}},
								"vi.js": &bintree{SrcJsThirdPartyMathjaxLocalizationViViJs, map[string]*bintree{}},
							}},
							"zh-hans": &bintree{nil, map[string]*bintree{
								"FontWarnings.js": &bintree{SrcJsThirdPartyMathjaxLocalizationZhHansFontwarningsJs, map[string]*bintree{}},
								"HTML-CSS.js": &bintree{SrcJsThirdPartyMathjaxLocalizationZhHansHtmlCssJs, map[string]*bintree{}},
								"HelpDialog.js": &bintree{SrcJsThirdPartyMathjaxLocalizationZhHansHelpdialogJs, map[string]*bintree{}},
								"MathML.js": &bintree{SrcJsThirdPartyMathjaxLocalizationZhHansMathmlJs, map[string]*bintree{}},
								"MathMenu.js": &bintree{SrcJsThirdPartyMathjaxLocalizationZhHansMathmenuJs, map[string]*bintree{}},
								"TeX.js": &bintree{SrcJsThirdPartyMathjaxLocalizationZhHansTexJs, map[string]*bintree{}},
								"zh-hans.js": &bintree{SrcJsThirdPartyMathjaxLocalizationZhHansZhHansJs, map[string]*bintree{}},
							}},
						}},
					}},
					"sweetalert.min.js": &bintree{SrcJsThirdPartySweetalertMinJs, map[string]*bintree{}},
					"tag-it.js": &bintree{SrcJsThirdPartyTagItJs, map[string]*bintree{}},
					"underscore-min.js": &bintree{SrcJsThirdPartyUnderscoreMinJs, map[string]*bintree{}},
					"underscore-min.map": &bintree{SrcJsThirdPartyUnderscoreMinMap, map[string]*bintree{}},
				}},
				"zebedee-api": &bintree{nil, map[string]*bintree{
					"_deleteCollection.js": &bintree{SrcJsZebedeeApi_deletecollectionJs, map[string]*bintree{}},
					"_deleteContent.js": &bintree{SrcJsZebedeeApi_deletecontentJs, map[string]*bintree{}},
					"_deleteEquation.js": &bintree{SrcJsZebedeeApi_deleteequationJs, map[string]*bintree{}},
					"_getCollection.js": &bintree{SrcJsZebedeeApi_getcollectionJs, map[string]*bintree{}},
					"_getPageData.js": &bintree{SrcJsZebedeeApi_getpagedataJs, map[string]*bintree{}},
					"_getPageResource.js": &bintree{SrcJsZebedeeApi_getpageresourceJs, map[string]*bintree{}},
					"_getTeams.js": &bintree{SrcJsZebedeeApi_getteamsJs, map[string]*bintree{}},
					"_getUserPermission.js": &bintree{SrcJsZebedeeApi_getuserpermissionJs, map[string]*bintree{}},
					"_getUsers.js": &bintree{SrcJsZebedeeApi_getusersJs, map[string]*bintree{}},
					"_moveContent.js": &bintree{SrcJsZebedeeApi_movecontentJs, map[string]*bintree{}},
					"_postPassword.js": &bintree{SrcJsZebedeeApi_postpasswordJs, map[string]*bintree{}},
					"_postPermission.js": &bintree{SrcJsZebedeeApi_postpermissionJs, map[string]*bintree{}},
					"_putContent.js": &bintree{SrcJsZebedeeApi_putcontentJs, map[string]*bintree{}},
				}},
			}},
			"manifest.json": &bintree{SrcManifestJson, map[string]*bintree{}},
			"package.json": &bintree{SrcPackageJson, map[string]*bintree{}},
			"scss": &bintree{nil, map[string]*bintree{
				"components": &bintree{nil, map[string]*bintree{
					"_accordion.scss": &bintree{SrcScssComponents_accordionScss, map[string]*bintree{}},
					"_builder.scss": &bintree{SrcScssComponents_builderScss, map[string]*bintree{}},
					"_icons.scss": &bintree{SrcScssComponents_iconsScss, map[string]*bintree{}},
					"_markdown-editor.scss": &bintree{SrcScssComponents_markdownEditorScss, map[string]*bintree{}},
					"_network-status.scss": &bintree{SrcScssComponents_networkStatusScss, map[string]*bintree{}},
					"_page.scss": &bintree{SrcScssComponents_pageScss, map[string]*bintree{}},
					"_slider.scss": &bintree{SrcScssComponents_sliderScss, map[string]*bintree{}},
				}},
				"elements": &bintree{nil, map[string]*bintree{
					"_buttons.scss": &bintree{SrcScssElements_buttonsScss, map[string]*bintree{}},
					"_forms.scss": &bintree{SrcScssElements_formsScss, map[string]*bintree{}},
					"_inputs.scss": &bintree{SrcScssElements_inputsScss, map[string]*bintree{}},
					"_nav.scss": &bintree{SrcScssElements_navScss, map[string]*bintree{}},
					"_tables.scss": &bintree{SrcScssElements_tablesScss, map[string]*bintree{}},
					"_typography.scss": &bintree{SrcScssElements_typographyScss, map[string]*bintree{}},
				}},
				"main.scss": &bintree{SrcScssMainScss, map[string]*bintree{}},
				"partials": &bintree{nil, map[string]*bintree{
					"_base.scss": &bintree{SrcScssPartials_baseScss, map[string]*bintree{}},
					"_collections.scss": &bintree{SrcScssPartials_collectionsScss, map[string]*bintree{}},
					"_colour-palette.scss": &bintree{SrcScssPartials_colourPaletteScss, map[string]*bintree{}},
					"_elements.scss": &bintree{SrcScssPartials_elementsScss, map[string]*bintree{}},
					"_fonts.scss": &bintree{SrcScssPartials_fontsScss, map[string]*bintree{}},
					"_jqui.scss": &bintree{SrcScssPartials_jquiScss, map[string]*bintree{}},
					"_publish.scss": &bintree{SrcScssPartials_publishScss, map[string]*bintree{}},
					"_reset.scss": &bintree{SrcScssPartials_resetScss, map[string]*bintree{}},
					"_shame.scss": &bintree{SrcScssPartials_shameScss, map[string]*bintree{}},
					"_utilities.scss": &bintree{SrcScssPartials_utilitiesScss, map[string]*bintree{}},
					"_workspace.scss": &bintree{SrcScssPartials_workspaceScss, map[string]*bintree{}},
				}},
				"utilities": &bintree{nil, map[string]*bintree{
					"_display.scss": &bintree{SrcScssUtilities_displayScss, map[string]*bintree{}},
					"_grid.scss": &bintree{SrcScssUtilities_gridScss, map[string]*bintree{}},
					"_margin.scss": &bintree{SrcScssUtilities_marginScss, map[string]*bintree{}},
					"_mixins.scss": &bintree{SrcScssUtilities_mixinsScss, map[string]*bintree{}},
					"_padding.scss": &bintree{SrcScssUtilities_paddingScss, map[string]*bintree{}},
					"_panels.scss": &bintree{SrcScssUtilities_panelsScss, map[string]*bintree{}},
					"_utilities.scss": &bintree{SrcScssUtilities_utilitiesScss, map[string]*bintree{}},
				}},
			}},
			"service-worker.js": &bintree{SrcServiceWorkerJs, map[string]*bintree{}},
			"spec": &bintree{nil, map[string]*bintree{
				"classes": &bintree{nil, map[string]*bintree{
					"FlorenceSpec.js": &bintree{SrcSpecClassesFlorencespecJs, map[string]*bintree{}},
					"PathUtilsSpec.js": &bintree{SrcSpecClassesPathutilsspecJs, map[string]*bintree{}},
					"StringUtilsSpec.js": &bintree{SrcSpecClassesStringutilsspecJs, map[string]*bintree{}},
				}},
				"support": &bintree{nil, map[string]*bintree{
					"jasmine.json": &bintree{SrcSpecSupportJasmineJson, map[string]*bintree{}},
				}},
			}},
			"templates": &bintree{nil, map[string]*bintree{
				"blockModal.handlebars": &bintree{SrcTemplatesBlockmodalHandlebars, map[string]*bintree{}},
				"blockNewsModal.handlebars": &bintree{SrcTemplatesBlocknewsmodalHandlebars, map[string]*bintree{}},
				"browseNode.handlebars": &bintree{SrcTemplatesBrowsenodeHandlebars, map[string]*bintree{}},
				"browseNodeDataVis.handlebars": &bintree{SrcTemplatesBrowsenodedatavisHandlebars, map[string]*bintree{}},
				"changePassword.handlebars": &bintree{SrcTemplatesChangepasswordHandlebars, map[string]*bintree{}},
				"chartBuilder.handlebars": &bintree{SrcTemplatesChartbuilderHandlebars, map[string]*bintree{}},
				"chartEditBarChartExtras.handlebars": &bintree{SrcTemplatesCharteditbarchartextrasHandlebars, map[string]*bintree{}},
				"chartEditBarlineExtras.handlebars": &bintree{SrcTemplatesCharteditbarlineextrasHandlebars, map[string]*bintree{}},
				"chartEditDualAxisExtras.handlebars": &bintree{SrcTemplatesCharteditdualaxisextrasHandlebars, map[string]*bintree{}},
				"chartEditLineChartExtras.handlebars": &bintree{SrcTemplatesCharteditlinechartextrasHandlebars, map[string]*bintree{}},
				"childDeletes.handlebars": &bintree{SrcTemplatesChilddeletesHandlebars, map[string]*bintree{}},
				"collectionDetails.handlebars": &bintree{SrcTemplatesCollectiondetailsHandlebars, map[string]*bintree{}},
				"collectionEdit.handlebars": &bintree{SrcTemplatesCollectioneditHandlebars, map[string]*bintree{}},
				"collectionList.handlebars": &bintree{SrcTemplatesCollectionlistHandlebars, map[string]*bintree{}},
				"editNav.handlebars": &bintree{SrcTemplatesEditnavHandlebars, map[string]*bintree{}},
				"editNavChild.handlebars": &bintree{SrcTemplatesEditnavchildHandlebars, map[string]*bintree{}},
				"editorAlert.handlebars": &bintree{SrcTemplatesEditoralertHandlebars, map[string]*bintree{}},
				"editorCompendiumDatasetFiles.handlebars": &bintree{SrcTemplatesEditorcompendiumdatasetfilesHandlebars, map[string]*bintree{}},
				"editorContent.handlebars": &bintree{SrcTemplatesEditorcontentHandlebars, map[string]*bintree{}},
				"editorContentNoTitle.handlebars": &bintree{SrcTemplatesEditorcontentnotitleHandlebars, map[string]*bintree{}},
				"editorContentOne.handlebars": &bintree{SrcTemplatesEditorcontentoneHandlebars, map[string]*bintree{}},
				"editorCorrection.handlebars": &bintree{SrcTemplatesEditorcorrectionHandlebars, map[string]*bintree{}},
				"editorDate.handlebars": &bintree{SrcTemplatesEditordateHandlebars, map[string]*bintree{}},
				"editorDocWithFiles.handlebars": &bintree{SrcTemplatesEditordocwithfilesHandlebars, map[string]*bintree{}},
				"editorDownloads.handlebars": &bintree{SrcTemplatesEditordownloadsHandlebars, map[string]*bintree{}},
				"editorDownloadsWithSummary.handlebars": &bintree{SrcTemplatesEditordownloadswithsummaryHandlebars, map[string]*bintree{}},
				"editorLinks.handlebars": &bintree{SrcTemplatesEditorlinksHandlebars, map[string]*bintree{}},
				"editorRelated.handlebars": &bintree{SrcTemplatesEditorrelatedHandlebars, map[string]*bintree{}},
				"editorServiceMessage.handlebars": &bintree{SrcTemplatesEditorservicemessageHandlebars, map[string]*bintree{}},
				"editorT1Blocks.handlebars": &bintree{SrcTemplatesEditort1blocksHandlebars, map[string]*bintree{}},
				"editorTopics.handlebars": &bintree{SrcTemplatesEditortopicsHandlebars, map[string]*bintree{}},
				"embedIframe.handlebars": &bintree{SrcTemplatesEmbediframeHandlebars, map[string]*bintree{}},
				"equationBuilder.handlebars": &bintree{SrcTemplatesEquationbuilderHandlebars, map[string]*bintree{}},
				"florence.handlebars": &bintree{SrcTemplatesFlorenceHandlebars, map[string]*bintree{}},
				"iframeNav.handlebars": &bintree{SrcTemplatesIframenavHandlebars, map[string]*bintree{}},
				"imageBuilder.handlebars": &bintree{SrcTemplatesImagebuilderHandlebars, map[string]*bintree{}},
				"linkExternalModal.handlebars": &bintree{SrcTemplatesLinkexternalmodalHandlebars, map[string]*bintree{}},
				"linkModal.handlebars": &bintree{SrcTemplatesLinkmodalHandlebars, map[string]*bintree{}},
				"loadingAnimation.handlebars": &bintree{SrcTemplatesLoadinganimationHandlebars, map[string]*bintree{}},
				"login.handlebars": &bintree{SrcTemplatesLoginHandlebars, map[string]*bintree{}},
				"mainNav.handlebars": &bintree{SrcTemplatesMainnavHandlebars, map[string]*bintree{}},
				"markdownEditor.handlebars": &bintree{SrcTemplatesMarkdowneditorHandlebars, map[string]*bintree{}},
				"markdownEditorNoTitle.handlebars": &bintree{SrcTemplatesMarkdowneditornotitleHandlebars, map[string]*bintree{}},
				"publishDetails.handlebars": &bintree{SrcTemplatesPublishdetailsHandlebars, map[string]*bintree{}},
				"publishList.handlebars": &bintree{SrcTemplatesPublishlistHandlebars, map[string]*bintree{}},
				"relatedModal.handlebars": &bintree{SrcTemplatesRelatedmodalHandlebars, map[string]*bintree{}},
				"releaseSelector.handlebars": &bintree{SrcTemplatesReleaseselectorHandlebars, map[string]*bintree{}},
				"reportList.handlebars": &bintree{SrcTemplatesReportlistHandlebars, map[string]*bintree{}},
				"reportPublishedDetails.handlebars": &bintree{SrcTemplatesReportpublisheddetailsHandlebars, map[string]*bintree{}},
				"reportUnpublishedDetails.handlebars": &bintree{SrcTemplatesReportunpublisheddetailsHandlebars, map[string]*bintree{}},
				"selectorHour.handlebars": &bintree{SrcTemplatesSelectorhourHandlebars, map[string]*bintree{}},
				"selectorMinute.handlebars": &bintree{SrcTemplatesSelectorminuteHandlebars, map[string]*bintree{}},
				"tableBuilder.handlebars": &bintree{SrcTemplatesTablebuilderHandlebars, map[string]*bintree{}},
				"teamDetails.handlebars": &bintree{SrcTemplatesTeamdetailsHandlebars, map[string]*bintree{}},
				"teamEdit.handlebars": &bintree{SrcTemplatesTeameditHandlebars, map[string]*bintree{}},
				"teamList.handlebars": &bintree{SrcTemplatesTeamlistHandlebars, map[string]*bintree{}},
				"tickAnimation.handlebars": &bintree{SrcTemplatesTickanimationHandlebars, map[string]*bintree{}},
				"uploadFileForm.handlebars": &bintree{SrcTemplatesUploadfileformHandlebars, map[string]*bintree{}},
				"userDetails.handlebars": &bintree{SrcTemplatesUserdetailsHandlebars, map[string]*bintree{}},
				"userList.handlebars": &bintree{SrcTemplatesUserlistHandlebars, map[string]*bintree{}},
				"workBrowse.handlebars": &bintree{SrcTemplatesWorkbrowseHandlebars, map[string]*bintree{}},
				"workCreate.handlebars": &bintree{SrcTemplatesWorkcreateHandlebars, map[string]*bintree{}},
				"workEditCharts.handlebars": &bintree{SrcTemplatesWorkeditchartsHandlebars, map[string]*bintree{}},
				"workEditEquations.handlebars": &bintree{SrcTemplatesWorkeditequationsHandlebars, map[string]*bintree{}},
				"workEditImages.handlebars": &bintree{SrcTemplatesWorkeditimagesHandlebars, map[string]*bintree{}},
				"workEditT1.handlebars": &bintree{SrcTemplatesWorkeditt1Handlebars, map[string]*bintree{}},
				"workEditT16.handlebars": &bintree{SrcTemplatesWorkeditt16Handlebars, map[string]*bintree{}},
				"workEditT1Census.handlebars": &bintree{SrcTemplatesWorkeditt1censusHandlebars, map[string]*bintree{}},
				"workEditT1Sections.handlebars": &bintree{SrcTemplatesWorkeditt1sectionsHandlebars, map[string]*bintree{}},
				"workEditT2.handlebars": &bintree{SrcTemplatesWorkeditt2Handlebars, map[string]*bintree{}},
				"workEditT3.handlebars": &bintree{SrcTemplatesWorkeditt3Handlebars, map[string]*bintree{}},
				"workEditT4Article.handlebars": &bintree{SrcTemplatesWorkeditt4articleHandlebars, map[string]*bintree{}},
				"workEditT4ArticleDownload.handlebars": &bintree{SrcTemplatesWorkeditt4articledownloadHandlebars, map[string]*bintree{}},
				"workEditT4Bulletin.handlebars": &bintree{SrcTemplatesWorkeditt4bulletinHandlebars, map[string]*bintree{}},
				"workEditT4Compendium.handlebars": &bintree{SrcTemplatesWorkeditt4compendiumHandlebars, map[string]*bintree{}},
				"workEditT4Methodology.handlebars": &bintree{SrcTemplatesWorkeditt4methodologyHandlebars, map[string]*bintree{}},
				"workEditT5.handlebars": &bintree{SrcTemplatesWorkeditt5Handlebars, map[string]*bintree{}},
				"workEditT6.handlebars": &bintree{SrcTemplatesWorkeditt6Handlebars, map[string]*bintree{}},
				"workEditT6Chapter.handlebars": &bintree{SrcTemplatesWorkeditt6chapterHandlebars, map[string]*bintree{}},
				"workEditT6Dataset.handlebars": &bintree{SrcTemplatesWorkeditt6datasetHandlebars, map[string]*bintree{}},
				"workEditT7.handlebars": &bintree{SrcTemplatesWorkeditt7Handlebars, map[string]*bintree{}},
				"workEditT7Landing.handlebars": &bintree{SrcTemplatesWorkeditt7landingHandlebars, map[string]*bintree{}},
				"workEditT7StaticArticle.handlebars": &bintree{SrcTemplatesWorkeditt7staticarticleHandlebars, map[string]*bintree{}},
				"workEditT8.handlebars": &bintree{SrcTemplatesWorkeditt8Handlebars, map[string]*bintree{}},
				"workEditT8Compendium.handlebars": &bintree{SrcTemplatesWorkeditt8compendiumHandlebars, map[string]*bintree{}},
				"workEditT8CorrectionList.handlebars": &bintree{SrcTemplatesWorkeditt8correctionlistHandlebars, map[string]*bintree{}},
				"workEditT8LandingDatasetList.handlebars": &bintree{SrcTemplatesWorkeditt8landingdatasetlistHandlebars, map[string]*bintree{}},
				"workEditT8LandingPage.handlebars": &bintree{SrcTemplatesWorkeditt8landingpageHandlebars, map[string]*bintree{}},
				"workEditT8VersionList.handlebars": &bintree{SrcTemplatesWorkeditt8versionlistHandlebars, map[string]*bintree{}},
				"workEditTables.handlebars": &bintree{SrcTemplatesWorkedittablesHandlebars, map[string]*bintree{}},
				"workEditVisualisation.handlebars": &bintree{SrcTemplatesWorkeditvisualisationHandlebars, map[string]*bintree{}},
				"workImport.handlebars": &bintree{SrcTemplatesWorkimportHandlebars, map[string]*bintree{}},
				"workSpace.handlebars": &bintree{SrcTemplatesWorkspaceHandlebars, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

