// Code generated by go-bindata.
// sources:
// ../dist/.DS_Store
// ../dist/css/main.css
// ../dist/img/favicon11.ico
// ../dist/img/favicon12.ico
// ../dist/img/favicon21.ico
// ../dist/img/favicon22.ico
// ../dist/img/favicon23.ico
// ../dist/img/favicon24.ico
// ../dist/img/flo-logo.png
// ../dist/img/flo-logo144.png
// ../dist/img/rule-21.png
// ../dist/img/rule-22.png
// ../dist/img/rule.png
// ../dist/img/sb_v_double_arrow.png
// ../dist/img/semi-transparent-bg.png
// ../dist/img/sprite.png
// ../dist/img/ui-bg_diagonals-thick_18_b81900_40x40.png
// ../dist/img/ui-bg_diagonals-thick_20_666666_40x40.png
// ../dist/img/ui-bg_flat_10_000000_40x100.png
// ../dist/img/ui-bg_glass_100_f6f6f6_1x400.png
// ../dist/img/ui-bg_glass_100_fdf5ce_1x400.png
// ../dist/img/ui-bg_glass_65_ffffff_1x400.png
// ../dist/img/ui-bg_gloss-wave_35_f6a828_500x100.png
// ../dist/img/ui-bg_highlight-soft_100_eeeeee_1x100.png
// ../dist/img/ui-bg_highlight-soft_75_ffe45c_1x100.png
// ../dist/img/ui-icons_222222_256x240.png
// ../dist/img/ui-icons_228ef1_256x240.png
// ../dist/img/ui-icons_ef8c08_256x240.png
// ../dist/img/ui-icons_ffd27a_256x240.png
// ../dist/img/ui-icons_ffffff_256x240.png
// ../dist/img/wmd-buttons.png
// ../dist/js/app.bundle.js
// ../dist/js/florence.bundle.js
// ../dist/legacy-assets/.DS_Store
// ../dist/legacy-assets/css/main.min.css
// ../dist/legacy-assets/css/main.min.css.map
// ../dist/legacy-assets/index.html
// ../dist/legacy-assets/js/jquery.min.js
// ../dist/legacy-assets/js/main.js
// ../dist/legacy-assets/js/templates.js
// ../dist/legacy-assets/version.json
// ../dist/manifest.json
// ../dist/refactored.html
// ../dist/service-worker.js
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// DistDs_store reads file data from disk. It returns an error on failure.
func DistDs_store() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/.DS_Store"
	name := "../dist/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistCssMainCss reads file data from disk. It returns an error on failure.
func DistCssMainCss() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/css/main.css"
	name := "../dist/css/main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFavicon11Ico reads file data from disk. It returns an error on failure.
func DistImgFavicon11Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/favicon11.ico"
	name := "../dist/img/favicon11.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFavicon12Ico reads file data from disk. It returns an error on failure.
func DistImgFavicon12Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/favicon12.ico"
	name := "../dist/img/favicon12.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFavicon21Ico reads file data from disk. It returns an error on failure.
func DistImgFavicon21Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/favicon21.ico"
	name := "../dist/img/favicon21.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFavicon22Ico reads file data from disk. It returns an error on failure.
func DistImgFavicon22Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/favicon22.ico"
	name := "../dist/img/favicon22.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFavicon23Ico reads file data from disk. It returns an error on failure.
func DistImgFavicon23Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/favicon23.ico"
	name := "../dist/img/favicon23.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFavicon24Ico reads file data from disk. It returns an error on failure.
func DistImgFavicon24Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/favicon24.ico"
	name := "../dist/img/favicon24.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFloLogoPng reads file data from disk. It returns an error on failure.
func DistImgFloLogoPng() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/flo-logo.png"
	name := "../dist/img/flo-logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgFloLogo144Png reads file data from disk. It returns an error on failure.
func DistImgFloLogo144Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/flo-logo144.png"
	name := "../dist/img/flo-logo144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgRule21Png reads file data from disk. It returns an error on failure.
func DistImgRule21Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/rule-21.png"
	name := "../dist/img/rule-21.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgRule22Png reads file data from disk. It returns an error on failure.
func DistImgRule22Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/rule-22.png"
	name := "../dist/img/rule-22.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgRulePng reads file data from disk. It returns an error on failure.
func DistImgRulePng() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/rule.png"
	name := "../dist/img/rule.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgSb_v_double_arrowPng reads file data from disk. It returns an error on failure.
func DistImgSb_v_double_arrowPng() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/sb_v_double_arrow.png"
	name := "../dist/img/sb_v_double_arrow.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgSemiTransparentBgPng reads file data from disk. It returns an error on failure.
func DistImgSemiTransparentBgPng() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/semi-transparent-bg.png"
	name := "../dist/img/semi-transparent-bg.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgSpritePng reads file data from disk. It returns an error on failure.
func DistImgSpritePng() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/sprite.png"
	name := "../dist/img/sprite.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_diagonalsThick_18_b81900_40x40Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_diagonalsThick_18_b81900_40x40Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	name := "../dist/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_diagonalsThick_20_666666_40x40Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_diagonalsThick_20_666666_40x40Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	name := "../dist/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_flat_10_000000_40x100Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_flat_10_000000_40x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_flat_10_000000_40x100.png"
	name := "../dist/img/ui-bg_flat_10_000000_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_glass_100_f6f6f6_1x400Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_glass_100_f6f6f6_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_glass_100_f6f6f6_1x400.png"
	name := "../dist/img/ui-bg_glass_100_f6f6f6_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_glass_100_fdf5ce_1x400Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_glass_100_fdf5ce_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_glass_100_fdf5ce_1x400.png"
	name := "../dist/img/ui-bg_glass_100_fdf5ce_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_glass_65_ffffff_1x400Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_glass_65_ffffff_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_glass_65_ffffff_1x400.png"
	name := "../dist/img/ui-bg_glass_65_ffffff_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_glossWave_35_f6a828_500x100Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_glossWave_35_f6a828_500x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	name := "../dist/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_highlightSoft_100_eeeeee_1x100Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_highlightSoft_100_eeeeee_1x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	name := "../dist/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiBg_highlightSoft_75_ffe45c_1x100Png reads file data from disk. It returns an error on failure.
func DistImgUiBg_highlightSoft_75_ffe45c_1x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	name := "../dist/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func DistImgUiIcons_222222_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-icons_222222_256x240.png"
	name := "../dist/img/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiIcons_228ef1_256x240Png reads file data from disk. It returns an error on failure.
func DistImgUiIcons_228ef1_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-icons_228ef1_256x240.png"
	name := "../dist/img/ui-icons_228ef1_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiIcons_ef8c08_256x240Png reads file data from disk. It returns an error on failure.
func DistImgUiIcons_ef8c08_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-icons_ef8c08_256x240.png"
	name := "../dist/img/ui-icons_ef8c08_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiIcons_ffd27a_256x240Png reads file data from disk. It returns an error on failure.
func DistImgUiIcons_ffd27a_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-icons_ffd27a_256x240.png"
	name := "../dist/img/ui-icons_ffd27a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgUiIcons_ffffff_256x240Png reads file data from disk. It returns an error on failure.
func DistImgUiIcons_ffffff_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/ui-icons_ffffff_256x240.png"
	name := "../dist/img/ui-icons_ffffff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistImgWmdButtonsPng reads file data from disk. It returns an error on failure.
func DistImgWmdButtonsPng() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/img/wmd-buttons.png"
	name := "../dist/img/wmd-buttons.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistJsAppBundleJs reads file data from disk. It returns an error on failure.
func DistJsAppBundleJs() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/js/app.bundle.js"
	name := "../dist/js/app.bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistJsFlorenceBundleJs reads file data from disk. It returns an error on failure.
func DistJsFlorenceBundleJs() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/js/florence.bundle.js"
	name := "../dist/js/florence.bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsDs_store reads file data from disk. It returns an error on failure.
func DistLegacyAssetsDs_store() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/.DS_Store"
	name := "../dist/legacy-assets/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssMainMinCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssMainMinCss() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/css/main.min.css"
	name := "../dist/legacy-assets/css/main.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssMainMinCssMap reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssMainMinCssMap() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/css/main.min.css.map"
	name := "../dist/legacy-assets/css/main.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsIndexHtml reads file data from disk. It returns an error on failure.
func DistLegacyAssetsIndexHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/index.html"
	name := "../dist/legacy-assets/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsJqueryMinJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsJqueryMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/js/jquery.min.js"
	name := "../dist/legacy-assets/js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsMainJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/js/main.js"
	name := "../dist/legacy-assets/js/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsTemplatesJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsTemplatesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/js/templates.js"
	name := "../dist/legacy-assets/js/templates.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsVersionJson reads file data from disk. It returns an error on failure.
func DistLegacyAssetsVersionJson() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/legacy-assets/version.json"
	name := "../dist/legacy-assets/version.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistManifestJson reads file data from disk. It returns an error on failure.
func DistManifestJson() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/manifest.json"
	name := "../dist/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistRefactoredHtml reads file data from disk. It returns an error on failure.
func DistRefactoredHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/refactored.html"
	name := "../dist/refactored.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistServiceWorkerJs reads file data from disk. It returns an error on failure.
func DistServiceWorkerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Dev/src/github.com/ONSdigital/florence/dist/service-worker.js"
	name := "../dist/service-worker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../dist/.DS_Store": DistDs_store,
	"../dist/css/main.css": DistCssMainCss,
	"../dist/img/favicon11.ico": DistImgFavicon11Ico,
	"../dist/img/favicon12.ico": DistImgFavicon12Ico,
	"../dist/img/favicon21.ico": DistImgFavicon21Ico,
	"../dist/img/favicon22.ico": DistImgFavicon22Ico,
	"../dist/img/favicon23.ico": DistImgFavicon23Ico,
	"../dist/img/favicon24.ico": DistImgFavicon24Ico,
	"../dist/img/flo-logo.png": DistImgFloLogoPng,
	"../dist/img/flo-logo144.png": DistImgFloLogo144Png,
	"../dist/img/rule-21.png": DistImgRule21Png,
	"../dist/img/rule-22.png": DistImgRule22Png,
	"../dist/img/rule.png": DistImgRulePng,
	"../dist/img/sb_v_double_arrow.png": DistImgSb_v_double_arrowPng,
	"../dist/img/semi-transparent-bg.png": DistImgSemiTransparentBgPng,
	"../dist/img/sprite.png": DistImgSpritePng,
	"../dist/img/ui-bg_diagonals-thick_18_b81900_40x40.png": DistImgUiBg_diagonalsThick_18_b81900_40x40Png,
	"../dist/img/ui-bg_diagonals-thick_20_666666_40x40.png": DistImgUiBg_diagonalsThick_20_666666_40x40Png,
	"../dist/img/ui-bg_flat_10_000000_40x100.png": DistImgUiBg_flat_10_000000_40x100Png,
	"../dist/img/ui-bg_glass_100_f6f6f6_1x400.png": DistImgUiBg_glass_100_f6f6f6_1x400Png,
	"../dist/img/ui-bg_glass_100_fdf5ce_1x400.png": DistImgUiBg_glass_100_fdf5ce_1x400Png,
	"../dist/img/ui-bg_glass_65_ffffff_1x400.png": DistImgUiBg_glass_65_ffffff_1x400Png,
	"../dist/img/ui-bg_gloss-wave_35_f6a828_500x100.png": DistImgUiBg_glossWave_35_f6a828_500x100Png,
	"../dist/img/ui-bg_highlight-soft_100_eeeeee_1x100.png": DistImgUiBg_highlightSoft_100_eeeeee_1x100Png,
	"../dist/img/ui-bg_highlight-soft_75_ffe45c_1x100.png": DistImgUiBg_highlightSoft_75_ffe45c_1x100Png,
	"../dist/img/ui-icons_222222_256x240.png": DistImgUiIcons_222222_256x240Png,
	"../dist/img/ui-icons_228ef1_256x240.png": DistImgUiIcons_228ef1_256x240Png,
	"../dist/img/ui-icons_ef8c08_256x240.png": DistImgUiIcons_ef8c08_256x240Png,
	"../dist/img/ui-icons_ffd27a_256x240.png": DistImgUiIcons_ffd27a_256x240Png,
	"../dist/img/ui-icons_ffffff_256x240.png": DistImgUiIcons_ffffff_256x240Png,
	"../dist/img/wmd-buttons.png": DistImgWmdButtonsPng,
	"../dist/js/app.bundle.js": DistJsAppBundleJs,
	"../dist/js/florence.bundle.js": DistJsFlorenceBundleJs,
	"../dist/legacy-assets/.DS_Store": DistLegacyAssetsDs_store,
	"../dist/legacy-assets/css/main.min.css": DistLegacyAssetsCssMainMinCss,
	"../dist/legacy-assets/css/main.min.css.map": DistLegacyAssetsCssMainMinCssMap,
	"../dist/legacy-assets/index.html": DistLegacyAssetsIndexHtml,
	"../dist/legacy-assets/js/jquery.min.js": DistLegacyAssetsJsJqueryMinJs,
	"../dist/legacy-assets/js/main.js": DistLegacyAssetsJsMainJs,
	"../dist/legacy-assets/js/templates.js": DistLegacyAssetsJsTemplatesJs,
	"../dist/legacy-assets/version.json": DistLegacyAssetsVersionJson,
	"../dist/manifest.json": DistManifestJson,
	"../dist/refactored.html": DistRefactoredHtml,
	"../dist/service-worker.js": DistServiceWorkerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"dist": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{DistDs_store, map[string]*bintree{}},
			"css": &bintree{nil, map[string]*bintree{
				"main.css": &bintree{DistCssMainCss, map[string]*bintree{}},
			}},
			"img": &bintree{nil, map[string]*bintree{
				"favicon11.ico": &bintree{DistImgFavicon11Ico, map[string]*bintree{}},
				"favicon12.ico": &bintree{DistImgFavicon12Ico, map[string]*bintree{}},
				"favicon21.ico": &bintree{DistImgFavicon21Ico, map[string]*bintree{}},
				"favicon22.ico": &bintree{DistImgFavicon22Ico, map[string]*bintree{}},
				"favicon23.ico": &bintree{DistImgFavicon23Ico, map[string]*bintree{}},
				"favicon24.ico": &bintree{DistImgFavicon24Ico, map[string]*bintree{}},
				"flo-logo.png": &bintree{DistImgFloLogoPng, map[string]*bintree{}},
				"flo-logo144.png": &bintree{DistImgFloLogo144Png, map[string]*bintree{}},
				"rule-21.png": &bintree{DistImgRule21Png, map[string]*bintree{}},
				"rule-22.png": &bintree{DistImgRule22Png, map[string]*bintree{}},
				"rule.png": &bintree{DistImgRulePng, map[string]*bintree{}},
				"sb_v_double_arrow.png": &bintree{DistImgSb_v_double_arrowPng, map[string]*bintree{}},
				"semi-transparent-bg.png": &bintree{DistImgSemiTransparentBgPng, map[string]*bintree{}},
				"sprite.png": &bintree{DistImgSpritePng, map[string]*bintree{}},
				"ui-bg_diagonals-thick_18_b81900_40x40.png": &bintree{DistImgUiBg_diagonalsThick_18_b81900_40x40Png, map[string]*bintree{}},
				"ui-bg_diagonals-thick_20_666666_40x40.png": &bintree{DistImgUiBg_diagonalsThick_20_666666_40x40Png, map[string]*bintree{}},
				"ui-bg_flat_10_000000_40x100.png": &bintree{DistImgUiBg_flat_10_000000_40x100Png, map[string]*bintree{}},
				"ui-bg_glass_100_f6f6f6_1x400.png": &bintree{DistImgUiBg_glass_100_f6f6f6_1x400Png, map[string]*bintree{}},
				"ui-bg_glass_100_fdf5ce_1x400.png": &bintree{DistImgUiBg_glass_100_fdf5ce_1x400Png, map[string]*bintree{}},
				"ui-bg_glass_65_ffffff_1x400.png": &bintree{DistImgUiBg_glass_65_ffffff_1x400Png, map[string]*bintree{}},
				"ui-bg_gloss-wave_35_f6a828_500x100.png": &bintree{DistImgUiBg_glossWave_35_f6a828_500x100Png, map[string]*bintree{}},
				"ui-bg_highlight-soft_100_eeeeee_1x100.png": &bintree{DistImgUiBg_highlightSoft_100_eeeeee_1x100Png, map[string]*bintree{}},
				"ui-bg_highlight-soft_75_ffe45c_1x100.png": &bintree{DistImgUiBg_highlightSoft_75_ffe45c_1x100Png, map[string]*bintree{}},
				"ui-icons_222222_256x240.png": &bintree{DistImgUiIcons_222222_256x240Png, map[string]*bintree{}},
				"ui-icons_228ef1_256x240.png": &bintree{DistImgUiIcons_228ef1_256x240Png, map[string]*bintree{}},
				"ui-icons_ef8c08_256x240.png": &bintree{DistImgUiIcons_ef8c08_256x240Png, map[string]*bintree{}},
				"ui-icons_ffd27a_256x240.png": &bintree{DistImgUiIcons_ffd27a_256x240Png, map[string]*bintree{}},
				"ui-icons_ffffff_256x240.png": &bintree{DistImgUiIcons_ffffff_256x240Png, map[string]*bintree{}},
				"wmd-buttons.png": &bintree{DistImgWmdButtonsPng, map[string]*bintree{}},
			}},
			"js": &bintree{nil, map[string]*bintree{
				"app.bundle.js": &bintree{DistJsAppBundleJs, map[string]*bintree{}},
				"florence.bundle.js": &bintree{DistJsFlorenceBundleJs, map[string]*bintree{}},
			}},
			"legacy-assets": &bintree{nil, map[string]*bintree{
				".DS_Store": &bintree{DistLegacyAssetsDs_store, map[string]*bintree{}},
				"css": &bintree{nil, map[string]*bintree{
					"main.min.css": &bintree{DistLegacyAssetsCssMainMinCss, map[string]*bintree{}},
					"main.min.css.map": &bintree{DistLegacyAssetsCssMainMinCssMap, map[string]*bintree{}},
				}},
				"index.html": &bintree{DistLegacyAssetsIndexHtml, map[string]*bintree{}},
				"js": &bintree{nil, map[string]*bintree{
					"jquery.min.js": &bintree{DistLegacyAssetsJsJqueryMinJs, map[string]*bintree{}},
					"main.js": &bintree{DistLegacyAssetsJsMainJs, map[string]*bintree{}},
					"templates.js": &bintree{DistLegacyAssetsJsTemplatesJs, map[string]*bintree{}},
				}},
				"version.json": &bintree{DistLegacyAssetsVersionJson, map[string]*bintree{}},
			}},
			"manifest.json": &bintree{DistManifestJson, map[string]*bintree{}},
			"refactored.html": &bintree{DistRefactoredHtml, map[string]*bintree{}},
			"service-worker.js": &bintree{DistServiceWorkerJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

