//_utilities.scss



//hiding

// Hide from both screenreaders and browsers: h5bp.com/u
.hidden {
	display: none !important;
	height: 0;
	margin: 0;
	visibility: hidden;
}

// Hide only visually, but have it available for screenreaders: h5bp.com/v
.visuallyhidden {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	border: 0;
	overflow: hidden;
	clip: rect(0 0 0 0);

  	// Extends the .visuallyhidden class to allow the element to be focusable when navigated to via the keyboard: h5bp.com/p
  	&.focusable:active,
	&.focusable:focus {
		position: static;
		width: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		clip: auto;
	}
}



// margins

.margin {

    &-top {

        &--negative-one-fix {
            margin-top: -1px !important;
        }

        &--negative-two-fix {
            margin-top: -2px !important;
        }
        margin-top: ($baseline * 2) !important;

        &--half {
            margin-top: ($baseline) !important;
        }

        &--double {
            margin-top: ($baseline * 4) !important;
        }

        &--triple {
            margin-top: ($baseline * 6) !important;

            &-lg {
                @include breakpoint(lg) {
                    margin-top: ($baseline * 6) !important;
                }
            }
        }
    }

    &-right {
        margin-right: $col !important;

        &--half {
            margin-right: ($col / 2) !important;
        }

        &--double {
            margin-right: ($col * 2) !important;
        }
    }

    &-bottom {
        margin-bottom: ($baseline * 2) !important;

        &--half {
            margin-bottom: ($baseline) !important;
        }

        &--double {
            margin-bottom: ($baseline * 4) !important;
        }
    }

    &-left {
        margin-left: $col !important;

        &--negative-one-fix {
            margin-left: -1px !important;
        }
        &--half {
            margin-left: ($col / 2) !important;
        }
        &--double {
            margin-left: ($col * 2) !important;
        }
    }

}



.flush {
	margin: 0 !important;

    &--sm {
        @include breakpoint(sm) {
            margin: 0 !important;
        }
    }
}

.flush-col {
	margin-left: 0 !important;
	margin-right: 0 !important;
}

.flush-bottom {
	margin-bottom: 0 !important;
}

.flush-top {
	margin-top: 0 !important;
}



// padding

.padding {

	&-top {
		padding-top: ($baseline * 2) !important;

		&--half {
			padding-top: ($baseline) !important;
		}
	}

	&-right {
		padding-right: $col !important;

		&--half {
			padding-right: ($col / 2) !important;
		}

		&--none {
		  padding-left: 0 !important;
		  padding-right: 0 !important;
		}
	}

	&-bottom {
		padding-bottom: ($baseline * 2) !important;

		&--half {
			padding-bottom: ($baseline) !important;
		}

	}

	&-left {
		padding-left: $col !important;

		&--half {
			padding-left: ($col / 2) !important;
		}

	  	&--none {
		  	padding-left: 0 !important;
		  	padding-right: 0 !important;
		}
	}

}


// display

.block {
    display: block !important;
}

.inline {
	display: inline !important;
}

.inline-block {
	display: inline-block !important;

    // Needed for census landing page - only one medium and above
    @include breakpoint(md) {
        &--md {
            display: inline-block !important;
        }
    }
}

.hide {
	display: none !important;

    // Fix for old-ie hiding mobile--hide class
    @if $old-ie == false {
        &--sm {
            @include breakpoint(sm) {
                display: none !important;
            }
        }
    }

    &--md {
        @include breakpoint(md) {
            display: none !important;
        }
    }

    &--md-only {
        @include breakpoint(md) {
            display: none;
        }
        @include breakpoint(lg) {
            display: block;
        }
    }

    &--lg {
        @include breakpoint(lg) {
            display: none !important;
        }
    }
}

@if $old-ie == true {

	.old-ie {

		&--display-block {
			display: block !important;
		}

	}

}

// float

.float-right {
	float: right !important;
}

.float-left {
	float: left !important
}


// javascript

.no-js .nojs--hide, .nojs--hide {
  display: none !important;
}

.js .js-hidden, .js-hidden  {
  display: none !important;
}

.js--show {
    display: none;
}

//.js-enhance--show {
//    display: none;
//}


// clear

.clear-left {
	clear: left !important;
}

.clear-right {
	clear: right !important;
}

// hiding polyfill placeholder - temporary fix for IE8/9

.placeholder {
	display:none;
}


// overflow

.overflow {
    &--hidden {
      overflow: hidden !important;
    }
}


// Set anything with aria-hidden attributes to correct display state
 @media only screen {
     [aria-hidden*=true] {
         display: none;
         visibility: hidden;
     }

     svg[aria-hidden*=true] { // Allow SVGs to still show even with aria:hidden. Only want them hidden from screen readers.
         display: block;
         visibility: visible;
     }

     [aria-hidden*=false] {
         display: block;
         visibility: visible;
     }
 }

#viewport {

    &-sm {
        height: 0;
        max-height: 0;
        display: none;

        @include breakpoint(sm) {
            display: block;
        }
    }

    &-md {
        height: 0;
        max-height: 0;
        display: none;

        @include breakpoint(md) {
            display: block;
        }
    }

    &-lg {
        height: 0;
        max-height: 0;
        display: none;

        @include breakpoint(lg) {
            display: block;
        }

    }

}


//Text transform

.lowercase {
    text-transform: lowercase;
}

.uppercase {
    text-transform: uppercase;
}

.capitalise:first-letter {
    text-transform: capitalize;
}

.text-center {
    text-align: center !important;

    &--md {
        @include breakpoint(md) {
            text-align: center !important;
        }
    }

    &--lg {
        @include breakpoint(lg) {
            text-align: center !important;
        }
    }
}

.text-right {
    text-align: right !important;

    &--md {
        @include breakpoint(md) {
            text-align: right !important;
        }
    }

    &--lg {
        @include breakpoint(lg) {
            text-align: right !important;
        }
    }
}

.text-left {
    text-align: left !important;

    &--md {
        @include breakpoint(md) {
            text-align: left !important;
        }
    }

    &--lg {
        @include breakpoint(lg) {
            text-align: left !important;
        }
    }
}

.underline-link {
    text-decoration: underline !important;
}

.img-sparkline {
    max-height: 100%;
}

.break-word {
    word-wrap: break-word;
}


// Baseline

// Used on inline elements that aren't on grid because they're not in a baselined element (eg an anchor not in a <p>)
.baseline {
    padding: 3px 0 5px 0;
}